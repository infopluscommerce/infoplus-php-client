<?php
/**
 * EmailTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * EmailTemplate Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'emailTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'lob_id' => 'int',
        'subject' => 'string',
        'name' => 'string',
        'from_name' => 'string',
        'from_address' => 'string',
        'to_name' => 'string',
        'to_address' => 'string',
        'cc_address' => 'string',
        'bcc_address' => 'string',
        'email_template_type' => 'string',
        'record_type' => 'string',
        'api_version' => 'string',
        'script_id' => 'int',
        'send_to_bill_to' => 'bool',
        'send_to_ship_to' => 'bool',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'lob_id' => 'int32',
        'subject' => null,
        'name' => null,
        'from_name' => null,
        'from_address' => null,
        'to_name' => null,
        'to_address' => null,
        'cc_address' => null,
        'bcc_address' => null,
        'email_template_type' => null,
        'record_type' => null,
        'api_version' => null,
        'script_id' => 'int32',
        'send_to_bill_to' => null,
        'send_to_ship_to' => null,
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'lob_id' => 'lobId',
        'subject' => 'subject',
        'name' => 'name',
        'from_name' => 'fromName',
        'from_address' => 'fromAddress',
        'to_name' => 'toName',
        'to_address' => 'toAddress',
        'cc_address' => 'ccAddress',
        'bcc_address' => 'bccAddress',
        'email_template_type' => 'emailTemplateType',
        'record_type' => 'recordType',
        'api_version' => 'apiVersion',
        'script_id' => 'scriptId',
        'send_to_bill_to' => 'sendToBillTo',
        'send_to_ship_to' => 'sendToShipTo',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'lob_id' => 'setLobId',
        'subject' => 'setSubject',
        'name' => 'setName',
        'from_name' => 'setFromName',
        'from_address' => 'setFromAddress',
        'to_name' => 'setToName',
        'to_address' => 'setToAddress',
        'cc_address' => 'setCcAddress',
        'bcc_address' => 'setBccAddress',
        'email_template_type' => 'setEmailTemplateType',
        'record_type' => 'setRecordType',
        'api_version' => 'setApiVersion',
        'script_id' => 'setScriptId',
        'send_to_bill_to' => 'setSendToBillTo',
        'send_to_ship_to' => 'setSendToShipTo',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'lob_id' => 'getLobId',
        'subject' => 'getSubject',
        'name' => 'getName',
        'from_name' => 'getFromName',
        'from_address' => 'getFromAddress',
        'to_name' => 'getToName',
        'to_address' => 'getToAddress',
        'cc_address' => 'getCcAddress',
        'bcc_address' => 'getBccAddress',
        'email_template_type' => 'getEmailTemplateType',
        'record_type' => 'getRecordType',
        'api_version' => 'getApiVersion',
        'script_id' => 'getScriptId',
        'send_to_bill_to' => 'getSendToBillTo',
        'send_to_ship_to' => 'getSendToShipTo',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['from_name'] = isset($data['from_name']) ? $data['from_name'] : null;
        $this->container['from_address'] = isset($data['from_address']) ? $data['from_address'] : null;
        $this->container['to_name'] = isset($data['to_name']) ? $data['to_name'] : null;
        $this->container['to_address'] = isset($data['to_address']) ? $data['to_address'] : null;
        $this->container['cc_address'] = isset($data['cc_address']) ? $data['cc_address'] : null;
        $this->container['bcc_address'] = isset($data['bcc_address']) ? $data['bcc_address'] : null;
        $this->container['email_template_type'] = isset($data['email_template_type']) ? $data['email_template_type'] : null;
        $this->container['record_type'] = isset($data['record_type']) ? $data['record_type'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['script_id'] = isset($data['script_id']) ? $data['script_id'] : null;
        $this->container['send_to_bill_to'] = isset($data['send_to_bill_to']) ? $data['send_to_bill_to'] : false;
        $this->container['send_to_ship_to'] = isset($data['send_to_ship_to']) ? $data['send_to_ship_to'] : false;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['from_name'] === null) {
            $invalidProperties[] = "'from_name' can't be null";
        }
        if ($this->container['from_address'] === null) {
            $invalidProperties[] = "'from_address' can't be null";
        }
        if ($this->container['email_template_type'] === null) {
            $invalidProperties[] = "'email_template_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['subject'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['from_name'] === null) {
            return false;
        }
        if ($this->container['from_address'] === null) {
            return false;
        }
        if ($this->container['email_template_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string $from_name from_name
     *
     * @return $this
     */
    public function setFromName($from_name)
    {
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return string
     */
    public function getFromAddress()
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param string $from_address from_address
     *
     * @return $this
     */
    public function setFromAddress($from_address)
    {
        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets to_name
     *
     * @return string
     */
    public function getToName()
    {
        return $this->container['to_name'];
    }

    /**
     * Sets to_name
     *
     * @param string $to_name to_name
     *
     * @return $this
     */
    public function setToName($to_name)
    {
        $this->container['to_name'] = $to_name;

        return $this;
    }

    /**
     * Gets to_address
     *
     * @return string
     */
    public function getToAddress()
    {
        return $this->container['to_address'];
    }

    /**
     * Sets to_address
     *
     * @param string $to_address to_address
     *
     * @return $this
     */
    public function setToAddress($to_address)
    {
        $this->container['to_address'] = $to_address;

        return $this;
    }

    /**
     * Gets cc_address
     *
     * @return string
     */
    public function getCcAddress()
    {
        return $this->container['cc_address'];
    }

    /**
     * Sets cc_address
     *
     * @param string $cc_address cc_address
     *
     * @return $this
     */
    public function setCcAddress($cc_address)
    {
        $this->container['cc_address'] = $cc_address;

        return $this;
    }

    /**
     * Gets bcc_address
     *
     * @return string
     */
    public function getBccAddress()
    {
        return $this->container['bcc_address'];
    }

    /**
     * Sets bcc_address
     *
     * @param string $bcc_address bcc_address
     *
     * @return $this
     */
    public function setBccAddress($bcc_address)
    {
        $this->container['bcc_address'] = $bcc_address;

        return $this;
    }

    /**
     * Gets email_template_type
     *
     * @return string
     */
    public function getEmailTemplateType()
    {
        return $this->container['email_template_type'];
    }

    /**
     * Sets email_template_type
     *
     * @param string $email_template_type email_template_type
     *
     * @return $this
     */
    public function setEmailTemplateType($email_template_type)
    {
        $this->container['email_template_type'] = $email_template_type;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string $record_type record_type
     *
     * @return $this
     */
    public function setRecordType($record_type)
    {
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets api_version
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     *
     * @param string $api_version api_version
     *
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets script_id
     *
     * @return int
     */
    public function getScriptId()
    {
        return $this->container['script_id'];
    }

    /**
     * Sets script_id
     *
     * @param int $script_id script_id
     *
     * @return $this
     */
    public function setScriptId($script_id)
    {
        $this->container['script_id'] = $script_id;

        return $this;
    }

    /**
     * Gets send_to_bill_to
     *
     * @return bool
     */
    public function getSendToBillTo()
    {
        return $this->container['send_to_bill_to'];
    }

    /**
     * Sets send_to_bill_to
     *
     * @param bool $send_to_bill_to send_to_bill_to
     *
     * @return $this
     */
    public function setSendToBillTo($send_to_bill_to)
    {
        $this->container['send_to_bill_to'] = $send_to_bill_to;

        return $this;
    }

    /**
     * Gets send_to_ship_to
     *
     * @return bool
     */
    public function getSendToShipTo()
    {
        return $this->container['send_to_ship_to'];
    }

    /**
     * Sets send_to_ship_to
     *
     * @param bool $send_to_ship_to send_to_ship_to
     *
     * @return $this
     */
    public function setSendToShipTo($send_to_ship_to)
    {
        $this->container['send_to_ship_to'] = $send_to_ship_to;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


