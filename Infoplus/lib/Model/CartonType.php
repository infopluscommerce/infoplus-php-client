<?php
/**
 * CartonType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * CartonType Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartonType implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'abbreviation' => 'string',
        'name' => 'string',
        'length_in' => 'double',
        'width_in' => 'double',
        'height_in' => 'double',
        'inner_length_in' => 'double',
        'inner_width_in' => 'double',
        'inner_height_in' => 'double',
        'weight_lbs' => 'double',
        'lob_id' => 'int',
        'is_active' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'abbreviation' => 'abbreviation',
        'name' => 'name',
        'length_in' => 'lengthIn',
        'width_in' => 'widthIn',
        'height_in' => 'heightIn',
        'inner_length_in' => 'innerLengthIn',
        'inner_width_in' => 'innerWidthIn',
        'inner_height_in' => 'innerHeightIn',
        'weight_lbs' => 'weightLbs',
        'lob_id' => 'lobId',
        'is_active' => 'isActive'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'abbreviation' => 'setAbbreviation',
        'name' => 'setName',
        'length_in' => 'setLengthIn',
        'width_in' => 'setWidthIn',
        'height_in' => 'setHeightIn',
        'inner_length_in' => 'setInnerLengthIn',
        'inner_width_in' => 'setInnerWidthIn',
        'inner_height_in' => 'setInnerHeightIn',
        'weight_lbs' => 'setWeightLbs',
        'lob_id' => 'setLobId',
        'is_active' => 'setIsActive'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'abbreviation' => 'getAbbreviation',
        'name' => 'getName',
        'length_in' => 'getLengthIn',
        'width_in' => 'getWidthIn',
        'height_in' => 'getHeightIn',
        'inner_length_in' => 'getInnerLengthIn',
        'inner_width_in' => 'getInnerWidthIn',
        'inner_height_in' => 'getInnerHeightIn',
        'weight_lbs' => 'getWeightLbs',
        'lob_id' => 'getLobId',
        'is_active' => 'getIsActive'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $abbreviation 
      * @var string
      */
    protected $abbreviation;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $length_in 
      * @var double
      */
    protected $length_in;
    
    /**
      * $width_in 
      * @var double
      */
    protected $width_in;
    
    /**
      * $height_in 
      * @var double
      */
    protected $height_in;
    
    /**
      * $inner_length_in 
      * @var double
      */
    protected $inner_length_in;
    
    /**
      * $inner_width_in 
      * @var double
      */
    protected $inner_width_in;
    
    /**
      * $inner_height_in 
      * @var double
      */
    protected $inner_height_in;
    
    /**
      * $weight_lbs 
      * @var double
      */
    protected $weight_lbs;
    
    /**
      * $lob_id 
      * @var int
      */
    protected $lob_id;
    
    /**
      * $is_active 
      * @var bool
      */
    protected $is_active = false;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->abbreviation = $data["abbreviation"];
            $this->name = $data["name"];
            $this->length_in = $data["length_in"];
            $this->width_in = $data["width_in"];
            $this->height_in = $data["height_in"];
            $this->inner_length_in = $data["inner_length_in"];
            $this->inner_width_in = $data["inner_width_in"];
            $this->inner_height_in = $data["inner_height_in"];
            $this->weight_lbs = $data["weight_lbs"];
            $this->lob_id = $data["lob_id"];
            $this->is_active = $data["is_active"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets abbreviation
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->abbreviation;
    }
  
    /**
     * Sets abbreviation
     * @param string $abbreviation 
     * @return $this
     */
    public function setAbbreviation($abbreviation)
    {
        
        $this->abbreviation = $abbreviation;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets length_in
     * @return double
     */
    public function getLengthIn()
    {
        return $this->length_in;
    }
  
    /**
     * Sets length_in
     * @param double $length_in 
     * @return $this
     */
    public function setLengthIn($length_in)
    {
        
        $this->length_in = $length_in;
        return $this;
    }
    
    /**
     * Gets width_in
     * @return double
     */
    public function getWidthIn()
    {
        return $this->width_in;
    }
  
    /**
     * Sets width_in
     * @param double $width_in 
     * @return $this
     */
    public function setWidthIn($width_in)
    {
        
        $this->width_in = $width_in;
        return $this;
    }
    
    /**
     * Gets height_in
     * @return double
     */
    public function getHeightIn()
    {
        return $this->height_in;
    }
  
    /**
     * Sets height_in
     * @param double $height_in 
     * @return $this
     */
    public function setHeightIn($height_in)
    {
        
        $this->height_in = $height_in;
        return $this;
    }
    
    /**
     * Gets inner_length_in
     * @return double
     */
    public function getInnerLengthIn()
    {
        return $this->inner_length_in;
    }
  
    /**
     * Sets inner_length_in
     * @param double $inner_length_in 
     * @return $this
     */
    public function setInnerLengthIn($inner_length_in)
    {
        
        $this->inner_length_in = $inner_length_in;
        return $this;
    }
    
    /**
     * Gets inner_width_in
     * @return double
     */
    public function getInnerWidthIn()
    {
        return $this->inner_width_in;
    }
  
    /**
     * Sets inner_width_in
     * @param double $inner_width_in 
     * @return $this
     */
    public function setInnerWidthIn($inner_width_in)
    {
        
        $this->inner_width_in = $inner_width_in;
        return $this;
    }
    
    /**
     * Gets inner_height_in
     * @return double
     */
    public function getInnerHeightIn()
    {
        return $this->inner_height_in;
    }
  
    /**
     * Sets inner_height_in
     * @param double $inner_height_in 
     * @return $this
     */
    public function setInnerHeightIn($inner_height_in)
    {
        
        $this->inner_height_in = $inner_height_in;
        return $this;
    }
    
    /**
     * Gets weight_lbs
     * @return double
     */
    public function getWeightLbs()
    {
        return $this->weight_lbs;
    }
  
    /**
     * Sets weight_lbs
     * @param double $weight_lbs 
     * @return $this
     */
    public function setWeightLbs($weight_lbs)
    {
        
        $this->weight_lbs = $weight_lbs;
        return $this;
    }
    
    /**
     * Gets lob_id
     * @return int
     */
    public function getLobId()
    {
        return $this->lob_id;
    }
  
    /**
     * Sets lob_id
     * @param int $lob_id 
     * @return $this
     */
    public function setLobId($lob_id)
    {
        
        $this->lob_id = $lob_id;
        return $this;
    }
    
    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->is_active;
    }
  
    /**
     * Sets is_active
     * @param bool $is_active 
     * @return $this
     */
    public function setIsActive($is_active)
    {
        
        $this->is_active = $is_active;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
