<?php
/**
 * CartonType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * CartonType Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartonType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'cartonType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'abbreviation' => 'string',
        'name' => 'string',
        'length_in' => 'float',
        'width_in' => 'float',
        'height_in' => 'float',
        'inner_length_in' => 'float',
        'inner_width_in' => 'float',
        'inner_height_in' => 'float',
        'weight_lbs' => 'float',
        'lob_id' => 'int',
        'is_active' => 'bool',
        'predefined_package_type_id' => 'int',
        'origin' => 'string',
        'type' => 'string',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'abbreviation' => null,
        'name' => null,
        'length_in' => null,
        'width_in' => null,
        'height_in' => null,
        'inner_length_in' => null,
        'inner_width_in' => null,
        'inner_height_in' => null,
        'weight_lbs' => null,
        'lob_id' => 'int32',
        'is_active' => null,
        'predefined_package_type_id' => 'int32',
        'origin' => null,
        'type' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'abbreviation' => 'abbreviation',
        'name' => 'name',
        'length_in' => 'lengthIn',
        'width_in' => 'widthIn',
        'height_in' => 'heightIn',
        'inner_length_in' => 'innerLengthIn',
        'inner_width_in' => 'innerWidthIn',
        'inner_height_in' => 'innerHeightIn',
        'weight_lbs' => 'weightLbs',
        'lob_id' => 'lobId',
        'is_active' => 'isActive',
        'predefined_package_type_id' => 'predefinedPackageTypeId',
        'origin' => 'origin',
        'type' => 'type',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'abbreviation' => 'setAbbreviation',
        'name' => 'setName',
        'length_in' => 'setLengthIn',
        'width_in' => 'setWidthIn',
        'height_in' => 'setHeightIn',
        'inner_length_in' => 'setInnerLengthIn',
        'inner_width_in' => 'setInnerWidthIn',
        'inner_height_in' => 'setInnerHeightIn',
        'weight_lbs' => 'setWeightLbs',
        'lob_id' => 'setLobId',
        'is_active' => 'setIsActive',
        'predefined_package_type_id' => 'setPredefinedPackageTypeId',
        'origin' => 'setOrigin',
        'type' => 'setType',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'abbreviation' => 'getAbbreviation',
        'name' => 'getName',
        'length_in' => 'getLengthIn',
        'width_in' => 'getWidthIn',
        'height_in' => 'getHeightIn',
        'inner_length_in' => 'getInnerLengthIn',
        'inner_width_in' => 'getInnerWidthIn',
        'inner_height_in' => 'getInnerHeightIn',
        'weight_lbs' => 'getWeightLbs',
        'lob_id' => 'getLobId',
        'is_active' => 'getIsActive',
        'predefined_package_type_id' => 'getPredefinedPackageTypeId',
        'origin' => 'getOrigin',
        'type' => 'getType',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['abbreviation'] = isset($data['abbreviation']) ? $data['abbreviation'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['length_in'] = isset($data['length_in']) ? $data['length_in'] : null;
        $this->container['width_in'] = isset($data['width_in']) ? $data['width_in'] : null;
        $this->container['height_in'] = isset($data['height_in']) ? $data['height_in'] : null;
        $this->container['inner_length_in'] = isset($data['inner_length_in']) ? $data['inner_length_in'] : null;
        $this->container['inner_width_in'] = isset($data['inner_width_in']) ? $data['inner_width_in'] : null;
        $this->container['inner_height_in'] = isset($data['inner_height_in']) ? $data['inner_height_in'] : null;
        $this->container['weight_lbs'] = isset($data['weight_lbs']) ? $data['weight_lbs'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : false;
        $this->container['predefined_package_type_id'] = isset($data['predefined_package_type_id']) ? $data['predefined_package_type_id'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['abbreviation'] === null) {
            $invalidProperties[] = "'abbreviation' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['length_in'] === null) {
            $invalidProperties[] = "'length_in' can't be null";
        }
        if ($this->container['width_in'] === null) {
            $invalidProperties[] = "'width_in' can't be null";
        }
        if ($this->container['height_in'] === null) {
            $invalidProperties[] = "'height_in' can't be null";
        }
        if ($this->container['inner_length_in'] === null) {
            $invalidProperties[] = "'inner_length_in' can't be null";
        }
        if ($this->container['inner_width_in'] === null) {
            $invalidProperties[] = "'inner_width_in' can't be null";
        }
        if ($this->container['inner_height_in'] === null) {
            $invalidProperties[] = "'inner_height_in' can't be null";
        }
        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['abbreviation'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['length_in'] === null) {
            return false;
        }
        if ($this->container['width_in'] === null) {
            return false;
        }
        if ($this->container['height_in'] === null) {
            return false;
        }
        if ($this->container['inner_length_in'] === null) {
            return false;
        }
        if ($this->container['inner_width_in'] === null) {
            return false;
        }
        if ($this->container['inner_height_in'] === null) {
            return false;
        }
        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['is_active'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets abbreviation
     *
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string $abbreviation abbreviation
     *
     * @return $this
     */
    public function setAbbreviation($abbreviation)
    {
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets length_in
     *
     * @return float
     */
    public function getLengthIn()
    {
        return $this->container['length_in'];
    }

    /**
     * Sets length_in
     *
     * @param float $length_in length_in
     *
     * @return $this
     */
    public function setLengthIn($length_in)
    {
        $this->container['length_in'] = $length_in;

        return $this;
    }

    /**
     * Gets width_in
     *
     * @return float
     */
    public function getWidthIn()
    {
        return $this->container['width_in'];
    }

    /**
     * Sets width_in
     *
     * @param float $width_in width_in
     *
     * @return $this
     */
    public function setWidthIn($width_in)
    {
        $this->container['width_in'] = $width_in;

        return $this;
    }

    /**
     * Gets height_in
     *
     * @return float
     */
    public function getHeightIn()
    {
        return $this->container['height_in'];
    }

    /**
     * Sets height_in
     *
     * @param float $height_in height_in
     *
     * @return $this
     */
    public function setHeightIn($height_in)
    {
        $this->container['height_in'] = $height_in;

        return $this;
    }

    /**
     * Gets inner_length_in
     *
     * @return float
     */
    public function getInnerLengthIn()
    {
        return $this->container['inner_length_in'];
    }

    /**
     * Sets inner_length_in
     *
     * @param float $inner_length_in inner_length_in
     *
     * @return $this
     */
    public function setInnerLengthIn($inner_length_in)
    {
        $this->container['inner_length_in'] = $inner_length_in;

        return $this;
    }

    /**
     * Gets inner_width_in
     *
     * @return float
     */
    public function getInnerWidthIn()
    {
        return $this->container['inner_width_in'];
    }

    /**
     * Sets inner_width_in
     *
     * @param float $inner_width_in inner_width_in
     *
     * @return $this
     */
    public function setInnerWidthIn($inner_width_in)
    {
        $this->container['inner_width_in'] = $inner_width_in;

        return $this;
    }

    /**
     * Gets inner_height_in
     *
     * @return float
     */
    public function getInnerHeightIn()
    {
        return $this->container['inner_height_in'];
    }

    /**
     * Sets inner_height_in
     *
     * @param float $inner_height_in inner_height_in
     *
     * @return $this
     */
    public function setInnerHeightIn($inner_height_in)
    {
        $this->container['inner_height_in'] = $inner_height_in;

        return $this;
    }

    /**
     * Gets weight_lbs
     *
     * @return float
     */
    public function getWeightLbs()
    {
        return $this->container['weight_lbs'];
    }

    /**
     * Sets weight_lbs
     *
     * @param float $weight_lbs weight_lbs
     *
     * @return $this
     */
    public function setWeightLbs($weight_lbs)
    {
        $this->container['weight_lbs'] = $weight_lbs;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets predefined_package_type_id
     *
     * @return int
     */
    public function getPredefinedPackageTypeId()
    {
        return $this->container['predefined_package_type_id'];
    }

    /**
     * Sets predefined_package_type_id
     *
     * @param int $predefined_package_type_id predefined_package_type_id
     *
     * @return $this
     */
    public function setPredefinedPackageTypeId($predefined_package_type_id)
    {
        $this->container['predefined_package_type_id'] = $predefined_package_type_id;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


