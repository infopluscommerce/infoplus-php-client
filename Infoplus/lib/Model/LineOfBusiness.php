<?php
/**
 * LineOfBusiness
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * LineOfBusiness Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LineOfBusiness implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'lineOfBusiness';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'code' => 'string',
        'label' => 'string',
        'default_warehouse_service_type_id' => 'int',
        'default_sla_service_days' => 'int',
        'default_sla_cutoff_time' => 'string',
        'on_hold' => 'bool',
        'on_hold_reason' => 'string',
        'gs1_company_prefix' => 'string',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'code' => null,
        'label' => null,
        'default_warehouse_service_type_id' => 'int32',
        'default_sla_service_days' => 'int32',
        'default_sla_cutoff_time' => null,
        'on_hold' => null,
        'on_hold_reason' => null,
        'gs1_company_prefix' => null,
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'label' => 'label',
        'default_warehouse_service_type_id' => 'defaultWarehouseServiceTypeId',
        'default_sla_service_days' => 'defaultSLAServiceDays',
        'default_sla_cutoff_time' => 'defaultSLACutoffTime',
        'on_hold' => 'onHold',
        'on_hold_reason' => 'onHoldReason',
        'gs1_company_prefix' => 'gs1CompanyPrefix',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'label' => 'setLabel',
        'default_warehouse_service_type_id' => 'setDefaultWarehouseServiceTypeId',
        'default_sla_service_days' => 'setDefaultSlaServiceDays',
        'default_sla_cutoff_time' => 'setDefaultSlaCutoffTime',
        'on_hold' => 'setOnHold',
        'on_hold_reason' => 'setOnHoldReason',
        'gs1_company_prefix' => 'setGs1CompanyPrefix',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'label' => 'getLabel',
        'default_warehouse_service_type_id' => 'getDefaultWarehouseServiceTypeId',
        'default_sla_service_days' => 'getDefaultSlaServiceDays',
        'default_sla_cutoff_time' => 'getDefaultSlaCutoffTime',
        'on_hold' => 'getOnHold',
        'on_hold_reason' => 'getOnHoldReason',
        'gs1_company_prefix' => 'getGs1CompanyPrefix',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['default_warehouse_service_type_id'] = isset($data['default_warehouse_service_type_id']) ? $data['default_warehouse_service_type_id'] : null;
        $this->container['default_sla_service_days'] = isset($data['default_sla_service_days']) ? $data['default_sla_service_days'] : null;
        $this->container['default_sla_cutoff_time'] = isset($data['default_sla_cutoff_time']) ? $data['default_sla_cutoff_time'] : null;
        $this->container['on_hold'] = isset($data['on_hold']) ? $data['on_hold'] : false;
        $this->container['on_hold_reason'] = isset($data['on_hold_reason']) ? $data['on_hold_reason'] : null;
        $this->container['gs1_company_prefix'] = isset($data['gs1_company_prefix']) ? $data['gs1_company_prefix'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets default_warehouse_service_type_id
     *
     * @return int
     */
    public function getDefaultWarehouseServiceTypeId()
    {
        return $this->container['default_warehouse_service_type_id'];
    }

    /**
     * Sets default_warehouse_service_type_id
     *
     * @param int $default_warehouse_service_type_id default_warehouse_service_type_id
     *
     * @return $this
     */
    public function setDefaultWarehouseServiceTypeId($default_warehouse_service_type_id)
    {
        $this->container['default_warehouse_service_type_id'] = $default_warehouse_service_type_id;

        return $this;
    }

    /**
     * Gets default_sla_service_days
     *
     * @return int
     */
    public function getDefaultSlaServiceDays()
    {
        return $this->container['default_sla_service_days'];
    }

    /**
     * Sets default_sla_service_days
     *
     * @param int $default_sla_service_days default_sla_service_days
     *
     * @return $this
     */
    public function setDefaultSlaServiceDays($default_sla_service_days)
    {
        $this->container['default_sla_service_days'] = $default_sla_service_days;

        return $this;
    }

    /**
     * Gets default_sla_cutoff_time
     *
     * @return string
     */
    public function getDefaultSlaCutoffTime()
    {
        return $this->container['default_sla_cutoff_time'];
    }

    /**
     * Sets default_sla_cutoff_time
     *
     * @param string $default_sla_cutoff_time default_sla_cutoff_time
     *
     * @return $this
     */
    public function setDefaultSlaCutoffTime($default_sla_cutoff_time)
    {
        $this->container['default_sla_cutoff_time'] = $default_sla_cutoff_time;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return bool
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param bool $on_hold on_hold
     *
     * @return $this
     */
    public function setOnHold($on_hold)
    {
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets on_hold_reason
     *
     * @return string
     */
    public function getOnHoldReason()
    {
        return $this->container['on_hold_reason'];
    }

    /**
     * Sets on_hold_reason
     *
     * @param string $on_hold_reason on_hold_reason
     *
     * @return $this
     */
    public function setOnHoldReason($on_hold_reason)
    {
        $this->container['on_hold_reason'] = $on_hold_reason;

        return $this;
    }

    /**
     * Gets gs1_company_prefix
     *
     * @return string
     */
    public function getGs1CompanyPrefix()
    {
        return $this->container['gs1_company_prefix'];
    }

    /**
     * Sets gs1_company_prefix
     *
     * @param string $gs1_company_prefix gs1_company_prefix
     *
     * @return $this
     */
    public function setGs1CompanyPrefix($gs1_company_prefix)
    {
        $this->container['gs1_company_prefix'] = $gs1_company_prefix;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


