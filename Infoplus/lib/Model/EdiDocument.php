<?php
/**
 * EdiDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * EdiDocument Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdiDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ediDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'edi_connection_id' => 'int',
        'as2_partner_id' => 'int',
        'lob_id' => 'int',
        'transaction_type' => 'string',
        'direction' => 'string',
        'document_type_id' => 'int',
        'status' => 'string',
        'interchange_index' => 'int',
        'group_index' => 'int',
        'transaction_index' => 'int',
        'body' => 'string',
        'json_body' => 'string',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'edi_connection_id' => 'int32',
        'as2_partner_id' => 'int32',
        'lob_id' => 'int32',
        'transaction_type' => null,
        'direction' => null,
        'document_type_id' => 'int32',
        'status' => null,
        'interchange_index' => 'int32',
        'group_index' => 'int32',
        'transaction_index' => 'int32',
        'body' => null,
        'json_body' => null,
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'edi_connection_id' => 'ediConnectionId',
        'as2_partner_id' => 'as2PartnerId',
        'lob_id' => 'lobId',
        'transaction_type' => 'transactionType',
        'direction' => 'direction',
        'document_type_id' => 'documentTypeId',
        'status' => 'status',
        'interchange_index' => 'interchangeIndex',
        'group_index' => 'groupIndex',
        'transaction_index' => 'transactionIndex',
        'body' => 'body',
        'json_body' => 'jsonBody',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'edi_connection_id' => 'setEdiConnectionId',
        'as2_partner_id' => 'setAs2PartnerId',
        'lob_id' => 'setLobId',
        'transaction_type' => 'setTransactionType',
        'direction' => 'setDirection',
        'document_type_id' => 'setDocumentTypeId',
        'status' => 'setStatus',
        'interchange_index' => 'setInterchangeIndex',
        'group_index' => 'setGroupIndex',
        'transaction_index' => 'setTransactionIndex',
        'body' => 'setBody',
        'json_body' => 'setJsonBody',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'edi_connection_id' => 'getEdiConnectionId',
        'as2_partner_id' => 'getAs2PartnerId',
        'lob_id' => 'getLobId',
        'transaction_type' => 'getTransactionType',
        'direction' => 'getDirection',
        'document_type_id' => 'getDocumentTypeId',
        'status' => 'getStatus',
        'interchange_index' => 'getInterchangeIndex',
        'group_index' => 'getGroupIndex',
        'transaction_index' => 'getTransactionIndex',
        'body' => 'getBody',
        'json_body' => 'getJsonBody',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['edi_connection_id'] = isset($data['edi_connection_id']) ? $data['edi_connection_id'] : null;
        $this->container['as2_partner_id'] = isset($data['as2_partner_id']) ? $data['as2_partner_id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['document_type_id'] = isset($data['document_type_id']) ? $data['document_type_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['interchange_index'] = isset($data['interchange_index']) ? $data['interchange_index'] : null;
        $this->container['group_index'] = isset($data['group_index']) ? $data['group_index'] : null;
        $this->container['transaction_index'] = isset($data['transaction_index']) ? $data['transaction_index'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['json_body'] = isset($data['json_body']) ? $data['json_body'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['edi_connection_id'] === null) {
            $invalidProperties[] = "'edi_connection_id' can't be null";
        }
        if ($this->container['as2_partner_id'] === null) {
            $invalidProperties[] = "'as2_partner_id' can't be null";
        }
        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['document_type_id'] === null) {
            $invalidProperties[] = "'document_type_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['json_body'] === null) {
            $invalidProperties[] = "'json_body' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['edi_connection_id'] === null) {
            return false;
        }
        if ($this->container['as2_partner_id'] === null) {
            return false;
        }
        if ($this->container['transaction_type'] === null) {
            return false;
        }
        if ($this->container['direction'] === null) {
            return false;
        }
        if ($this->container['document_type_id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['body'] === null) {
            return false;
        }
        if ($this->container['json_body'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets edi_connection_id
     *
     * @return int
     */
    public function getEdiConnectionId()
    {
        return $this->container['edi_connection_id'];
    }

    /**
     * Sets edi_connection_id
     *
     * @param int $edi_connection_id edi_connection_id
     *
     * @return $this
     */
    public function setEdiConnectionId($edi_connection_id)
    {
        $this->container['edi_connection_id'] = $edi_connection_id;

        return $this;
    }

    /**
     * Gets as2_partner_id
     *
     * @return int
     */
    public function getAs2PartnerId()
    {
        return $this->container['as2_partner_id'];
    }

    /**
     * Sets as2_partner_id
     *
     * @param int $as2_partner_id as2_partner_id
     *
     * @return $this
     */
    public function setAs2PartnerId($as2_partner_id)
    {
        $this->container['as2_partner_id'] = $as2_partner_id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets document_type_id
     *
     * @return int
     */
    public function getDocumentTypeId()
    {
        return $this->container['document_type_id'];
    }

    /**
     * Sets document_type_id
     *
     * @param int $document_type_id document_type_id
     *
     * @return $this
     */
    public function setDocumentTypeId($document_type_id)
    {
        $this->container['document_type_id'] = $document_type_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets interchange_index
     *
     * @return int
     */
    public function getInterchangeIndex()
    {
        return $this->container['interchange_index'];
    }

    /**
     * Sets interchange_index
     *
     * @param int $interchange_index interchange_index
     *
     * @return $this
     */
    public function setInterchangeIndex($interchange_index)
    {
        $this->container['interchange_index'] = $interchange_index;

        return $this;
    }

    /**
     * Gets group_index
     *
     * @return int
     */
    public function getGroupIndex()
    {
        return $this->container['group_index'];
    }

    /**
     * Sets group_index
     *
     * @param int $group_index group_index
     *
     * @return $this
     */
    public function setGroupIndex($group_index)
    {
        $this->container['group_index'] = $group_index;

        return $this;
    }

    /**
     * Gets transaction_index
     *
     * @return int
     */
    public function getTransactionIndex()
    {
        return $this->container['transaction_index'];
    }

    /**
     * Sets transaction_index
     *
     * @param int $transaction_index transaction_index
     *
     * @return $this
     */
    public function setTransactionIndex($transaction_index)
    {
        $this->container['transaction_index'] = $transaction_index;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets json_body
     *
     * @return string
     */
    public function getJsonBody()
    {
        return $this->container['json_body'];
    }

    /**
     * Sets json_body
     *
     * @param string $json_body json_body
     *
     * @return $this
     */
    public function setJsonBody($json_body)
    {
        $this->container['json_body'] = $json_body;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


