<?php
/**
 * OrderLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * OrderLineItem Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quantity' => 'int',
        'price' => 'float',
        'discount' => 'float',
        'sub_total' => 'float',
        'original_price' => 'float',
        'id' => 'int',
        'sku' => 'string',
        'description' => 'string',
        'major_group' => 'string',
        'sub_group' => 'string',
        'available' => 'int',
        'on_hand' => 'int',
        'on_order' => 'int',
        'discount_type' => 'string',
        'discount_percent' => 'float',
        'custom_price' => 'float',
        'discounted_price' => 'float',
        'alternate_sku' => 'string',
        'is_gift_card' => 'bool',
        'gift_card_amount' => 'float',
        'gift_card_to' => 'string',
        'gift_card_email' => 'string',
        'gift_card_message' => 'string',
        'account' => 'string',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quantity' => 'int32',
        'price' => null,
        'discount' => null,
        'sub_total' => null,
        'original_price' => null,
        'id' => 'int32',
        'sku' => null,
        'description' => null,
        'major_group' => null,
        'sub_group' => null,
        'available' => 'int32',
        'on_hand' => 'int32',
        'on_order' => 'int32',
        'discount_type' => null,
        'discount_percent' => null,
        'custom_price' => null,
        'discounted_price' => null,
        'alternate_sku' => null,
        'is_gift_card' => null,
        'gift_card_amount' => null,
        'gift_card_to' => null,
        'gift_card_email' => null,
        'gift_card_message' => null,
        'account' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantity' => 'quantity',
        'price' => 'price',
        'discount' => 'discount',
        'sub_total' => 'subTotal',
        'original_price' => 'originalPrice',
        'id' => 'id',
        'sku' => 'sku',
        'description' => 'description',
        'major_group' => 'majorGroup',
        'sub_group' => 'subGroup',
        'available' => 'available',
        'on_hand' => 'onHand',
        'on_order' => 'onOrder',
        'discount_type' => 'discountType',
        'discount_percent' => 'discountPercent',
        'custom_price' => 'customPrice',
        'discounted_price' => 'discountedPrice',
        'alternate_sku' => 'alternateSKU',
        'is_gift_card' => 'isGiftCard',
        'gift_card_amount' => 'giftCardAmount',
        'gift_card_to' => 'giftCardTo',
        'gift_card_email' => 'giftCardEmail',
        'gift_card_message' => 'giftCardMessage',
        'account' => 'account',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'discount' => 'setDiscount',
        'sub_total' => 'setSubTotal',
        'original_price' => 'setOriginalPrice',
        'id' => 'setId',
        'sku' => 'setSku',
        'description' => 'setDescription',
        'major_group' => 'setMajorGroup',
        'sub_group' => 'setSubGroup',
        'available' => 'setAvailable',
        'on_hand' => 'setOnHand',
        'on_order' => 'setOnOrder',
        'discount_type' => 'setDiscountType',
        'discount_percent' => 'setDiscountPercent',
        'custom_price' => 'setCustomPrice',
        'discounted_price' => 'setDiscountedPrice',
        'alternate_sku' => 'setAlternateSku',
        'is_gift_card' => 'setIsGiftCard',
        'gift_card_amount' => 'setGiftCardAmount',
        'gift_card_to' => 'setGiftCardTo',
        'gift_card_email' => 'setGiftCardEmail',
        'gift_card_message' => 'setGiftCardMessage',
        'account' => 'setAccount',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'discount' => 'getDiscount',
        'sub_total' => 'getSubTotal',
        'original_price' => 'getOriginalPrice',
        'id' => 'getId',
        'sku' => 'getSku',
        'description' => 'getDescription',
        'major_group' => 'getMajorGroup',
        'sub_group' => 'getSubGroup',
        'available' => 'getAvailable',
        'on_hand' => 'getOnHand',
        'on_order' => 'getOnOrder',
        'discount_type' => 'getDiscountType',
        'discount_percent' => 'getDiscountPercent',
        'custom_price' => 'getCustomPrice',
        'discounted_price' => 'getDiscountedPrice',
        'alternate_sku' => 'getAlternateSku',
        'is_gift_card' => 'getIsGiftCard',
        'gift_card_amount' => 'getGiftCardAmount',
        'gift_card_to' => 'getGiftCardTo',
        'gift_card_email' => 'getGiftCardEmail',
        'gift_card_message' => 'getGiftCardMessage',
        'account' => 'getAccount',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['original_price'] = isset($data['original_price']) ? $data['original_price'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['major_group'] = isset($data['major_group']) ? $data['major_group'] : null;
        $this->container['sub_group'] = isset($data['sub_group']) ? $data['sub_group'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['on_order'] = isset($data['on_order']) ? $data['on_order'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['custom_price'] = isset($data['custom_price']) ? $data['custom_price'] : null;
        $this->container['discounted_price'] = isset($data['discounted_price']) ? $data['discounted_price'] : null;
        $this->container['alternate_sku'] = isset($data['alternate_sku']) ? $data['alternate_sku'] : null;
        $this->container['is_gift_card'] = isset($data['is_gift_card']) ? $data['is_gift_card'] : false;
        $this->container['gift_card_amount'] = isset($data['gift_card_amount']) ? $data['gift_card_amount'] : null;
        $this->container['gift_card_to'] = isset($data['gift_card_to']) ? $data['gift_card_to'] : null;
        $this->container['gift_card_email'] = isset($data['gift_card_email']) ? $data['gift_card_email'] : null;
        $this->container['gift_card_message'] = isset($data['gift_card_message']) ? $data['gift_card_message'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['gift_card_amount'] === null) {
            $invalidProperties[] = "'gift_card_amount' can't be null";
        }
        if ($this->container['gift_card_to'] === null) {
            $invalidProperties[] = "'gift_card_to' can't be null";
        }
        if ($this->container['gift_card_email'] === null) {
            $invalidProperties[] = "'gift_card_email' can't be null";
        }
        if ($this->container['gift_card_message'] === null) {
            $invalidProperties[] = "'gift_card_message' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['quantity'] === null) {
            return false;
        }
        if ($this->container['gift_card_amount'] === null) {
            return false;
        }
        if ($this->container['gift_card_to'] === null) {
            return false;
        }
        if ($this->container['gift_card_email'] === null) {
            return false;
        }
        if ($this->container['gift_card_message'] === null) {
            return false;
        }
        if ($this->container['account'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float $sub_total sub_total
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets original_price
     *
     * @return float
     */
    public function getOriginalPrice()
    {
        return $this->container['original_price'];
    }

    /**
     * Sets original_price
     *
     * @param float $original_price original_price
     *
     * @return $this
     */
    public function setOriginalPrice($original_price)
    {
        $this->container['original_price'] = $original_price;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets major_group
     *
     * @return string
     */
    public function getMajorGroup()
    {
        return $this->container['major_group'];
    }

    /**
     * Sets major_group
     *
     * @param string $major_group major_group
     *
     * @return $this
     */
    public function setMajorGroup($major_group)
    {
        $this->container['major_group'] = $major_group;

        return $this;
    }

    /**
     * Gets sub_group
     *
     * @return string
     */
    public function getSubGroup()
    {
        return $this->container['sub_group'];
    }

    /**
     * Sets sub_group
     *
     * @param string $sub_group sub_group
     *
     * @return $this
     */
    public function setSubGroup($sub_group)
    {
        $this->container['sub_group'] = $sub_group;

        return $this;
    }

    /**
     * Gets available
     *
     * @return int
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param int $available available
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return int
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param int $on_hand on_hand
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets on_order
     *
     * @return int
     */
    public function getOnOrder()
    {
        return $this->container['on_order'];
    }

    /**
     * Sets on_order
     *
     * @param int $on_order on_order
     *
     * @return $this
     */
    public function setOnOrder($on_order)
    {
        $this->container['on_order'] = $on_order;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string $discount_type discount_type
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return float
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float $discount_percent discount_percent
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets custom_price
     *
     * @return float
     */
    public function getCustomPrice()
    {
        return $this->container['custom_price'];
    }

    /**
     * Sets custom_price
     *
     * @param float $custom_price custom_price
     *
     * @return $this
     */
    public function setCustomPrice($custom_price)
    {
        $this->container['custom_price'] = $custom_price;

        return $this;
    }

    /**
     * Gets discounted_price
     *
     * @return float
     */
    public function getDiscountedPrice()
    {
        return $this->container['discounted_price'];
    }

    /**
     * Sets discounted_price
     *
     * @param float $discounted_price discounted_price
     *
     * @return $this
     */
    public function setDiscountedPrice($discounted_price)
    {
        $this->container['discounted_price'] = $discounted_price;

        return $this;
    }

    /**
     * Gets alternate_sku
     *
     * @return string
     */
    public function getAlternateSku()
    {
        return $this->container['alternate_sku'];
    }

    /**
     * Sets alternate_sku
     *
     * @param string $alternate_sku alternate_sku
     *
     * @return $this
     */
    public function setAlternateSku($alternate_sku)
    {
        $this->container['alternate_sku'] = $alternate_sku;

        return $this;
    }

    /**
     * Gets is_gift_card
     *
     * @return bool
     */
    public function getIsGiftCard()
    {
        return $this->container['is_gift_card'];
    }

    /**
     * Sets is_gift_card
     *
     * @param bool $is_gift_card is_gift_card
     *
     * @return $this
     */
    public function setIsGiftCard($is_gift_card)
    {
        $this->container['is_gift_card'] = $is_gift_card;

        return $this;
    }

    /**
     * Gets gift_card_amount
     *
     * @return float
     */
    public function getGiftCardAmount()
    {
        return $this->container['gift_card_amount'];
    }

    /**
     * Sets gift_card_amount
     *
     * @param float $gift_card_amount gift_card_amount
     *
     * @return $this
     */
    public function setGiftCardAmount($gift_card_amount)
    {
        $this->container['gift_card_amount'] = $gift_card_amount;

        return $this;
    }

    /**
     * Gets gift_card_to
     *
     * @return string
     */
    public function getGiftCardTo()
    {
        return $this->container['gift_card_to'];
    }

    /**
     * Sets gift_card_to
     *
     * @param string $gift_card_to gift_card_to
     *
     * @return $this
     */
    public function setGiftCardTo($gift_card_to)
    {
        $this->container['gift_card_to'] = $gift_card_to;

        return $this;
    }

    /**
     * Gets gift_card_email
     *
     * @return string
     */
    public function getGiftCardEmail()
    {
        return $this->container['gift_card_email'];
    }

    /**
     * Sets gift_card_email
     *
     * @param string $gift_card_email gift_card_email
     *
     * @return $this
     */
    public function setGiftCardEmail($gift_card_email)
    {
        $this->container['gift_card_email'] = $gift_card_email;

        return $this;
    }

    /**
     * Gets gift_card_message
     *
     * @return string
     */
    public function getGiftCardMessage()
    {
        return $this->container['gift_card_message'];
    }

    /**
     * Sets gift_card_message
     *
     * @param string $gift_card_message gift_card_message
     *
     * @return $this
     */
    public function setGiftCardMessage($gift_card_message)
    {
        $this->container['gift_card_message'] = $gift_card_message;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


