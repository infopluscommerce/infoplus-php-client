<?php
/**
 * CartonContent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * CartonContent Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CartonContent implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'group_order_id' => 'Number',
        'order_no' => 'Number',
        'carton_no_id' => 'int',
        'line_item_id' => 'int',
        'location' => 'string',
        'quantity' => 'int',
        'quantity_scanned' => 'int',
        'completed' => '\DateTime',
        'tote_id' => 'string',
        'picker_id' => 'string',
        'status' => 'string',
        'custom_fields' => 'map[string,object]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'group_order_id' => 'groupOrderId',
        'order_no' => 'orderNo',
        'carton_no_id' => 'cartonNoId',
        'line_item_id' => 'lineItemId',
        'location' => 'location',
        'quantity' => 'quantity',
        'quantity_scanned' => 'quantityScanned',
        'completed' => 'completed',
        'tote_id' => 'toteId',
        'picker_id' => 'pickerId',
        'status' => 'status',
        'custom_fields' => 'customFields'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'group_order_id' => 'setGroupOrderId',
        'order_no' => 'setOrderNo',
        'carton_no_id' => 'setCartonNoId',
        'line_item_id' => 'setLineItemId',
        'location' => 'setLocation',
        'quantity' => 'setQuantity',
        'quantity_scanned' => 'setQuantityScanned',
        'completed' => 'setCompleted',
        'tote_id' => 'setToteId',
        'picker_id' => 'setPickerId',
        'status' => 'setStatus',
        'custom_fields' => 'setCustomFields'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'group_order_id' => 'getGroupOrderId',
        'order_no' => 'getOrderNo',
        'carton_no_id' => 'getCartonNoId',
        'line_item_id' => 'getLineItemId',
        'location' => 'getLocation',
        'quantity' => 'getQuantity',
        'quantity_scanned' => 'getQuantityScanned',
        'completed' => 'getCompleted',
        'tote_id' => 'getToteId',
        'picker_id' => 'getPickerId',
        'status' => 'getStatus',
        'custom_fields' => 'getCustomFields'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $group_order_id 
      * @var Number
      */
    protected $group_order_id;
    
    /**
      * $order_no 
      * @var Number
      */
    protected $order_no;
    
    /**
      * $carton_no_id 
      * @var int
      */
    protected $carton_no_id;
    
    /**
      * $line_item_id 
      * @var int
      */
    protected $line_item_id;
    
    /**
      * $location 
      * @var string
      */
    protected $location;
    
    /**
      * $quantity 
      * @var int
      */
    protected $quantity;
    
    /**
      * $quantity_scanned 
      * @var int
      */
    protected $quantity_scanned;
    
    /**
      * $completed 
      * @var \DateTime
      */
    protected $completed;
    
    /**
      * $tote_id 
      * @var string
      */
    protected $tote_id;
    
    /**
      * $picker_id 
      * @var string
      */
    protected $picker_id;
    
    /**
      * $status 
      * @var string
      */
    protected $status;
    
    /**
      * $custom_fields 
      * @var map[string,object]
      */
    protected $custom_fields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->group_order_id = $data["group_order_id"];
            $this->order_no = $data["order_no"];
            $this->carton_no_id = $data["carton_no_id"];
            $this->line_item_id = $data["line_item_id"];
            $this->location = $data["location"];
            $this->quantity = $data["quantity"];
            $this->quantity_scanned = $data["quantity_scanned"];
            $this->completed = $data["completed"];
            $this->tote_id = $data["tote_id"];
            $this->picker_id = $data["picker_id"];
            $this->status = $data["status"];
            $this->custom_fields = $data["custom_fields"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets group_order_id
     * @return Number
     */
    public function getGroupOrderId()
    {
        return $this->group_order_id;
    }
  
    /**
     * Sets group_order_id
     * @param Number $group_order_id 
     * @return $this
     */
    public function setGroupOrderId($group_order_id)
    {
        
        $this->group_order_id = $group_order_id;
        return $this;
    }
    
    /**
     * Gets order_no
     * @return Number
     */
    public function getOrderNo()
    {
        return $this->order_no;
    }
  
    /**
     * Sets order_no
     * @param Number $order_no 
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        
        $this->order_no = $order_no;
        return $this;
    }
    
    /**
     * Gets carton_no_id
     * @return int
     */
    public function getCartonNoId()
    {
        return $this->carton_no_id;
    }
  
    /**
     * Sets carton_no_id
     * @param int $carton_no_id 
     * @return $this
     */
    public function setCartonNoId($carton_no_id)
    {
        
        $this->carton_no_id = $carton_no_id;
        return $this;
    }
    
    /**
     * Gets line_item_id
     * @return int
     */
    public function getLineItemId()
    {
        return $this->line_item_id;
    }
  
    /**
     * Sets line_item_id
     * @param int $line_item_id 
     * @return $this
     */
    public function setLineItemId($line_item_id)
    {
        
        $this->line_item_id = $line_item_id;
        return $this;
    }
    
    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->location;
    }
  
    /**
     * Sets location
     * @param string $location 
     * @return $this
     */
    public function setLocation($location)
    {
        
        $this->location = $location;
        return $this;
    }
    
    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->quantity;
    }
  
    /**
     * Sets quantity
     * @param int $quantity 
     * @return $this
     */
    public function setQuantity($quantity)
    {
        
        $this->quantity = $quantity;
        return $this;
    }
    
    /**
     * Gets quantity_scanned
     * @return int
     */
    public function getQuantityScanned()
    {
        return $this->quantity_scanned;
    }
  
    /**
     * Sets quantity_scanned
     * @param int $quantity_scanned 
     * @return $this
     */
    public function setQuantityScanned($quantity_scanned)
    {
        
        $this->quantity_scanned = $quantity_scanned;
        return $this;
    }
    
    /**
     * Gets completed
     * @return \DateTime
     */
    public function getCompleted()
    {
        return $this->completed;
    }
  
    /**
     * Sets completed
     * @param \DateTime $completed 
     * @return $this
     */
    public function setCompleted($completed)
    {
        
        $this->completed = $completed;
        return $this;
    }
    
    /**
     * Gets tote_id
     * @return string
     */
    public function getToteId()
    {
        return $this->tote_id;
    }
  
    /**
     * Sets tote_id
     * @param string $tote_id 
     * @return $this
     */
    public function setToteId($tote_id)
    {
        
        $this->tote_id = $tote_id;
        return $this;
    }
    
    /**
     * Gets picker_id
     * @return string
     */
    public function getPickerId()
    {
        return $this->picker_id;
    }
  
    /**
     * Sets picker_id
     * @param string $picker_id 
     * @return $this
     */
    public function setPickerId($picker_id)
    {
        
        $this->picker_id = $picker_id;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param map[string,object] $custom_fields 
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
