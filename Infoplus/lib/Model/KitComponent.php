<?php
/**
 * KitComponent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * KitComponent Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class KitComponent implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'sku' => 'string',
        'quantity' => 'int',
        'instructions' => 'string',
        'additional_services' => 'string',
        'critical' => 'string',
        'custom_fields' => 'map[string,object]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'sku' => 'sku',
        'quantity' => 'quantity',
        'instructions' => 'instructions',
        'additional_services' => 'additionalServices',
        'critical' => 'critical',
        'custom_fields' => 'customFields'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'sku' => 'setSku',
        'quantity' => 'setQuantity',
        'instructions' => 'setInstructions',
        'additional_services' => 'setAdditionalServices',
        'critical' => 'setCritical',
        'custom_fields' => 'setCustomFields'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'sku' => 'getSku',
        'quantity' => 'getQuantity',
        'instructions' => 'getInstructions',
        'additional_services' => 'getAdditionalServices',
        'critical' => 'getCritical',
        'custom_fields' => 'getCustomFields'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $sku 
      * @var string
      */
    protected $sku;
    
    /**
      * $quantity 
      * @var int
      */
    protected $quantity;
    
    /**
      * $instructions 
      * @var string
      */
    protected $instructions;
    
    /**
      * $additional_services 
      * @var string
      */
    protected $additional_services;
    
    /**
      * $critical 
      * @var string
      */
    protected $critical;
    
    /**
      * $custom_fields 
      * @var map[string,object]
      */
    protected $custom_fields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->sku = $data["sku"];
            $this->quantity = $data["quantity"];
            $this->instructions = $data["instructions"];
            $this->additional_services = $data["additional_services"];
            $this->critical = $data["critical"];
            $this->custom_fields = $data["custom_fields"];
        }
    }
    
    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->sku;
    }
  
    /**
     * Sets sku
     * @param string $sku 
     * @return $this
     */
    public function setSku($sku)
    {
        
        $this->sku = $sku;
        return $this;
    }
    
    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->quantity;
    }
  
    /**
     * Sets quantity
     * @param int $quantity 
     * @return $this
     */
    public function setQuantity($quantity)
    {
        
        $this->quantity = $quantity;
        return $this;
    }
    
    /**
     * Gets instructions
     * @return string
     */
    public function getInstructions()
    {
        return $this->instructions;
    }
  
    /**
     * Sets instructions
     * @param string $instructions 
     * @return $this
     */
    public function setInstructions($instructions)
    {
        
        $this->instructions = $instructions;
        return $this;
    }
    
    /**
     * Gets additional_services
     * @return string
     */
    public function getAdditionalServices()
    {
        return $this->additional_services;
    }
  
    /**
     * Sets additional_services
     * @param string $additional_services 
     * @return $this
     */
    public function setAdditionalServices($additional_services)
    {
        
        $this->additional_services = $additional_services;
        return $this;
    }
    
    /**
     * Gets critical
     * @return string
     */
    public function getCritical()
    {
        return $this->critical;
    }
  
    /**
     * Sets critical
     * @param string $critical 
     * @return $this
     */
    public function setCritical($critical)
    {
        
        $this->critical = $critical;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param map[string,object] $custom_fields 
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
