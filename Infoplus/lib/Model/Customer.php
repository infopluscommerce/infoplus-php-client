<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'lob_id' => 'int',
        'customer_no' => 'string',
        'name' => 'string',
        'attention' => 'string',
        'street' => 'string',
        'street2' => 'string',
        'street3_province' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip_code' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'email' => 'string',
        'boss_branch' => 'string',
        'package_carrier_id' => 'int',
        'truck_carrier_id' => 'int',
        'weight_break' => 'int',
        'sector' => 'string',
        'division' => 'int',
        'cost_center' => 'string',
        'county' => 'string',
        'area' => 'string',
        'customer_type' => 'string',
        'mass_level' => 'string',
        'mass_factor' => 'float',
        'price_level' => 'string',
        'open_date' => '\DateTime',
        'close_date' => '\DateTime',
        'restriction_percent' => 'int',
        'external_id' => 'string',
        'cycle_date' => '\DateTime',
        'manager' => 'string',
        'alternate_inventory' => 'int',
        'pin' => 'string',
        'fax_gone' => 'string',
        'residential' => 'string',
        'csr_branch' => 'string',
        'extrinsic_text1' => 'string',
        'extrinsic_text2' => 'string',
        'extrinsic_text3' => 'string',
        'extrinsic_number1' => 'int',
        'extrinsic_number2' => 'int',
        'extrinsic_decimal1' => 'float',
        'extrinsic_decimal2' => 'float',
        'modify_date' => '\DateTime',
        'oms_customer_id' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'lob_id' => 'int32',
        'customer_no' => null,
        'name' => null,
        'attention' => null,
        'street' => null,
        'street2' => null,
        'street3_province' => null,
        'city' => null,
        'state' => null,
        'zip_code' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'email' => null,
        'boss_branch' => null,
        'package_carrier_id' => 'int32',
        'truck_carrier_id' => 'int32',
        'weight_break' => 'int32',
        'sector' => null,
        'division' => 'int32',
        'cost_center' => null,
        'county' => null,
        'area' => null,
        'customer_type' => null,
        'mass_level' => null,
        'mass_factor' => null,
        'price_level' => null,
        'open_date' => 'date-time',
        'close_date' => 'date-time',
        'restriction_percent' => 'int32',
        'external_id' => null,
        'cycle_date' => 'date-time',
        'manager' => null,
        'alternate_inventory' => 'int32',
        'pin' => null,
        'fax_gone' => null,
        'residential' => null,
        'csr_branch' => null,
        'extrinsic_text1' => null,
        'extrinsic_text2' => null,
        'extrinsic_text3' => null,
        'extrinsic_number1' => 'int32',
        'extrinsic_number2' => 'int32',
        'extrinsic_decimal1' => null,
        'extrinsic_decimal2' => null,
        'modify_date' => 'date-time',
        'oms_customer_id' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'lob_id' => 'lobId',
        'customer_no' => 'customerNo',
        'name' => 'name',
        'attention' => 'attention',
        'street' => 'street',
        'street2' => 'street2',
        'street3_province' => 'street3Province',
        'city' => 'city',
        'state' => 'state',
        'zip_code' => 'zipCode',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'email' => 'email',
        'boss_branch' => 'bossBranch',
        'package_carrier_id' => 'packageCarrierId',
        'truck_carrier_id' => 'truckCarrierId',
        'weight_break' => 'weightBreak',
        'sector' => 'sector',
        'division' => 'division',
        'cost_center' => 'costCenter',
        'county' => 'county',
        'area' => 'area',
        'customer_type' => 'customerType',
        'mass_level' => 'massLevel',
        'mass_factor' => 'massFactor',
        'price_level' => 'priceLevel',
        'open_date' => 'openDate',
        'close_date' => 'closeDate',
        'restriction_percent' => 'restrictionPercent',
        'external_id' => 'externalId',
        'cycle_date' => 'cycleDate',
        'manager' => 'manager',
        'alternate_inventory' => 'alternateInventory',
        'pin' => 'pin',
        'fax_gone' => 'faxGone',
        'residential' => 'residential',
        'csr_branch' => 'csrBranch',
        'extrinsic_text1' => 'extrinsicText1',
        'extrinsic_text2' => 'extrinsicText2',
        'extrinsic_text3' => 'extrinsicText3',
        'extrinsic_number1' => 'extrinsicNumber1',
        'extrinsic_number2' => 'extrinsicNumber2',
        'extrinsic_decimal1' => 'extrinsicDecimal1',
        'extrinsic_decimal2' => 'extrinsicDecimal2',
        'modify_date' => 'modifyDate',
        'oms_customer_id' => 'omsCustomerId',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'lob_id' => 'setLobId',
        'customer_no' => 'setCustomerNo',
        'name' => 'setName',
        'attention' => 'setAttention',
        'street' => 'setStreet',
        'street2' => 'setStreet2',
        'street3_province' => 'setStreet3Province',
        'city' => 'setCity',
        'state' => 'setState',
        'zip_code' => 'setZipCode',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'email' => 'setEmail',
        'boss_branch' => 'setBossBranch',
        'package_carrier_id' => 'setPackageCarrierId',
        'truck_carrier_id' => 'setTruckCarrierId',
        'weight_break' => 'setWeightBreak',
        'sector' => 'setSector',
        'division' => 'setDivision',
        'cost_center' => 'setCostCenter',
        'county' => 'setCounty',
        'area' => 'setArea',
        'customer_type' => 'setCustomerType',
        'mass_level' => 'setMassLevel',
        'mass_factor' => 'setMassFactor',
        'price_level' => 'setPriceLevel',
        'open_date' => 'setOpenDate',
        'close_date' => 'setCloseDate',
        'restriction_percent' => 'setRestrictionPercent',
        'external_id' => 'setExternalId',
        'cycle_date' => 'setCycleDate',
        'manager' => 'setManager',
        'alternate_inventory' => 'setAlternateInventory',
        'pin' => 'setPin',
        'fax_gone' => 'setFaxGone',
        'residential' => 'setResidential',
        'csr_branch' => 'setCsrBranch',
        'extrinsic_text1' => 'setExtrinsicText1',
        'extrinsic_text2' => 'setExtrinsicText2',
        'extrinsic_text3' => 'setExtrinsicText3',
        'extrinsic_number1' => 'setExtrinsicNumber1',
        'extrinsic_number2' => 'setExtrinsicNumber2',
        'extrinsic_decimal1' => 'setExtrinsicDecimal1',
        'extrinsic_decimal2' => 'setExtrinsicDecimal2',
        'modify_date' => 'setModifyDate',
        'oms_customer_id' => 'setOmsCustomerId',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'lob_id' => 'getLobId',
        'customer_no' => 'getCustomerNo',
        'name' => 'getName',
        'attention' => 'getAttention',
        'street' => 'getStreet',
        'street2' => 'getStreet2',
        'street3_province' => 'getStreet3Province',
        'city' => 'getCity',
        'state' => 'getState',
        'zip_code' => 'getZipCode',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'email' => 'getEmail',
        'boss_branch' => 'getBossBranch',
        'package_carrier_id' => 'getPackageCarrierId',
        'truck_carrier_id' => 'getTruckCarrierId',
        'weight_break' => 'getWeightBreak',
        'sector' => 'getSector',
        'division' => 'getDivision',
        'cost_center' => 'getCostCenter',
        'county' => 'getCounty',
        'area' => 'getArea',
        'customer_type' => 'getCustomerType',
        'mass_level' => 'getMassLevel',
        'mass_factor' => 'getMassFactor',
        'price_level' => 'getPriceLevel',
        'open_date' => 'getOpenDate',
        'close_date' => 'getCloseDate',
        'restriction_percent' => 'getRestrictionPercent',
        'external_id' => 'getExternalId',
        'cycle_date' => 'getCycleDate',
        'manager' => 'getManager',
        'alternate_inventory' => 'getAlternateInventory',
        'pin' => 'getPin',
        'fax_gone' => 'getFaxGone',
        'residential' => 'getResidential',
        'csr_branch' => 'getCsrBranch',
        'extrinsic_text1' => 'getExtrinsicText1',
        'extrinsic_text2' => 'getExtrinsicText2',
        'extrinsic_text3' => 'getExtrinsicText3',
        'extrinsic_number1' => 'getExtrinsicNumber1',
        'extrinsic_number2' => 'getExtrinsicNumber2',
        'extrinsic_decimal1' => 'getExtrinsicDecimal1',
        'extrinsic_decimal2' => 'getExtrinsicDecimal2',
        'modify_date' => 'getModifyDate',
        'oms_customer_id' => 'getOmsCustomerId',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['customer_no'] = isset($data['customer_no']) ? $data['customer_no'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['attention'] = isset($data['attention']) ? $data['attention'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['street2'] = isset($data['street2']) ? $data['street2'] : null;
        $this->container['street3_province'] = isset($data['street3_province']) ? $data['street3_province'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['boss_branch'] = isset($data['boss_branch']) ? $data['boss_branch'] : null;
        $this->container['package_carrier_id'] = isset($data['package_carrier_id']) ? $data['package_carrier_id'] : null;
        $this->container['truck_carrier_id'] = isset($data['truck_carrier_id']) ? $data['truck_carrier_id'] : null;
        $this->container['weight_break'] = isset($data['weight_break']) ? $data['weight_break'] : null;
        $this->container['sector'] = isset($data['sector']) ? $data['sector'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['cost_center'] = isset($data['cost_center']) ? $data['cost_center'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['area'] = isset($data['area']) ? $data['area'] : null;
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['mass_level'] = isset($data['mass_level']) ? $data['mass_level'] : null;
        $this->container['mass_factor'] = isset($data['mass_factor']) ? $data['mass_factor'] : null;
        $this->container['price_level'] = isset($data['price_level']) ? $data['price_level'] : null;
        $this->container['open_date'] = isset($data['open_date']) ? $data['open_date'] : null;
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['restriction_percent'] = isset($data['restriction_percent']) ? $data['restriction_percent'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['cycle_date'] = isset($data['cycle_date']) ? $data['cycle_date'] : null;
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['alternate_inventory'] = isset($data['alternate_inventory']) ? $data['alternate_inventory'] : null;
        $this->container['pin'] = isset($data['pin']) ? $data['pin'] : null;
        $this->container['fax_gone'] = isset($data['fax_gone']) ? $data['fax_gone'] : null;
        $this->container['residential'] = isset($data['residential']) ? $data['residential'] : null;
        $this->container['csr_branch'] = isset($data['csr_branch']) ? $data['csr_branch'] : null;
        $this->container['extrinsic_text1'] = isset($data['extrinsic_text1']) ? $data['extrinsic_text1'] : null;
        $this->container['extrinsic_text2'] = isset($data['extrinsic_text2']) ? $data['extrinsic_text2'] : null;
        $this->container['extrinsic_text3'] = isset($data['extrinsic_text3']) ? $data['extrinsic_text3'] : null;
        $this->container['extrinsic_number1'] = isset($data['extrinsic_number1']) ? $data['extrinsic_number1'] : null;
        $this->container['extrinsic_number2'] = isset($data['extrinsic_number2']) ? $data['extrinsic_number2'] : null;
        $this->container['extrinsic_decimal1'] = isset($data['extrinsic_decimal1']) ? $data['extrinsic_decimal1'] : null;
        $this->container['extrinsic_decimal2'] = isset($data['extrinsic_decimal2']) ? $data['extrinsic_decimal2'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['oms_customer_id'] = isset($data['oms_customer_id']) ? $data['oms_customer_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['customer_no'] === null) {
            $invalidProperties[] = "'customer_no' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['zip_code'] === null) {
            $invalidProperties[] = "'zip_code' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['package_carrier_id'] === null) {
            $invalidProperties[] = "'package_carrier_id' can't be null";
        }
        if ($this->container['truck_carrier_id'] === null) {
            $invalidProperties[] = "'truck_carrier_id' can't be null";
        }
        if ($this->container['weight_break'] === null) {
            $invalidProperties[] = "'weight_break' can't be null";
        }
        if ($this->container['residential'] === null) {
            $invalidProperties[] = "'residential' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['customer_no'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['street'] === null) {
            return false;
        }
        if ($this->container['city'] === null) {
            return false;
        }
        if ($this->container['zip_code'] === null) {
            return false;
        }
        if ($this->container['country'] === null) {
            return false;
        }
        if ($this->container['package_carrier_id'] === null) {
            return false;
        }
        if ($this->container['truck_carrier_id'] === null) {
            return false;
        }
        if ($this->container['weight_break'] === null) {
            return false;
        }
        if ($this->container['residential'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets customer_no
     *
     * @return string
     */
    public function getCustomerNo()
    {
        return $this->container['customer_no'];
    }

    /**
     * Sets customer_no
     *
     * @param string $customer_no customer_no
     *
     * @return $this
     */
    public function setCustomerNo($customer_no)
    {
        $this->container['customer_no'] = $customer_no;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attention
     *
     * @return string
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     *
     * @param string $attention attention
     *
     * @return $this
     */
    public function setAttention($attention)
    {
        $this->container['attention'] = $attention;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string $street2 street2
     *
     * @return $this
     */
    public function setStreet2($street2)
    {
        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets street3_province
     *
     * @return string
     */
    public function getStreet3Province()
    {
        return $this->container['street3_province'];
    }

    /**
     * Sets street3_province
     *
     * @param string $street3_province street3_province
     *
     * @return $this
     */
    public function setStreet3Province($street3_province)
    {
        $this->container['street3_province'] = $street3_province;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets boss_branch
     *
     * @return string
     */
    public function getBossBranch()
    {
        return $this->container['boss_branch'];
    }

    /**
     * Sets boss_branch
     *
     * @param string $boss_branch boss_branch
     *
     * @return $this
     */
    public function setBossBranch($boss_branch)
    {
        $this->container['boss_branch'] = $boss_branch;

        return $this;
    }

    /**
     * Gets package_carrier_id
     *
     * @return int
     */
    public function getPackageCarrierId()
    {
        return $this->container['package_carrier_id'];
    }

    /**
     * Sets package_carrier_id
     *
     * @param int $package_carrier_id package_carrier_id
     *
     * @return $this
     */
    public function setPackageCarrierId($package_carrier_id)
    {
        $this->container['package_carrier_id'] = $package_carrier_id;

        return $this;
    }

    /**
     * Gets truck_carrier_id
     *
     * @return int
     */
    public function getTruckCarrierId()
    {
        return $this->container['truck_carrier_id'];
    }

    /**
     * Sets truck_carrier_id
     *
     * @param int $truck_carrier_id truck_carrier_id
     *
     * @return $this
     */
    public function setTruckCarrierId($truck_carrier_id)
    {
        $this->container['truck_carrier_id'] = $truck_carrier_id;

        return $this;
    }

    /**
     * Gets weight_break
     *
     * @return int
     */
    public function getWeightBreak()
    {
        return $this->container['weight_break'];
    }

    /**
     * Sets weight_break
     *
     * @param int $weight_break weight_break
     *
     * @return $this
     */
    public function setWeightBreak($weight_break)
    {
        $this->container['weight_break'] = $weight_break;

        return $this;
    }

    /**
     * Gets sector
     *
     * @return string
     */
    public function getSector()
    {
        return $this->container['sector'];
    }

    /**
     * Sets sector
     *
     * @param string $sector sector
     *
     * @return $this
     */
    public function setSector($sector)
    {
        $this->container['sector'] = $sector;

        return $this;
    }

    /**
     * Gets division
     *
     * @return int
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param int $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string $cost_center cost_center
     *
     * @return $this
     */
    public function setCostCenter($cost_center)
    {
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area area
     *
     * @return $this
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string $customer_type customer_type
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets mass_level
     *
     * @return string
     */
    public function getMassLevel()
    {
        return $this->container['mass_level'];
    }

    /**
     * Sets mass_level
     *
     * @param string $mass_level mass_level
     *
     * @return $this
     */
    public function setMassLevel($mass_level)
    {
        $this->container['mass_level'] = $mass_level;

        return $this;
    }

    /**
     * Gets mass_factor
     *
     * @return float
     */
    public function getMassFactor()
    {
        return $this->container['mass_factor'];
    }

    /**
     * Sets mass_factor
     *
     * @param float $mass_factor mass_factor
     *
     * @return $this
     */
    public function setMassFactor($mass_factor)
    {
        $this->container['mass_factor'] = $mass_factor;

        return $this;
    }

    /**
     * Gets price_level
     *
     * @return string
     */
    public function getPriceLevel()
    {
        return $this->container['price_level'];
    }

    /**
     * Sets price_level
     *
     * @param string $price_level price_level
     *
     * @return $this
     */
    public function setPriceLevel($price_level)
    {
        $this->container['price_level'] = $price_level;

        return $this;
    }

    /**
     * Gets open_date
     *
     * @return \DateTime
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     *
     * @param \DateTime $open_date open_date
     *
     * @return $this
     */
    public function setOpenDate($open_date)
    {
        $this->container['open_date'] = $open_date;

        return $this;
    }

    /**
     * Gets close_date
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param \DateTime $close_date close_date
     *
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets restriction_percent
     *
     * @return int
     */
    public function getRestrictionPercent()
    {
        return $this->container['restriction_percent'];
    }

    /**
     * Sets restriction_percent
     *
     * @param int $restriction_percent restriction_percent
     *
     * @return $this
     */
    public function setRestrictionPercent($restriction_percent)
    {
        $this->container['restriction_percent'] = $restriction_percent;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets cycle_date
     *
     * @return \DateTime
     */
    public function getCycleDate()
    {
        return $this->container['cycle_date'];
    }

    /**
     * Sets cycle_date
     *
     * @param \DateTime $cycle_date cycle_date
     *
     * @return $this
     */
    public function setCycleDate($cycle_date)
    {
        $this->container['cycle_date'] = $cycle_date;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return string
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param string $manager manager
     *
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets alternate_inventory
     *
     * @return int
     */
    public function getAlternateInventory()
    {
        return $this->container['alternate_inventory'];
    }

    /**
     * Sets alternate_inventory
     *
     * @param int $alternate_inventory alternate_inventory
     *
     * @return $this
     */
    public function setAlternateInventory($alternate_inventory)
    {
        $this->container['alternate_inventory'] = $alternate_inventory;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin pin
     *
     * @return $this
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets fax_gone
     *
     * @return string
     */
    public function getFaxGone()
    {
        return $this->container['fax_gone'];
    }

    /**
     * Sets fax_gone
     *
     * @param string $fax_gone fax_gone
     *
     * @return $this
     */
    public function setFaxGone($fax_gone)
    {
        $this->container['fax_gone'] = $fax_gone;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return string
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param string $residential residential
     *
     * @return $this
     */
    public function setResidential($residential)
    {
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets csr_branch
     *
     * @return string
     */
    public function getCsrBranch()
    {
        return $this->container['csr_branch'];
    }

    /**
     * Sets csr_branch
     *
     * @param string $csr_branch csr_branch
     *
     * @return $this
     */
    public function setCsrBranch($csr_branch)
    {
        $this->container['csr_branch'] = $csr_branch;

        return $this;
    }

    /**
     * Gets extrinsic_text1
     *
     * @return string
     */
    public function getExtrinsicText1()
    {
        return $this->container['extrinsic_text1'];
    }

    /**
     * Sets extrinsic_text1
     *
     * @param string $extrinsic_text1 extrinsic_text1
     *
     * @return $this
     */
    public function setExtrinsicText1($extrinsic_text1)
    {
        $this->container['extrinsic_text1'] = $extrinsic_text1;

        return $this;
    }

    /**
     * Gets extrinsic_text2
     *
     * @return string
     */
    public function getExtrinsicText2()
    {
        return $this->container['extrinsic_text2'];
    }

    /**
     * Sets extrinsic_text2
     *
     * @param string $extrinsic_text2 extrinsic_text2
     *
     * @return $this
     */
    public function setExtrinsicText2($extrinsic_text2)
    {
        $this->container['extrinsic_text2'] = $extrinsic_text2;

        return $this;
    }

    /**
     * Gets extrinsic_text3
     *
     * @return string
     */
    public function getExtrinsicText3()
    {
        return $this->container['extrinsic_text3'];
    }

    /**
     * Sets extrinsic_text3
     *
     * @param string $extrinsic_text3 extrinsic_text3
     *
     * @return $this
     */
    public function setExtrinsicText3($extrinsic_text3)
    {
        $this->container['extrinsic_text3'] = $extrinsic_text3;

        return $this;
    }

    /**
     * Gets extrinsic_number1
     *
     * @return int
     */
    public function getExtrinsicNumber1()
    {
        return $this->container['extrinsic_number1'];
    }

    /**
     * Sets extrinsic_number1
     *
     * @param int $extrinsic_number1 extrinsic_number1
     *
     * @return $this
     */
    public function setExtrinsicNumber1($extrinsic_number1)
    {
        $this->container['extrinsic_number1'] = $extrinsic_number1;

        return $this;
    }

    /**
     * Gets extrinsic_number2
     *
     * @return int
     */
    public function getExtrinsicNumber2()
    {
        return $this->container['extrinsic_number2'];
    }

    /**
     * Sets extrinsic_number2
     *
     * @param int $extrinsic_number2 extrinsic_number2
     *
     * @return $this
     */
    public function setExtrinsicNumber2($extrinsic_number2)
    {
        $this->container['extrinsic_number2'] = $extrinsic_number2;

        return $this;
    }

    /**
     * Gets extrinsic_decimal1
     *
     * @return float
     */
    public function getExtrinsicDecimal1()
    {
        return $this->container['extrinsic_decimal1'];
    }

    /**
     * Sets extrinsic_decimal1
     *
     * @param float $extrinsic_decimal1 extrinsic_decimal1
     *
     * @return $this
     */
    public function setExtrinsicDecimal1($extrinsic_decimal1)
    {
        $this->container['extrinsic_decimal1'] = $extrinsic_decimal1;

        return $this;
    }

    /**
     * Gets extrinsic_decimal2
     *
     * @return float
     */
    public function getExtrinsicDecimal2()
    {
        return $this->container['extrinsic_decimal2'];
    }

    /**
     * Sets extrinsic_decimal2
     *
     * @param float $extrinsic_decimal2 extrinsic_decimal2
     *
     * @return $this
     */
    public function setExtrinsicDecimal2($extrinsic_decimal2)
    {
        $this->container['extrinsic_decimal2'] = $extrinsic_decimal2;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets oms_customer_id
     *
     * @return int
     */
    public function getOmsCustomerId()
    {
        return $this->container['oms_customer_id'];
    }

    /**
     * Sets oms_customer_id
     *
     * @param int $oms_customer_id oms_customer_id
     *
     * @return $this
     */
    public function setOmsCustomerId($oms_customer_id)
    {
        $this->container['oms_customer_id'] = $oms_customer_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


