<?php
/**
 * Alert
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * Alert Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Alert implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'type' => 'string',
        'level' => 'string',
        'message' => 'string',
        'link' => 'string',
        'link_text' => 'string',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'acknowledge_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'type' => 'type',
        'level' => 'level',
        'message' => 'message',
        'link' => 'link',
        'link_text' => 'linkText',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'expiration_date' => 'expirationDate',
        'acknowledge_date' => 'acknowledgeDate',
        'custom_fields' => 'customFields'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'type' => 'setType',
        'level' => 'setLevel',
        'message' => 'setMessage',
        'link' => 'setLink',
        'link_text' => 'setLinkText',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'expiration_date' => 'setExpirationDate',
        'acknowledge_date' => 'setAcknowledgeDate',
        'custom_fields' => 'setCustomFields'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'type' => 'getType',
        'level' => 'getLevel',
        'message' => 'getMessage',
        'link' => 'getLink',
        'link_text' => 'getLinkText',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'expiration_date' => 'getExpirationDate',
        'acknowledge_date' => 'getAcknowledgeDate',
        'custom_fields' => 'getCustomFields'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $level 
      * @var string
      */
    protected $level;
    
    /**
      * $message 
      * @var string
      */
    protected $message;
    
    /**
      * $link 
      * @var string
      */
    protected $link;
    
    /**
      * $link_text 
      * @var string
      */
    protected $link_text;
    
    /**
      * $create_date 
      * @var \DateTime
      */
    protected $create_date;
    
    /**
      * $modify_date 
      * @var \DateTime
      */
    protected $modify_date;
    
    /**
      * $expiration_date 
      * @var \DateTime
      */
    protected $expiration_date;
    
    /**
      * $acknowledge_date 
      * @var \DateTime
      */
    protected $acknowledge_date;
    
    /**
      * $custom_fields 
      * @var map[string,object]
      */
    protected $custom_fields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->type = $data["type"];
            $this->level = $data["level"];
            $this->message = $data["message"];
            $this->link = $data["link"];
            $this->link_text = $data["link_text"];
            $this->create_date = $data["create_date"];
            $this->modify_date = $data["modify_date"];
            $this->expiration_date = $data["expiration_date"];
            $this->acknowledge_date = $data["acknowledge_date"];
            $this->custom_fields = $data["custom_fields"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets level
     * @return string
     */
    public function getLevel()
    {
        return $this->level;
    }
  
    /**
     * Sets level
     * @param string $level 
     * @return $this
     */
    public function setLevel($level)
    {
        
        $this->level = $level;
        return $this;
    }
    
    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }
  
    /**
     * Sets message
     * @param string $message 
     * @return $this
     */
    public function setMessage($message)
    {
        
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->link;
    }
  
    /**
     * Sets link
     * @param string $link 
     * @return $this
     */
    public function setLink($link)
    {
        
        $this->link = $link;
        return $this;
    }
    
    /**
     * Gets link_text
     * @return string
     */
    public function getLinkText()
    {
        return $this->link_text;
    }
  
    /**
     * Sets link_text
     * @param string $link_text 
     * @return $this
     */
    public function setLinkText($link_text)
    {
        
        $this->link_text = $link_text;
        return $this;
    }
    
    /**
     * Gets create_date
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->create_date;
    }
  
    /**
     * Sets create_date
     * @param \DateTime $create_date 
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        
        $this->create_date = $create_date;
        return $this;
    }
    
    /**
     * Gets modify_date
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->modify_date;
    }
  
    /**
     * Sets modify_date
     * @param \DateTime $modify_date 
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        
        $this->modify_date = $modify_date;
        return $this;
    }
    
    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->expiration_date;
    }
  
    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date 
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        
        $this->expiration_date = $expiration_date;
        return $this;
    }
    
    /**
     * Gets acknowledge_date
     * @return \DateTime
     */
    public function getAcknowledgeDate()
    {
        return $this->acknowledge_date;
    }
  
    /**
     * Sets acknowledge_date
     * @param \DateTime $acknowledge_date 
     * @return $this
     */
    public function setAcknowledgeDate($acknowledge_date)
    {
        
        $this->acknowledge_date = $acknowledge_date;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param map[string,object] $custom_fields 
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
