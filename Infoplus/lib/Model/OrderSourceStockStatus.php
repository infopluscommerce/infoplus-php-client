<?php
/**
 * OrderSourceStockStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * OrderSourceStockStatus Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderSourceStockStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderSourceStockStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'order_source_id' => 'int',
        'lob_id' => 'int',
        'total_reserved_quantity' => 'int',
        'demand' => 'int',
        'reserved_quantity' => 'int',
        'quantity_available' => 'int',
        'orderable_quantity' => 'int',
        'unreserved_quantity_available' => 'int',
        'net_reservation' => 'int',
        'custom_fields' => 'map[string,object]',
        'sku' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'order_source_id' => 'int32',
        'lob_id' => 'int32',
        'total_reserved_quantity' => 'int32',
        'demand' => 'int32',
        'reserved_quantity' => 'int32',
        'quantity_available' => 'int32',
        'orderable_quantity' => 'int32',
        'unreserved_quantity_available' => 'int32',
        'net_reservation' => 'int32',
        'custom_fields' => null,
        'sku' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_source_id' => 'orderSourceId',
        'lob_id' => 'lobId',
        'total_reserved_quantity' => 'totalReservedQuantity',
        'demand' => 'demand',
        'reserved_quantity' => 'reservedQuantity',
        'quantity_available' => 'quantityAvailable',
        'orderable_quantity' => 'orderableQuantity',
        'unreserved_quantity_available' => 'unreservedQuantityAvailable',
        'net_reservation' => 'netReservation',
        'custom_fields' => 'customFields',
        'sku' => 'sku'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_source_id' => 'setOrderSourceId',
        'lob_id' => 'setLobId',
        'total_reserved_quantity' => 'setTotalReservedQuantity',
        'demand' => 'setDemand',
        'reserved_quantity' => 'setReservedQuantity',
        'quantity_available' => 'setQuantityAvailable',
        'orderable_quantity' => 'setOrderableQuantity',
        'unreserved_quantity_available' => 'setUnreservedQuantityAvailable',
        'net_reservation' => 'setNetReservation',
        'custom_fields' => 'setCustomFields',
        'sku' => 'setSku'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_source_id' => 'getOrderSourceId',
        'lob_id' => 'getLobId',
        'total_reserved_quantity' => 'getTotalReservedQuantity',
        'demand' => 'getDemand',
        'reserved_quantity' => 'getReservedQuantity',
        'quantity_available' => 'getQuantityAvailable',
        'orderable_quantity' => 'getOrderableQuantity',
        'unreserved_quantity_available' => 'getUnreservedQuantityAvailable',
        'net_reservation' => 'getNetReservation',
        'custom_fields' => 'getCustomFields',
        'sku' => 'getSku'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_source_id'] = isset($data['order_source_id']) ? $data['order_source_id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['total_reserved_quantity'] = isset($data['total_reserved_quantity']) ? $data['total_reserved_quantity'] : null;
        $this->container['demand'] = isset($data['demand']) ? $data['demand'] : null;
        $this->container['reserved_quantity'] = isset($data['reserved_quantity']) ? $data['reserved_quantity'] : null;
        $this->container['quantity_available'] = isset($data['quantity_available']) ? $data['quantity_available'] : null;
        $this->container['orderable_quantity'] = isset($data['orderable_quantity']) ? $data['orderable_quantity'] : null;
        $this->container['unreserved_quantity_available'] = isset($data['unreserved_quantity_available']) ? $data['unreserved_quantity_available'] : null;
        $this->container['net_reservation'] = isset($data['net_reservation']) ? $data['net_reservation'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_source_id'] === null) {
            $invalidProperties[] = "'order_source_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_source_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_source_id
     *
     * @return int
     */
    public function getOrderSourceId()
    {
        return $this->container['order_source_id'];
    }

    /**
     * Sets order_source_id
     *
     * @param int $order_source_id order_source_id
     *
     * @return $this
     */
    public function setOrderSourceId($order_source_id)
    {
        $this->container['order_source_id'] = $order_source_id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets total_reserved_quantity
     *
     * @return int
     */
    public function getTotalReservedQuantity()
    {
        return $this->container['total_reserved_quantity'];
    }

    /**
     * Sets total_reserved_quantity
     *
     * @param int $total_reserved_quantity total_reserved_quantity
     *
     * @return $this
     */
    public function setTotalReservedQuantity($total_reserved_quantity)
    {
        $this->container['total_reserved_quantity'] = $total_reserved_quantity;

        return $this;
    }

    /**
     * Gets demand
     *
     * @return int
     */
    public function getDemand()
    {
        return $this->container['demand'];
    }

    /**
     * Sets demand
     *
     * @param int $demand demand
     *
     * @return $this
     */
    public function setDemand($demand)
    {
        $this->container['demand'] = $demand;

        return $this;
    }

    /**
     * Gets reserved_quantity
     *
     * @return int
     */
    public function getReservedQuantity()
    {
        return $this->container['reserved_quantity'];
    }

    /**
     * Sets reserved_quantity
     *
     * @param int $reserved_quantity reserved_quantity
     *
     * @return $this
     */
    public function setReservedQuantity($reserved_quantity)
    {
        $this->container['reserved_quantity'] = $reserved_quantity;

        return $this;
    }

    /**
     * Gets quantity_available
     *
     * @return int
     */
    public function getQuantityAvailable()
    {
        return $this->container['quantity_available'];
    }

    /**
     * Sets quantity_available
     *
     * @param int $quantity_available quantity_available
     *
     * @return $this
     */
    public function setQuantityAvailable($quantity_available)
    {
        $this->container['quantity_available'] = $quantity_available;

        return $this;
    }

    /**
     * Gets orderable_quantity
     *
     * @return int
     */
    public function getOrderableQuantity()
    {
        return $this->container['orderable_quantity'];
    }

    /**
     * Sets orderable_quantity
     *
     * @param int $orderable_quantity orderable_quantity
     *
     * @return $this
     */
    public function setOrderableQuantity($orderable_quantity)
    {
        $this->container['orderable_quantity'] = $orderable_quantity;

        return $this;
    }

    /**
     * Gets unreserved_quantity_available
     *
     * @return int
     */
    public function getUnreservedQuantityAvailable()
    {
        return $this->container['unreserved_quantity_available'];
    }

    /**
     * Sets unreserved_quantity_available
     *
     * @param int $unreserved_quantity_available unreserved_quantity_available
     *
     * @return $this
     */
    public function setUnreservedQuantityAvailable($unreserved_quantity_available)
    {
        $this->container['unreserved_quantity_available'] = $unreserved_quantity_available;

        return $this;
    }

    /**
     * Gets net_reservation
     *
     * @return int
     */
    public function getNetReservation()
    {
        return $this->container['net_reservation'];
    }

    /**
     * Sets net_reservation
     *
     * @param int $net_reservation net_reservation
     *
     * @return $this
     */
    public function setNetReservation($net_reservation)
    {
        $this->container['net_reservation'] = $net_reservation;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


