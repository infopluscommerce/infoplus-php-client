<?php
/**
 * SlaSetup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * SlaSetup Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SlaSetup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'slaSetup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'lob_id' => 'int',
        'warehouse_id' => 'int',
        'effective_date' => '\DateTime',
        'standard_service_days' => 'int',
        'standard_service_cutoff_hour' => 'int',
        'mass_distribution_service_days' => 'int',
        'mass_distribution_service_cutoff_hour' => 'int',
        'backorder_service_days' => 'int',
        'backorder_service_cutoff_hour' => 'int',
        'rush_service_cutoff_hour' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'lob_id' => 'int32',
        'warehouse_id' => 'int32',
        'effective_date' => 'date-time',
        'standard_service_days' => 'int32',
        'standard_service_cutoff_hour' => 'int32',
        'mass_distribution_service_days' => 'int32',
        'mass_distribution_service_cutoff_hour' => 'int32',
        'backorder_service_days' => 'int32',
        'backorder_service_cutoff_hour' => 'int32',
        'rush_service_cutoff_hour' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'lob_id' => 'lobId',
        'warehouse_id' => 'warehouseId',
        'effective_date' => 'effectiveDate',
        'standard_service_days' => 'standardServiceDays',
        'standard_service_cutoff_hour' => 'standardServiceCutoffHour',
        'mass_distribution_service_days' => 'massDistributionServiceDays',
        'mass_distribution_service_cutoff_hour' => 'massDistributionServiceCutoffHour',
        'backorder_service_days' => 'backorderServiceDays',
        'backorder_service_cutoff_hour' => 'backorderServiceCutoffHour',
        'rush_service_cutoff_hour' => 'rushServiceCutoffHour',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'lob_id' => 'setLobId',
        'warehouse_id' => 'setWarehouseId',
        'effective_date' => 'setEffectiveDate',
        'standard_service_days' => 'setStandardServiceDays',
        'standard_service_cutoff_hour' => 'setStandardServiceCutoffHour',
        'mass_distribution_service_days' => 'setMassDistributionServiceDays',
        'mass_distribution_service_cutoff_hour' => 'setMassDistributionServiceCutoffHour',
        'backorder_service_days' => 'setBackorderServiceDays',
        'backorder_service_cutoff_hour' => 'setBackorderServiceCutoffHour',
        'rush_service_cutoff_hour' => 'setRushServiceCutoffHour',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'lob_id' => 'getLobId',
        'warehouse_id' => 'getWarehouseId',
        'effective_date' => 'getEffectiveDate',
        'standard_service_days' => 'getStandardServiceDays',
        'standard_service_cutoff_hour' => 'getStandardServiceCutoffHour',
        'mass_distribution_service_days' => 'getMassDistributionServiceDays',
        'mass_distribution_service_cutoff_hour' => 'getMassDistributionServiceCutoffHour',
        'backorder_service_days' => 'getBackorderServiceDays',
        'backorder_service_cutoff_hour' => 'getBackorderServiceCutoffHour',
        'rush_service_cutoff_hour' => 'getRushServiceCutoffHour',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['standard_service_days'] = isset($data['standard_service_days']) ? $data['standard_service_days'] : null;
        $this->container['standard_service_cutoff_hour'] = isset($data['standard_service_cutoff_hour']) ? $data['standard_service_cutoff_hour'] : null;
        $this->container['mass_distribution_service_days'] = isset($data['mass_distribution_service_days']) ? $data['mass_distribution_service_days'] : null;
        $this->container['mass_distribution_service_cutoff_hour'] = isset($data['mass_distribution_service_cutoff_hour']) ? $data['mass_distribution_service_cutoff_hour'] : null;
        $this->container['backorder_service_days'] = isset($data['backorder_service_days']) ? $data['backorder_service_days'] : null;
        $this->container['backorder_service_cutoff_hour'] = isset($data['backorder_service_cutoff_hour']) ? $data['backorder_service_cutoff_hour'] : null;
        $this->container['rush_service_cutoff_hour'] = isset($data['rush_service_cutoff_hour']) ? $data['rush_service_cutoff_hour'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        if ($this->container['effective_date'] === null) {
            $invalidProperties[] = "'effective_date' can't be null";
        }
        if ($this->container['standard_service_days'] === null) {
            $invalidProperties[] = "'standard_service_days' can't be null";
        }
        if ($this->container['standard_service_cutoff_hour'] === null) {
            $invalidProperties[] = "'standard_service_cutoff_hour' can't be null";
        }
        if ($this->container['mass_distribution_service_days'] === null) {
            $invalidProperties[] = "'mass_distribution_service_days' can't be null";
        }
        if ($this->container['mass_distribution_service_cutoff_hour'] === null) {
            $invalidProperties[] = "'mass_distribution_service_cutoff_hour' can't be null";
        }
        if ($this->container['backorder_service_days'] === null) {
            $invalidProperties[] = "'backorder_service_days' can't be null";
        }
        if ($this->container['backorder_service_cutoff_hour'] === null) {
            $invalidProperties[] = "'backorder_service_cutoff_hour' can't be null";
        }
        if ($this->container['rush_service_cutoff_hour'] === null) {
            $invalidProperties[] = "'rush_service_cutoff_hour' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['warehouse_id'] === null) {
            return false;
        }
        if ($this->container['effective_date'] === null) {
            return false;
        }
        if ($this->container['standard_service_days'] === null) {
            return false;
        }
        if ($this->container['standard_service_cutoff_hour'] === null) {
            return false;
        }
        if ($this->container['mass_distribution_service_days'] === null) {
            return false;
        }
        if ($this->container['mass_distribution_service_cutoff_hour'] === null) {
            return false;
        }
        if ($this->container['backorder_service_days'] === null) {
            return false;
        }
        if ($this->container['backorder_service_cutoff_hour'] === null) {
            return false;
        }
        if ($this->container['rush_service_cutoff_hour'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date effective_date
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets standard_service_days
     *
     * @return int
     */
    public function getStandardServiceDays()
    {
        return $this->container['standard_service_days'];
    }

    /**
     * Sets standard_service_days
     *
     * @param int $standard_service_days standard_service_days
     *
     * @return $this
     */
    public function setStandardServiceDays($standard_service_days)
    {
        $this->container['standard_service_days'] = $standard_service_days;

        return $this;
    }

    /**
     * Gets standard_service_cutoff_hour
     *
     * @return int
     */
    public function getStandardServiceCutoffHour()
    {
        return $this->container['standard_service_cutoff_hour'];
    }

    /**
     * Sets standard_service_cutoff_hour
     *
     * @param int $standard_service_cutoff_hour standard_service_cutoff_hour
     *
     * @return $this
     */
    public function setStandardServiceCutoffHour($standard_service_cutoff_hour)
    {
        $this->container['standard_service_cutoff_hour'] = $standard_service_cutoff_hour;

        return $this;
    }

    /**
     * Gets mass_distribution_service_days
     *
     * @return int
     */
    public function getMassDistributionServiceDays()
    {
        return $this->container['mass_distribution_service_days'];
    }

    /**
     * Sets mass_distribution_service_days
     *
     * @param int $mass_distribution_service_days mass_distribution_service_days
     *
     * @return $this
     */
    public function setMassDistributionServiceDays($mass_distribution_service_days)
    {
        $this->container['mass_distribution_service_days'] = $mass_distribution_service_days;

        return $this;
    }

    /**
     * Gets mass_distribution_service_cutoff_hour
     *
     * @return int
     */
    public function getMassDistributionServiceCutoffHour()
    {
        return $this->container['mass_distribution_service_cutoff_hour'];
    }

    /**
     * Sets mass_distribution_service_cutoff_hour
     *
     * @param int $mass_distribution_service_cutoff_hour mass_distribution_service_cutoff_hour
     *
     * @return $this
     */
    public function setMassDistributionServiceCutoffHour($mass_distribution_service_cutoff_hour)
    {
        $this->container['mass_distribution_service_cutoff_hour'] = $mass_distribution_service_cutoff_hour;

        return $this;
    }

    /**
     * Gets backorder_service_days
     *
     * @return int
     */
    public function getBackorderServiceDays()
    {
        return $this->container['backorder_service_days'];
    }

    /**
     * Sets backorder_service_days
     *
     * @param int $backorder_service_days backorder_service_days
     *
     * @return $this
     */
    public function setBackorderServiceDays($backorder_service_days)
    {
        $this->container['backorder_service_days'] = $backorder_service_days;

        return $this;
    }

    /**
     * Gets backorder_service_cutoff_hour
     *
     * @return int
     */
    public function getBackorderServiceCutoffHour()
    {
        return $this->container['backorder_service_cutoff_hour'];
    }

    /**
     * Sets backorder_service_cutoff_hour
     *
     * @param int $backorder_service_cutoff_hour backorder_service_cutoff_hour
     *
     * @return $this
     */
    public function setBackorderServiceCutoffHour($backorder_service_cutoff_hour)
    {
        $this->container['backorder_service_cutoff_hour'] = $backorder_service_cutoff_hour;

        return $this;
    }

    /**
     * Gets rush_service_cutoff_hour
     *
     * @return int
     */
    public function getRushServiceCutoffHour()
    {
        return $this->container['rush_service_cutoff_hour'];
    }

    /**
     * Sets rush_service_cutoff_hour
     *
     * @param int $rush_service_cutoff_hour rush_service_cutoff_hour
     *
     * @return $this
     */
    public function setRushServiceCutoffHour($rush_service_cutoff_hour)
    {
        $this->container['rush_service_cutoff_hour'] = $rush_service_cutoff_hour;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


