<?php
/**
 * OmsOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * OmsOrder Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OmsOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'omsOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lob_id' => 'int',
        'external_id' => 'string',
        'oms_order_no' => 'int',
        'total' => 'float',
        'order_status' => 'string',
        'order_entry_program_id' => 'int',
        'entered_by_id' => 'int',
        'id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'next_oms_order_id' => 'int',
        'customer_id' => 'int',
        'tax' => 'float',
        'shipping_handling' => 'float',
        'sh_override_amount' => 'float',
        'integration_partner_id' => 'int',
        'order_source_id' => 'int',
        'batch_no' => 'string',
        'is_gift' => 'bool',
        'gift_message' => 'string',
        'email_recipient' => 'bool',
        'mail_recipient' => 'bool',
        'key_code' => 'string',
        'key_code_description' => 'string',
        'dist_charges' => 'float',
        'sub_total' => 'float',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lob_id' => 'int32',
        'external_id' => null,
        'oms_order_no' => 'int32',
        'total' => null,
        'order_status' => null,
        'order_entry_program_id' => 'int32',
        'entered_by_id' => 'int32',
        'id' => 'int32',
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'next_oms_order_id' => 'int32',
        'customer_id' => 'int32',
        'tax' => null,
        'shipping_handling' => null,
        'sh_override_amount' => null,
        'integration_partner_id' => 'int32',
        'order_source_id' => 'int32',
        'batch_no' => null,
        'is_gift' => null,
        'gift_message' => null,
        'email_recipient' => null,
        'mail_recipient' => null,
        'key_code' => null,
        'key_code_description' => null,
        'dist_charges' => null,
        'sub_total' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lob_id' => 'lobId',
        'external_id' => 'externalId',
        'oms_order_no' => 'omsOrderNo',
        'total' => 'total',
        'order_status' => 'orderStatus',
        'order_entry_program_id' => 'orderEntryProgramId',
        'entered_by_id' => 'enteredById',
        'id' => 'id',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'next_oms_order_id' => 'nextOMSOrderId',
        'customer_id' => 'customerId',
        'tax' => 'tax',
        'shipping_handling' => 'shippingHandling',
        'sh_override_amount' => 'shOverrideAmount',
        'integration_partner_id' => 'integrationPartnerId',
        'order_source_id' => 'orderSourceId',
        'batch_no' => 'batchNo',
        'is_gift' => 'isGift',
        'gift_message' => 'giftMessage',
        'email_recipient' => 'emailRecipient',
        'mail_recipient' => 'mailRecipient',
        'key_code' => 'keyCode',
        'key_code_description' => 'keyCodeDescription',
        'dist_charges' => 'distCharges',
        'sub_total' => 'subTotal',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lob_id' => 'setLobId',
        'external_id' => 'setExternalId',
        'oms_order_no' => 'setOmsOrderNo',
        'total' => 'setTotal',
        'order_status' => 'setOrderStatus',
        'order_entry_program_id' => 'setOrderEntryProgramId',
        'entered_by_id' => 'setEnteredById',
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'next_oms_order_id' => 'setNextOmsOrderId',
        'customer_id' => 'setCustomerId',
        'tax' => 'setTax',
        'shipping_handling' => 'setShippingHandling',
        'sh_override_amount' => 'setShOverrideAmount',
        'integration_partner_id' => 'setIntegrationPartnerId',
        'order_source_id' => 'setOrderSourceId',
        'batch_no' => 'setBatchNo',
        'is_gift' => 'setIsGift',
        'gift_message' => 'setGiftMessage',
        'email_recipient' => 'setEmailRecipient',
        'mail_recipient' => 'setMailRecipient',
        'key_code' => 'setKeyCode',
        'key_code_description' => 'setKeyCodeDescription',
        'dist_charges' => 'setDistCharges',
        'sub_total' => 'setSubTotal',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lob_id' => 'getLobId',
        'external_id' => 'getExternalId',
        'oms_order_no' => 'getOmsOrderNo',
        'total' => 'getTotal',
        'order_status' => 'getOrderStatus',
        'order_entry_program_id' => 'getOrderEntryProgramId',
        'entered_by_id' => 'getEnteredById',
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'next_oms_order_id' => 'getNextOmsOrderId',
        'customer_id' => 'getCustomerId',
        'tax' => 'getTax',
        'shipping_handling' => 'getShippingHandling',
        'sh_override_amount' => 'getShOverrideAmount',
        'integration_partner_id' => 'getIntegrationPartnerId',
        'order_source_id' => 'getOrderSourceId',
        'batch_no' => 'getBatchNo',
        'is_gift' => 'getIsGift',
        'gift_message' => 'getGiftMessage',
        'email_recipient' => 'getEmailRecipient',
        'mail_recipient' => 'getMailRecipient',
        'key_code' => 'getKeyCode',
        'key_code_description' => 'getKeyCodeDescription',
        'dist_charges' => 'getDistCharges',
        'sub_total' => 'getSubTotal',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['oms_order_no'] = isset($data['oms_order_no']) ? $data['oms_order_no'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['order_entry_program_id'] = isset($data['order_entry_program_id']) ? $data['order_entry_program_id'] : null;
        $this->container['entered_by_id'] = isset($data['entered_by_id']) ? $data['entered_by_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['next_oms_order_id'] = isset($data['next_oms_order_id']) ? $data['next_oms_order_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['shipping_handling'] = isset($data['shipping_handling']) ? $data['shipping_handling'] : null;
        $this->container['sh_override_amount'] = isset($data['sh_override_amount']) ? $data['sh_override_amount'] : null;
        $this->container['integration_partner_id'] = isset($data['integration_partner_id']) ? $data['integration_partner_id'] : null;
        $this->container['order_source_id'] = isset($data['order_source_id']) ? $data['order_source_id'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['is_gift'] = isset($data['is_gift']) ? $data['is_gift'] : false;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
        $this->container['email_recipient'] = isset($data['email_recipient']) ? $data['email_recipient'] : false;
        $this->container['mail_recipient'] = isset($data['mail_recipient']) ? $data['mail_recipient'] : false;
        $this->container['key_code'] = isset($data['key_code']) ? $data['key_code'] : null;
        $this->container['key_code_description'] = isset($data['key_code_description']) ? $data['key_code_description'] : null;
        $this->container['dist_charges'] = isset($data['dist_charges']) ? $data['dist_charges'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets oms_order_no
     *
     * @return int
     */
    public function getOmsOrderNo()
    {
        return $this->container['oms_order_no'];
    }

    /**
     * Sets oms_order_no
     *
     * @param int $oms_order_no oms_order_no
     *
     * @return $this
     */
    public function setOmsOrderNo($oms_order_no)
    {
        $this->container['oms_order_no'] = $oms_order_no;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status order_status
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets order_entry_program_id
     *
     * @return int
     */
    public function getOrderEntryProgramId()
    {
        return $this->container['order_entry_program_id'];
    }

    /**
     * Sets order_entry_program_id
     *
     * @param int $order_entry_program_id order_entry_program_id
     *
     * @return $this
     */
    public function setOrderEntryProgramId($order_entry_program_id)
    {
        $this->container['order_entry_program_id'] = $order_entry_program_id;

        return $this;
    }

    /**
     * Gets entered_by_id
     *
     * @return int
     */
    public function getEnteredById()
    {
        return $this->container['entered_by_id'];
    }

    /**
     * Sets entered_by_id
     *
     * @param int $entered_by_id entered_by_id
     *
     * @return $this
     */
    public function setEnteredById($entered_by_id)
    {
        $this->container['entered_by_id'] = $entered_by_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets next_oms_order_id
     *
     * @return int
     */
    public function getNextOmsOrderId()
    {
        return $this->container['next_oms_order_id'];
    }

    /**
     * Sets next_oms_order_id
     *
     * @param int $next_oms_order_id next_oms_order_id
     *
     * @return $this
     */
    public function setNextOmsOrderId($next_oms_order_id)
    {
        $this->container['next_oms_order_id'] = $next_oms_order_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets shipping_handling
     *
     * @return float
     */
    public function getShippingHandling()
    {
        return $this->container['shipping_handling'];
    }

    /**
     * Sets shipping_handling
     *
     * @param float $shipping_handling shipping_handling
     *
     * @return $this
     */
    public function setShippingHandling($shipping_handling)
    {
        $this->container['shipping_handling'] = $shipping_handling;

        return $this;
    }

    /**
     * Gets sh_override_amount
     *
     * @return float
     */
    public function getShOverrideAmount()
    {
        return $this->container['sh_override_amount'];
    }

    /**
     * Sets sh_override_amount
     *
     * @param float $sh_override_amount sh_override_amount
     *
     * @return $this
     */
    public function setShOverrideAmount($sh_override_amount)
    {
        $this->container['sh_override_amount'] = $sh_override_amount;

        return $this;
    }

    /**
     * Gets integration_partner_id
     *
     * @return int
     */
    public function getIntegrationPartnerId()
    {
        return $this->container['integration_partner_id'];
    }

    /**
     * Sets integration_partner_id
     *
     * @param int $integration_partner_id integration_partner_id
     *
     * @return $this
     */
    public function setIntegrationPartnerId($integration_partner_id)
    {
        $this->container['integration_partner_id'] = $integration_partner_id;

        return $this;
    }

    /**
     * Gets order_source_id
     *
     * @return int
     */
    public function getOrderSourceId()
    {
        return $this->container['order_source_id'];
    }

    /**
     * Sets order_source_id
     *
     * @param int $order_source_id order_source_id
     *
     * @return $this
     */
    public function setOrderSourceId($order_source_id)
    {
        $this->container['order_source_id'] = $order_source_id;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool $is_gift is_gift
     *
     * @return $this
     */
    public function setIsGift($is_gift)
    {
        $this->container['is_gift'] = $is_gift;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message gift_message
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets email_recipient
     *
     * @return bool
     */
    public function getEmailRecipient()
    {
        return $this->container['email_recipient'];
    }

    /**
     * Sets email_recipient
     *
     * @param bool $email_recipient email_recipient
     *
     * @return $this
     */
    public function setEmailRecipient($email_recipient)
    {
        $this->container['email_recipient'] = $email_recipient;

        return $this;
    }

    /**
     * Gets mail_recipient
     *
     * @return bool
     */
    public function getMailRecipient()
    {
        return $this->container['mail_recipient'];
    }

    /**
     * Sets mail_recipient
     *
     * @param bool $mail_recipient mail_recipient
     *
     * @return $this
     */
    public function setMailRecipient($mail_recipient)
    {
        $this->container['mail_recipient'] = $mail_recipient;

        return $this;
    }

    /**
     * Gets key_code
     *
     * @return string
     */
    public function getKeyCode()
    {
        return $this->container['key_code'];
    }

    /**
     * Sets key_code
     *
     * @param string $key_code key_code
     *
     * @return $this
     */
    public function setKeyCode($key_code)
    {
        $this->container['key_code'] = $key_code;

        return $this;
    }

    /**
     * Gets key_code_description
     *
     * @return string
     */
    public function getKeyCodeDescription()
    {
        return $this->container['key_code_description'];
    }

    /**
     * Sets key_code_description
     *
     * @param string $key_code_description key_code_description
     *
     * @return $this
     */
    public function setKeyCodeDescription($key_code_description)
    {
        $this->container['key_code_description'] = $key_code_description;

        return $this;
    }

    /**
     * Gets dist_charges
     *
     * @return float
     */
    public function getDistCharges()
    {
        return $this->container['dist_charges'];
    }

    /**
     * Sets dist_charges
     *
     * @param float $dist_charges dist_charges
     *
     * @return $this
     */
    public function setDistCharges($dist_charges)
    {
        $this->container['dist_charges'] = $dist_charges;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float $sub_total sub_total
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


