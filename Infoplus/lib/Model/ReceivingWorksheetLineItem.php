<?php
/**
 * ReceivingWorksheetLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * ReceivingWorksheetLineItem Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceivingWorksheetLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'receivingWorksheetLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
        'sku2' => 'string',
        'full_description' => 'string',
        'ordered_qty' => 'int',
        'prev_received_qty' => 'int',
        'unreceived_qty' => 'int',
        'receiving_qty' => 'int',
        'unit_code' => 'string',
        'wrap_code' => 'string',
        'units_per_wrap' => 'int',
        'units_per_case' => 'int',
        'quantity_per_inner_pack' => 'int',
        'quantity_per_pallet' => 'int',
        'weight_per_wrap' => 'float',
        'weight_per_case' => 'float',
        'production_lot' => 'string',
        'product_id_tag' => 'string',
        'revision_date' => 'string',
        'expiration_date' => '\DateTime',
        'origin' => 'string',
        'carton_length' => 'float',
        'carton_width' => 'float',
        'carton_height' => 'float',
        'put_away_plans' => '\Infoplus\Infoplus\Model\ReceivingWorksheetPutAwayPlan[]',
        'quantity' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => null,
        'sku2' => null,
        'full_description' => null,
        'ordered_qty' => 'int32',
        'prev_received_qty' => 'int32',
        'unreceived_qty' => 'int32',
        'receiving_qty' => 'int32',
        'unit_code' => null,
        'wrap_code' => null,
        'units_per_wrap' => 'int32',
        'units_per_case' => 'int32',
        'quantity_per_inner_pack' => 'int32',
        'quantity_per_pallet' => 'int32',
        'weight_per_wrap' => null,
        'weight_per_case' => null,
        'production_lot' => null,
        'product_id_tag' => null,
        'revision_date' => null,
        'expiration_date' => 'date-time',
        'origin' => null,
        'carton_length' => null,
        'carton_width' => null,
        'carton_height' => null,
        'put_away_plans' => null,
        'quantity' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'sku2' => 'sku2',
        'full_description' => 'fullDescription',
        'ordered_qty' => 'orderedQty',
        'prev_received_qty' => 'prevReceivedQty',
        'unreceived_qty' => 'unreceivedQty',
        'receiving_qty' => 'receivingQty',
        'unit_code' => 'unitCode',
        'wrap_code' => 'wrapCode',
        'units_per_wrap' => 'unitsPerWrap',
        'units_per_case' => 'unitsPerCase',
        'quantity_per_inner_pack' => 'quantityPerInnerPack',
        'quantity_per_pallet' => 'quantityPerPallet',
        'weight_per_wrap' => 'weightPerWrap',
        'weight_per_case' => 'weightPerCase',
        'production_lot' => 'productionLot',
        'product_id_tag' => 'productIdTag',
        'revision_date' => 'revisionDate',
        'expiration_date' => 'expirationDate',
        'origin' => 'origin',
        'carton_length' => 'cartonLength',
        'carton_width' => 'cartonWidth',
        'carton_height' => 'cartonHeight',
        'put_away_plans' => 'putAwayPlans',
        'quantity' => 'quantity',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'sku2' => 'setSku2',
        'full_description' => 'setFullDescription',
        'ordered_qty' => 'setOrderedQty',
        'prev_received_qty' => 'setPrevReceivedQty',
        'unreceived_qty' => 'setUnreceivedQty',
        'receiving_qty' => 'setReceivingQty',
        'unit_code' => 'setUnitCode',
        'wrap_code' => 'setWrapCode',
        'units_per_wrap' => 'setUnitsPerWrap',
        'units_per_case' => 'setUnitsPerCase',
        'quantity_per_inner_pack' => 'setQuantityPerInnerPack',
        'quantity_per_pallet' => 'setQuantityPerPallet',
        'weight_per_wrap' => 'setWeightPerWrap',
        'weight_per_case' => 'setWeightPerCase',
        'production_lot' => 'setProductionLot',
        'product_id_tag' => 'setProductIdTag',
        'revision_date' => 'setRevisionDate',
        'expiration_date' => 'setExpirationDate',
        'origin' => 'setOrigin',
        'carton_length' => 'setCartonLength',
        'carton_width' => 'setCartonWidth',
        'carton_height' => 'setCartonHeight',
        'put_away_plans' => 'setPutAwayPlans',
        'quantity' => 'setQuantity',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'sku2' => 'getSku2',
        'full_description' => 'getFullDescription',
        'ordered_qty' => 'getOrderedQty',
        'prev_received_qty' => 'getPrevReceivedQty',
        'unreceived_qty' => 'getUnreceivedQty',
        'receiving_qty' => 'getReceivingQty',
        'unit_code' => 'getUnitCode',
        'wrap_code' => 'getWrapCode',
        'units_per_wrap' => 'getUnitsPerWrap',
        'units_per_case' => 'getUnitsPerCase',
        'quantity_per_inner_pack' => 'getQuantityPerInnerPack',
        'quantity_per_pallet' => 'getQuantityPerPallet',
        'weight_per_wrap' => 'getWeightPerWrap',
        'weight_per_case' => 'getWeightPerCase',
        'production_lot' => 'getProductionLot',
        'product_id_tag' => 'getProductIdTag',
        'revision_date' => 'getRevisionDate',
        'expiration_date' => 'getExpirationDate',
        'origin' => 'getOrigin',
        'carton_length' => 'getCartonLength',
        'carton_width' => 'getCartonWidth',
        'carton_height' => 'getCartonHeight',
        'put_away_plans' => 'getPutAwayPlans',
        'quantity' => 'getQuantity',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['sku2'] = isset($data['sku2']) ? $data['sku2'] : null;
        $this->container['full_description'] = isset($data['full_description']) ? $data['full_description'] : null;
        $this->container['ordered_qty'] = isset($data['ordered_qty']) ? $data['ordered_qty'] : null;
        $this->container['prev_received_qty'] = isset($data['prev_received_qty']) ? $data['prev_received_qty'] : null;
        $this->container['unreceived_qty'] = isset($data['unreceived_qty']) ? $data['unreceived_qty'] : null;
        $this->container['receiving_qty'] = isset($data['receiving_qty']) ? $data['receiving_qty'] : null;
        $this->container['unit_code'] = isset($data['unit_code']) ? $data['unit_code'] : null;
        $this->container['wrap_code'] = isset($data['wrap_code']) ? $data['wrap_code'] : null;
        $this->container['units_per_wrap'] = isset($data['units_per_wrap']) ? $data['units_per_wrap'] : null;
        $this->container['units_per_case'] = isset($data['units_per_case']) ? $data['units_per_case'] : null;
        $this->container['quantity_per_inner_pack'] = isset($data['quantity_per_inner_pack']) ? $data['quantity_per_inner_pack'] : null;
        $this->container['quantity_per_pallet'] = isset($data['quantity_per_pallet']) ? $data['quantity_per_pallet'] : null;
        $this->container['weight_per_wrap'] = isset($data['weight_per_wrap']) ? $data['weight_per_wrap'] : null;
        $this->container['weight_per_case'] = isset($data['weight_per_case']) ? $data['weight_per_case'] : null;
        $this->container['production_lot'] = isset($data['production_lot']) ? $data['production_lot'] : null;
        $this->container['product_id_tag'] = isset($data['product_id_tag']) ? $data['product_id_tag'] : null;
        $this->container['revision_date'] = isset($data['revision_date']) ? $data['revision_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['carton_length'] = isset($data['carton_length']) ? $data['carton_length'] : null;
        $this->container['carton_width'] = isset($data['carton_width']) ? $data['carton_width'] : null;
        $this->container['carton_height'] = isset($data['carton_height']) ? $data['carton_height'] : null;
        $this->container['put_away_plans'] = isset($data['put_away_plans']) ? $data['put_away_plans'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receiving_qty'] === null) {
            $invalidProperties[] = "'receiving_qty' can't be null";
        }
        if ($this->container['weight_per_wrap'] === null) {
            $invalidProperties[] = "'weight_per_wrap' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['receiving_qty'] === null) {
            return false;
        }
        if ($this->container['weight_per_wrap'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets sku2
     *
     * @return string
     */
    public function getSku2()
    {
        return $this->container['sku2'];
    }

    /**
     * Sets sku2
     *
     * @param string $sku2 sku2
     *
     * @return $this
     */
    public function setSku2($sku2)
    {
        $this->container['sku2'] = $sku2;

        return $this;
    }

    /**
     * Gets full_description
     *
     * @return string
     */
    public function getFullDescription()
    {
        return $this->container['full_description'];
    }

    /**
     * Sets full_description
     *
     * @param string $full_description full_description
     *
     * @return $this
     */
    public function setFullDescription($full_description)
    {
        $this->container['full_description'] = $full_description;

        return $this;
    }

    /**
     * Gets ordered_qty
     *
     * @return int
     */
    public function getOrderedQty()
    {
        return $this->container['ordered_qty'];
    }

    /**
     * Sets ordered_qty
     *
     * @param int $ordered_qty ordered_qty
     *
     * @return $this
     */
    public function setOrderedQty($ordered_qty)
    {
        $this->container['ordered_qty'] = $ordered_qty;

        return $this;
    }

    /**
     * Gets prev_received_qty
     *
     * @return int
     */
    public function getPrevReceivedQty()
    {
        return $this->container['prev_received_qty'];
    }

    /**
     * Sets prev_received_qty
     *
     * @param int $prev_received_qty prev_received_qty
     *
     * @return $this
     */
    public function setPrevReceivedQty($prev_received_qty)
    {
        $this->container['prev_received_qty'] = $prev_received_qty;

        return $this;
    }

    /**
     * Gets unreceived_qty
     *
     * @return int
     */
    public function getUnreceivedQty()
    {
        return $this->container['unreceived_qty'];
    }

    /**
     * Sets unreceived_qty
     *
     * @param int $unreceived_qty unreceived_qty
     *
     * @return $this
     */
    public function setUnreceivedQty($unreceived_qty)
    {
        $this->container['unreceived_qty'] = $unreceived_qty;

        return $this;
    }

    /**
     * Gets receiving_qty
     *
     * @return int
     */
    public function getReceivingQty()
    {
        return $this->container['receiving_qty'];
    }

    /**
     * Sets receiving_qty
     *
     * @param int $receiving_qty receiving_qty
     *
     * @return $this
     */
    public function setReceivingQty($receiving_qty)
    {
        $this->container['receiving_qty'] = $receiving_qty;

        return $this;
    }

    /**
     * Gets unit_code
     *
     * @return string
     */
    public function getUnitCode()
    {
        return $this->container['unit_code'];
    }

    /**
     * Sets unit_code
     *
     * @param string $unit_code unit_code
     *
     * @return $this
     */
    public function setUnitCode($unit_code)
    {
        $this->container['unit_code'] = $unit_code;

        return $this;
    }

    /**
     * Gets wrap_code
     *
     * @return string
     */
    public function getWrapCode()
    {
        return $this->container['wrap_code'];
    }

    /**
     * Sets wrap_code
     *
     * @param string $wrap_code wrap_code
     *
     * @return $this
     */
    public function setWrapCode($wrap_code)
    {
        $this->container['wrap_code'] = $wrap_code;

        return $this;
    }

    /**
     * Gets units_per_wrap
     *
     * @return int
     */
    public function getUnitsPerWrap()
    {
        return $this->container['units_per_wrap'];
    }

    /**
     * Sets units_per_wrap
     *
     * @param int $units_per_wrap units_per_wrap
     *
     * @return $this
     */
    public function setUnitsPerWrap($units_per_wrap)
    {
        $this->container['units_per_wrap'] = $units_per_wrap;

        return $this;
    }

    /**
     * Gets units_per_case
     *
     * @return int
     */
    public function getUnitsPerCase()
    {
        return $this->container['units_per_case'];
    }

    /**
     * Sets units_per_case
     *
     * @param int $units_per_case units_per_case
     *
     * @return $this
     */
    public function setUnitsPerCase($units_per_case)
    {
        $this->container['units_per_case'] = $units_per_case;

        return $this;
    }

    /**
     * Gets quantity_per_inner_pack
     *
     * @return int
     */
    public function getQuantityPerInnerPack()
    {
        return $this->container['quantity_per_inner_pack'];
    }

    /**
     * Sets quantity_per_inner_pack
     *
     * @param int $quantity_per_inner_pack quantity_per_inner_pack
     *
     * @return $this
     */
    public function setQuantityPerInnerPack($quantity_per_inner_pack)
    {
        $this->container['quantity_per_inner_pack'] = $quantity_per_inner_pack;

        return $this;
    }

    /**
     * Gets quantity_per_pallet
     *
     * @return int
     */
    public function getQuantityPerPallet()
    {
        return $this->container['quantity_per_pallet'];
    }

    /**
     * Sets quantity_per_pallet
     *
     * @param int $quantity_per_pallet quantity_per_pallet
     *
     * @return $this
     */
    public function setQuantityPerPallet($quantity_per_pallet)
    {
        $this->container['quantity_per_pallet'] = $quantity_per_pallet;

        return $this;
    }

    /**
     * Gets weight_per_wrap
     *
     * @return float
     */
    public function getWeightPerWrap()
    {
        return $this->container['weight_per_wrap'];
    }

    /**
     * Sets weight_per_wrap
     *
     * @param float $weight_per_wrap weight_per_wrap
     *
     * @return $this
     */
    public function setWeightPerWrap($weight_per_wrap)
    {
        $this->container['weight_per_wrap'] = $weight_per_wrap;

        return $this;
    }

    /**
     * Gets weight_per_case
     *
     * @return float
     */
    public function getWeightPerCase()
    {
        return $this->container['weight_per_case'];
    }

    /**
     * Sets weight_per_case
     *
     * @param float $weight_per_case weight_per_case
     *
     * @return $this
     */
    public function setWeightPerCase($weight_per_case)
    {
        $this->container['weight_per_case'] = $weight_per_case;

        return $this;
    }

    /**
     * Gets production_lot
     *
     * @return string
     */
    public function getProductionLot()
    {
        return $this->container['production_lot'];
    }

    /**
     * Sets production_lot
     *
     * @param string $production_lot production_lot
     *
     * @return $this
     */
    public function setProductionLot($production_lot)
    {
        $this->container['production_lot'] = $production_lot;

        return $this;
    }

    /**
     * Gets product_id_tag
     *
     * @return string
     */
    public function getProductIdTag()
    {
        return $this->container['product_id_tag'];
    }

    /**
     * Sets product_id_tag
     *
     * @param string $product_id_tag product_id_tag
     *
     * @return $this
     */
    public function setProductIdTag($product_id_tag)
    {
        $this->container['product_id_tag'] = $product_id_tag;

        return $this;
    }

    /**
     * Gets revision_date
     *
     * @return string
     */
    public function getRevisionDate()
    {
        return $this->container['revision_date'];
    }

    /**
     * Sets revision_date
     *
     * @param string $revision_date revision_date
     *
     * @return $this
     */
    public function setRevisionDate($revision_date)
    {
        $this->container['revision_date'] = $revision_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets carton_length
     *
     * @return float
     */
    public function getCartonLength()
    {
        return $this->container['carton_length'];
    }

    /**
     * Sets carton_length
     *
     * @param float $carton_length carton_length
     *
     * @return $this
     */
    public function setCartonLength($carton_length)
    {
        $this->container['carton_length'] = $carton_length;

        return $this;
    }

    /**
     * Gets carton_width
     *
     * @return float
     */
    public function getCartonWidth()
    {
        return $this->container['carton_width'];
    }

    /**
     * Sets carton_width
     *
     * @param float $carton_width carton_width
     *
     * @return $this
     */
    public function setCartonWidth($carton_width)
    {
        $this->container['carton_width'] = $carton_width;

        return $this;
    }

    /**
     * Gets carton_height
     *
     * @return float
     */
    public function getCartonHeight()
    {
        return $this->container['carton_height'];
    }

    /**
     * Sets carton_height
     *
     * @param float $carton_height carton_height
     *
     * @return $this
     */
    public function setCartonHeight($carton_height)
    {
        $this->container['carton_height'] = $carton_height;

        return $this;
    }

    /**
     * Gets put_away_plans
     *
     * @return \Infoplus\Infoplus\Model\ReceivingWorksheetPutAwayPlan[]
     */
    public function getPutAwayPlans()
    {
        return $this->container['put_away_plans'];
    }

    /**
     * Sets put_away_plans
     *
     * @param \Infoplus\Infoplus\Model\ReceivingWorksheetPutAwayPlan[] $put_away_plans put_away_plans
     *
     * @return $this
     */
    public function setPutAwayPlans($put_away_plans)
    {
        $this->container['put_away_plans'] = $put_away_plans;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


