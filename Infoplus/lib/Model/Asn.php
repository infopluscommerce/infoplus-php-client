<?php
/**
 * Asn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * Asn Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Asn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'asn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'lob_id' => 'int',
        'po_no' => 'string',
        'vendor_id' => 'int',
        'warehouse_id' => 'int',
        'order_date' => '\DateTime',
        'type' => 'string',
        'billing_name' => 'string',
        'billing_attention' => 'string',
        'billing_street1' => 'string',
        'billing_street2' => 'string',
        'billing_city' => 'string',
        'billing_state' => 'string',
        'billing_zip_code' => 'string',
        'billing_phone' => 'string',
        'ship_to_name' => 'string',
        'ship_to_address' => 'string',
        'ship_to_street1' => 'string',
        'ship_to_street2' => 'string',
        'ship_to_city' => 'string',
        'ship_to_state' => 'string',
        'ship_to_zip_code' => 'string',
        'ship_to_phone' => 'string',
        'corporate_name' => 'string',
        'corporate_attention' => 'string',
        'corporate_street1' => 'string',
        'corporate_street2' => 'string',
        'corporate_city' => 'string',
        'corporate_state' => 'string',
        'corporate_zip_code' => 'string',
        'account_code' => 'string',
        'buyer' => 'int',
        'carrier' => 'int',
        'conf_to' => 'string',
        'fob' => 'string',
        'printed' => 'string',
        'project_no' => 'int',
        'remarks' => 'string',
        'request_by' => 'string',
        'terms' => 'string',
        'used_by' => 'string',
        'line_items' => '\Infoplus\Infoplus\Model\ItemReceipt[]',
        'status' => 'string',
        'transfer_order_id' => 'float',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'lob_id' => 'int32',
        'po_no' => null,
        'vendor_id' => 'int32',
        'warehouse_id' => 'int32',
        'order_date' => 'date-time',
        'type' => null,
        'billing_name' => null,
        'billing_attention' => null,
        'billing_street1' => null,
        'billing_street2' => null,
        'billing_city' => null,
        'billing_state' => null,
        'billing_zip_code' => null,
        'billing_phone' => null,
        'ship_to_name' => null,
        'ship_to_address' => null,
        'ship_to_street1' => null,
        'ship_to_street2' => null,
        'ship_to_city' => null,
        'ship_to_state' => null,
        'ship_to_zip_code' => null,
        'ship_to_phone' => null,
        'corporate_name' => null,
        'corporate_attention' => null,
        'corporate_street1' => null,
        'corporate_street2' => null,
        'corporate_city' => null,
        'corporate_state' => null,
        'corporate_zip_code' => null,
        'account_code' => null,
        'buyer' => 'int32',
        'carrier' => 'int32',
        'conf_to' => null,
        'fob' => null,
        'printed' => null,
        'project_no' => 'int32',
        'remarks' => null,
        'request_by' => null,
        'terms' => null,
        'used_by' => null,
        'line_items' => null,
        'status' => null,
        'transfer_order_id' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'lob_id' => 'lobId',
        'po_no' => 'poNo',
        'vendor_id' => 'vendorId',
        'warehouse_id' => 'warehouseId',
        'order_date' => 'orderDate',
        'type' => 'type',
        'billing_name' => 'billingName',
        'billing_attention' => 'billingAttention',
        'billing_street1' => 'billingStreet1',
        'billing_street2' => 'billingStreet2',
        'billing_city' => 'billingCity',
        'billing_state' => 'billingState',
        'billing_zip_code' => 'billingZipCode',
        'billing_phone' => 'billingPhone',
        'ship_to_name' => 'shipToName',
        'ship_to_address' => 'shipToAddress',
        'ship_to_street1' => 'shipToStreet1',
        'ship_to_street2' => 'shipToStreet2',
        'ship_to_city' => 'shipToCity',
        'ship_to_state' => 'shipToState',
        'ship_to_zip_code' => 'shipToZipCode',
        'ship_to_phone' => 'shipToPhone',
        'corporate_name' => 'corporateName',
        'corporate_attention' => 'corporateAttention',
        'corporate_street1' => 'corporateStreet1',
        'corporate_street2' => 'corporateStreet2',
        'corporate_city' => 'corporateCity',
        'corporate_state' => 'corporateState',
        'corporate_zip_code' => 'corporateZipCode',
        'account_code' => 'accountCode',
        'buyer' => 'buyer',
        'carrier' => 'carrier',
        'conf_to' => 'confTo',
        'fob' => 'fob',
        'printed' => 'printed',
        'project_no' => 'projectNo',
        'remarks' => 'remarks',
        'request_by' => 'requestBy',
        'terms' => 'terms',
        'used_by' => 'usedBy',
        'line_items' => 'lineItems',
        'status' => 'status',
        'transfer_order_id' => 'transferOrderId',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'lob_id' => 'setLobId',
        'po_no' => 'setPoNo',
        'vendor_id' => 'setVendorId',
        'warehouse_id' => 'setWarehouseId',
        'order_date' => 'setOrderDate',
        'type' => 'setType',
        'billing_name' => 'setBillingName',
        'billing_attention' => 'setBillingAttention',
        'billing_street1' => 'setBillingStreet1',
        'billing_street2' => 'setBillingStreet2',
        'billing_city' => 'setBillingCity',
        'billing_state' => 'setBillingState',
        'billing_zip_code' => 'setBillingZipCode',
        'billing_phone' => 'setBillingPhone',
        'ship_to_name' => 'setShipToName',
        'ship_to_address' => 'setShipToAddress',
        'ship_to_street1' => 'setShipToStreet1',
        'ship_to_street2' => 'setShipToStreet2',
        'ship_to_city' => 'setShipToCity',
        'ship_to_state' => 'setShipToState',
        'ship_to_zip_code' => 'setShipToZipCode',
        'ship_to_phone' => 'setShipToPhone',
        'corporate_name' => 'setCorporateName',
        'corporate_attention' => 'setCorporateAttention',
        'corporate_street1' => 'setCorporateStreet1',
        'corporate_street2' => 'setCorporateStreet2',
        'corporate_city' => 'setCorporateCity',
        'corporate_state' => 'setCorporateState',
        'corporate_zip_code' => 'setCorporateZipCode',
        'account_code' => 'setAccountCode',
        'buyer' => 'setBuyer',
        'carrier' => 'setCarrier',
        'conf_to' => 'setConfTo',
        'fob' => 'setFob',
        'printed' => 'setPrinted',
        'project_no' => 'setProjectNo',
        'remarks' => 'setRemarks',
        'request_by' => 'setRequestBy',
        'terms' => 'setTerms',
        'used_by' => 'setUsedBy',
        'line_items' => 'setLineItems',
        'status' => 'setStatus',
        'transfer_order_id' => 'setTransferOrderId',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'lob_id' => 'getLobId',
        'po_no' => 'getPoNo',
        'vendor_id' => 'getVendorId',
        'warehouse_id' => 'getWarehouseId',
        'order_date' => 'getOrderDate',
        'type' => 'getType',
        'billing_name' => 'getBillingName',
        'billing_attention' => 'getBillingAttention',
        'billing_street1' => 'getBillingStreet1',
        'billing_street2' => 'getBillingStreet2',
        'billing_city' => 'getBillingCity',
        'billing_state' => 'getBillingState',
        'billing_zip_code' => 'getBillingZipCode',
        'billing_phone' => 'getBillingPhone',
        'ship_to_name' => 'getShipToName',
        'ship_to_address' => 'getShipToAddress',
        'ship_to_street1' => 'getShipToStreet1',
        'ship_to_street2' => 'getShipToStreet2',
        'ship_to_city' => 'getShipToCity',
        'ship_to_state' => 'getShipToState',
        'ship_to_zip_code' => 'getShipToZipCode',
        'ship_to_phone' => 'getShipToPhone',
        'corporate_name' => 'getCorporateName',
        'corporate_attention' => 'getCorporateAttention',
        'corporate_street1' => 'getCorporateStreet1',
        'corporate_street2' => 'getCorporateStreet2',
        'corporate_city' => 'getCorporateCity',
        'corporate_state' => 'getCorporateState',
        'corporate_zip_code' => 'getCorporateZipCode',
        'account_code' => 'getAccountCode',
        'buyer' => 'getBuyer',
        'carrier' => 'getCarrier',
        'conf_to' => 'getConfTo',
        'fob' => 'getFob',
        'printed' => 'getPrinted',
        'project_no' => 'getProjectNo',
        'remarks' => 'getRemarks',
        'request_by' => 'getRequestBy',
        'terms' => 'getTerms',
        'used_by' => 'getUsedBy',
        'line_items' => 'getLineItems',
        'status' => 'getStatus',
        'transfer_order_id' => 'getTransferOrderId',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['po_no'] = isset($data['po_no']) ? $data['po_no'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['billing_name'] = isset($data['billing_name']) ? $data['billing_name'] : null;
        $this->container['billing_attention'] = isset($data['billing_attention']) ? $data['billing_attention'] : null;
        $this->container['billing_street1'] = isset($data['billing_street1']) ? $data['billing_street1'] : null;
        $this->container['billing_street2'] = isset($data['billing_street2']) ? $data['billing_street2'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_state'] = isset($data['billing_state']) ? $data['billing_state'] : null;
        $this->container['billing_zip_code'] = isset($data['billing_zip_code']) ? $data['billing_zip_code'] : null;
        $this->container['billing_phone'] = isset($data['billing_phone']) ? $data['billing_phone'] : null;
        $this->container['ship_to_name'] = isset($data['ship_to_name']) ? $data['ship_to_name'] : null;
        $this->container['ship_to_address'] = isset($data['ship_to_address']) ? $data['ship_to_address'] : null;
        $this->container['ship_to_street1'] = isset($data['ship_to_street1']) ? $data['ship_to_street1'] : null;
        $this->container['ship_to_street2'] = isset($data['ship_to_street2']) ? $data['ship_to_street2'] : null;
        $this->container['ship_to_city'] = isset($data['ship_to_city']) ? $data['ship_to_city'] : null;
        $this->container['ship_to_state'] = isset($data['ship_to_state']) ? $data['ship_to_state'] : null;
        $this->container['ship_to_zip_code'] = isset($data['ship_to_zip_code']) ? $data['ship_to_zip_code'] : null;
        $this->container['ship_to_phone'] = isset($data['ship_to_phone']) ? $data['ship_to_phone'] : null;
        $this->container['corporate_name'] = isset($data['corporate_name']) ? $data['corporate_name'] : null;
        $this->container['corporate_attention'] = isset($data['corporate_attention']) ? $data['corporate_attention'] : null;
        $this->container['corporate_street1'] = isset($data['corporate_street1']) ? $data['corporate_street1'] : null;
        $this->container['corporate_street2'] = isset($data['corporate_street2']) ? $data['corporate_street2'] : null;
        $this->container['corporate_city'] = isset($data['corporate_city']) ? $data['corporate_city'] : null;
        $this->container['corporate_state'] = isset($data['corporate_state']) ? $data['corporate_state'] : null;
        $this->container['corporate_zip_code'] = isset($data['corporate_zip_code']) ? $data['corporate_zip_code'] : null;
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['conf_to'] = isset($data['conf_to']) ? $data['conf_to'] : null;
        $this->container['fob'] = isset($data['fob']) ? $data['fob'] : null;
        $this->container['printed'] = isset($data['printed']) ? $data['printed'] : null;
        $this->container['project_no'] = isset($data['project_no']) ? $data['project_no'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['request_by'] = isset($data['request_by']) ? $data['request_by'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['used_by'] = isset($data['used_by']) ? $data['used_by'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transfer_order_id'] = isset($data['transfer_order_id']) ? $data['transfer_order_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['po_no'] === null) {
            $invalidProperties[] = "'po_no' can't be null";
        }
        if ($this->container['vendor_id'] === null) {
            $invalidProperties[] = "'vendor_id' can't be null";
        }
        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['po_no'] === null) {
            return false;
        }
        if ($this->container['vendor_id'] === null) {
            return false;
        }
        if ($this->container['warehouse_id'] === null) {
            return false;
        }
        if ($this->container['order_date'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets po_no
     *
     * @return string
     */
    public function getPoNo()
    {
        return $this->container['po_no'];
    }

    /**
     * Sets po_no
     *
     * @param string $po_no po_no
     *
     * @return $this
     */
    public function setPoNo($po_no)
    {
        $this->container['po_no'] = $po_no;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets billing_name
     *
     * @return string
     */
    public function getBillingName()
    {
        return $this->container['billing_name'];
    }

    /**
     * Sets billing_name
     *
     * @param string $billing_name billing_name
     *
     * @return $this
     */
    public function setBillingName($billing_name)
    {
        $this->container['billing_name'] = $billing_name;

        return $this;
    }

    /**
     * Gets billing_attention
     *
     * @return string
     */
    public function getBillingAttention()
    {
        return $this->container['billing_attention'];
    }

    /**
     * Sets billing_attention
     *
     * @param string $billing_attention billing_attention
     *
     * @return $this
     */
    public function setBillingAttention($billing_attention)
    {
        $this->container['billing_attention'] = $billing_attention;

        return $this;
    }

    /**
     * Gets billing_street1
     *
     * @return string
     */
    public function getBillingStreet1()
    {
        return $this->container['billing_street1'];
    }

    /**
     * Sets billing_street1
     *
     * @param string $billing_street1 billing_street1
     *
     * @return $this
     */
    public function setBillingStreet1($billing_street1)
    {
        $this->container['billing_street1'] = $billing_street1;

        return $this;
    }

    /**
     * Gets billing_street2
     *
     * @return string
     */
    public function getBillingStreet2()
    {
        return $this->container['billing_street2'];
    }

    /**
     * Sets billing_street2
     *
     * @param string $billing_street2 billing_street2
     *
     * @return $this
     */
    public function setBillingStreet2($billing_street2)
    {
        $this->container['billing_street2'] = $billing_street2;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string $billing_city billing_city
     *
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_state
     *
     * @return string
     */
    public function getBillingState()
    {
        return $this->container['billing_state'];
    }

    /**
     * Sets billing_state
     *
     * @param string $billing_state billing_state
     *
     * @return $this
     */
    public function setBillingState($billing_state)
    {
        $this->container['billing_state'] = $billing_state;

        return $this;
    }

    /**
     * Gets billing_zip_code
     *
     * @return string
     */
    public function getBillingZipCode()
    {
        return $this->container['billing_zip_code'];
    }

    /**
     * Sets billing_zip_code
     *
     * @param string $billing_zip_code billing_zip_code
     *
     * @return $this
     */
    public function setBillingZipCode($billing_zip_code)
    {
        $this->container['billing_zip_code'] = $billing_zip_code;

        return $this;
    }

    /**
     * Gets billing_phone
     *
     * @return string
     */
    public function getBillingPhone()
    {
        return $this->container['billing_phone'];
    }

    /**
     * Sets billing_phone
     *
     * @param string $billing_phone billing_phone
     *
     * @return $this
     */
    public function setBillingPhone($billing_phone)
    {
        $this->container['billing_phone'] = $billing_phone;

        return $this;
    }

    /**
     * Gets ship_to_name
     *
     * @return string
     */
    public function getShipToName()
    {
        return $this->container['ship_to_name'];
    }

    /**
     * Sets ship_to_name
     *
     * @param string $ship_to_name ship_to_name
     *
     * @return $this
     */
    public function setShipToName($ship_to_name)
    {
        $this->container['ship_to_name'] = $ship_to_name;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return string
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param string $ship_to_address ship_to_address
     *
     * @return $this
     */
    public function setShipToAddress($ship_to_address)
    {
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets ship_to_street1
     *
     * @return string
     */
    public function getShipToStreet1()
    {
        return $this->container['ship_to_street1'];
    }

    /**
     * Sets ship_to_street1
     *
     * @param string $ship_to_street1 ship_to_street1
     *
     * @return $this
     */
    public function setShipToStreet1($ship_to_street1)
    {
        $this->container['ship_to_street1'] = $ship_to_street1;

        return $this;
    }

    /**
     * Gets ship_to_street2
     *
     * @return string
     */
    public function getShipToStreet2()
    {
        return $this->container['ship_to_street2'];
    }

    /**
     * Sets ship_to_street2
     *
     * @param string $ship_to_street2 ship_to_street2
     *
     * @return $this
     */
    public function setShipToStreet2($ship_to_street2)
    {
        $this->container['ship_to_street2'] = $ship_to_street2;

        return $this;
    }

    /**
     * Gets ship_to_city
     *
     * @return string
     */
    public function getShipToCity()
    {
        return $this->container['ship_to_city'];
    }

    /**
     * Sets ship_to_city
     *
     * @param string $ship_to_city ship_to_city
     *
     * @return $this
     */
    public function setShipToCity($ship_to_city)
    {
        $this->container['ship_to_city'] = $ship_to_city;

        return $this;
    }

    /**
     * Gets ship_to_state
     *
     * @return string
     */
    public function getShipToState()
    {
        return $this->container['ship_to_state'];
    }

    /**
     * Sets ship_to_state
     *
     * @param string $ship_to_state ship_to_state
     *
     * @return $this
     */
    public function setShipToState($ship_to_state)
    {
        $this->container['ship_to_state'] = $ship_to_state;

        return $this;
    }

    /**
     * Gets ship_to_zip_code
     *
     * @return string
     */
    public function getShipToZipCode()
    {
        return $this->container['ship_to_zip_code'];
    }

    /**
     * Sets ship_to_zip_code
     *
     * @param string $ship_to_zip_code ship_to_zip_code
     *
     * @return $this
     */
    public function setShipToZipCode($ship_to_zip_code)
    {
        $this->container['ship_to_zip_code'] = $ship_to_zip_code;

        return $this;
    }

    /**
     * Gets ship_to_phone
     *
     * @return string
     */
    public function getShipToPhone()
    {
        return $this->container['ship_to_phone'];
    }

    /**
     * Sets ship_to_phone
     *
     * @param string $ship_to_phone ship_to_phone
     *
     * @return $this
     */
    public function setShipToPhone($ship_to_phone)
    {
        $this->container['ship_to_phone'] = $ship_to_phone;

        return $this;
    }

    /**
     * Gets corporate_name
     *
     * @return string
     */
    public function getCorporateName()
    {
        return $this->container['corporate_name'];
    }

    /**
     * Sets corporate_name
     *
     * @param string $corporate_name corporate_name
     *
     * @return $this
     */
    public function setCorporateName($corporate_name)
    {
        $this->container['corporate_name'] = $corporate_name;

        return $this;
    }

    /**
     * Gets corporate_attention
     *
     * @return string
     */
    public function getCorporateAttention()
    {
        return $this->container['corporate_attention'];
    }

    /**
     * Sets corporate_attention
     *
     * @param string $corporate_attention corporate_attention
     *
     * @return $this
     */
    public function setCorporateAttention($corporate_attention)
    {
        $this->container['corporate_attention'] = $corporate_attention;

        return $this;
    }

    /**
     * Gets corporate_street1
     *
     * @return string
     */
    public function getCorporateStreet1()
    {
        return $this->container['corporate_street1'];
    }

    /**
     * Sets corporate_street1
     *
     * @param string $corporate_street1 corporate_street1
     *
     * @return $this
     */
    public function setCorporateStreet1($corporate_street1)
    {
        $this->container['corporate_street1'] = $corporate_street1;

        return $this;
    }

    /**
     * Gets corporate_street2
     *
     * @return string
     */
    public function getCorporateStreet2()
    {
        return $this->container['corporate_street2'];
    }

    /**
     * Sets corporate_street2
     *
     * @param string $corporate_street2 corporate_street2
     *
     * @return $this
     */
    public function setCorporateStreet2($corporate_street2)
    {
        $this->container['corporate_street2'] = $corporate_street2;

        return $this;
    }

    /**
     * Gets corporate_city
     *
     * @return string
     */
    public function getCorporateCity()
    {
        return $this->container['corporate_city'];
    }

    /**
     * Sets corporate_city
     *
     * @param string $corporate_city corporate_city
     *
     * @return $this
     */
    public function setCorporateCity($corporate_city)
    {
        $this->container['corporate_city'] = $corporate_city;

        return $this;
    }

    /**
     * Gets corporate_state
     *
     * @return string
     */
    public function getCorporateState()
    {
        return $this->container['corporate_state'];
    }

    /**
     * Sets corporate_state
     *
     * @param string $corporate_state corporate_state
     *
     * @return $this
     */
    public function setCorporateState($corporate_state)
    {
        $this->container['corporate_state'] = $corporate_state;

        return $this;
    }

    /**
     * Gets corporate_zip_code
     *
     * @return string
     */
    public function getCorporateZipCode()
    {
        return $this->container['corporate_zip_code'];
    }

    /**
     * Sets corporate_zip_code
     *
     * @param string $corporate_zip_code corporate_zip_code
     *
     * @return $this
     */
    public function setCorporateZipCode($corporate_zip_code)
    {
        $this->container['corporate_zip_code'] = $corporate_zip_code;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string $account_code account_code
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return int
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param int $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return int
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param int $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets conf_to
     *
     * @return string
     */
    public function getConfTo()
    {
        return $this->container['conf_to'];
    }

    /**
     * Sets conf_to
     *
     * @param string $conf_to conf_to
     *
     * @return $this
     */
    public function setConfTo($conf_to)
    {
        $this->container['conf_to'] = $conf_to;

        return $this;
    }

    /**
     * Gets fob
     *
     * @return string
     */
    public function getFob()
    {
        return $this->container['fob'];
    }

    /**
     * Sets fob
     *
     * @param string $fob fob
     *
     * @return $this
     */
    public function setFob($fob)
    {
        $this->container['fob'] = $fob;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return string
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param string $printed printed
     *
     * @return $this
     */
    public function setPrinted($printed)
    {
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets project_no
     *
     * @return int
     */
    public function getProjectNo()
    {
        return $this->container['project_no'];
    }

    /**
     * Sets project_no
     *
     * @param int $project_no project_no
     *
     * @return $this
     */
    public function setProjectNo($project_no)
    {
        $this->container['project_no'] = $project_no;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks remarks
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets request_by
     *
     * @return string
     */
    public function getRequestBy()
    {
        return $this->container['request_by'];
    }

    /**
     * Sets request_by
     *
     * @param string $request_by request_by
     *
     * @return $this
     */
    public function setRequestBy($request_by)
    {
        $this->container['request_by'] = $request_by;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets used_by
     *
     * @return string
     */
    public function getUsedBy()
    {
        return $this->container['used_by'];
    }

    /**
     * Sets used_by
     *
     * @param string $used_by used_by
     *
     * @return $this
     */
    public function setUsedBy($used_by)
    {
        $this->container['used_by'] = $used_by;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Infoplus\Infoplus\Model\ItemReceipt[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Infoplus\Infoplus\Model\ItemReceipt[] $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transfer_order_id
     *
     * @return float
     */
    public function getTransferOrderId()
    {
        return $this->container['transfer_order_id'];
    }

    /**
     * Sets transfer_order_id
     *
     * @param float $transfer_order_id transfer_order_id
     *
     * @return $this
     */
    public function setTransferOrderId($transfer_order_id)
    {
        $this->container['transfer_order_id'] = $transfer_order_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


