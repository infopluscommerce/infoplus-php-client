<?php
/**
 * Zone
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * Zone Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Zone implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'warehouse_id' => 'int',
        'name' => 'string',
        'address' => 'string',
        'is_climate_controlled' => 'bool',
        'is_food_grade' => 'bool',
        'is_secure' => 'bool',
        'is_frozen' => 'bool',
        'is_refrigerated' => 'bool',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'warehouse_id' => 'warehouseId',
        'name' => 'name',
        'address' => 'address',
        'is_climate_controlled' => 'isClimateControlled',
        'is_food_grade' => 'isFoodGrade',
        'is_secure' => 'isSecure',
        'is_frozen' => 'isFrozen',
        'is_refrigerated' => 'isRefrigerated',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'warehouse_id' => 'setWarehouseId',
        'name' => 'setName',
        'address' => 'setAddress',
        'is_climate_controlled' => 'setIsClimateControlled',
        'is_food_grade' => 'setIsFoodGrade',
        'is_secure' => 'setIsSecure',
        'is_frozen' => 'setIsFrozen',
        'is_refrigerated' => 'setIsRefrigerated',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'warehouse_id' => 'getWarehouseId',
        'name' => 'getName',
        'address' => 'getAddress',
        'is_climate_controlled' => 'getIsClimateControlled',
        'is_food_grade' => 'getIsFoodGrade',
        'is_secure' => 'getIsSecure',
        'is_frozen' => 'getIsFrozen',
        'is_refrigerated' => 'getIsRefrigerated',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $warehouse_id 
      * @var int
      */
    protected $warehouse_id;
    
    /**
      * $name 
      * @var string
      */
    protected $name;
    
    /**
      * $address 
      * @var string
      */
    protected $address;
    
    /**
      * $is_climate_controlled 
      * @var bool
      */
    protected $is_climate_controlled = false;
    
    /**
      * $is_food_grade 
      * @var bool
      */
    protected $is_food_grade = false;
    
    /**
      * $is_secure 
      * @var bool
      */
    protected $is_secure = false;
    
    /**
      * $is_frozen 
      * @var bool
      */
    protected $is_frozen = false;
    
    /**
      * $is_refrigerated 
      * @var bool
      */
    protected $is_refrigerated = false;
    
    /**
      * $create_date 
      * @var \DateTime
      */
    protected $create_date;
    
    /**
      * $modify_date 
      * @var \DateTime
      */
    protected $modify_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->warehouse_id = $data["warehouse_id"];
            $this->name = $data["name"];
            $this->address = $data["address"];
            $this->is_climate_controlled = $data["is_climate_controlled"];
            $this->is_food_grade = $data["is_food_grade"];
            $this->is_secure = $data["is_secure"];
            $this->is_frozen = $data["is_frozen"];
            $this->is_refrigerated = $data["is_refrigerated"];
            $this->create_date = $data["create_date"];
            $this->modify_date = $data["modify_date"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets warehouse_id
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->warehouse_id;
    }
  
    /**
     * Sets warehouse_id
     * @param int $warehouse_id 
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        
        $this->warehouse_id = $warehouse_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }
  
    /**
     * Sets address
     * @param string $address 
     * @return $this
     */
    public function setAddress($address)
    {
        
        $this->address = $address;
        return $this;
    }
    
    /**
     * Gets is_climate_controlled
     * @return bool
     */
    public function getIsClimateControlled()
    {
        return $this->is_climate_controlled;
    }
  
    /**
     * Sets is_climate_controlled
     * @param bool $is_climate_controlled 
     * @return $this
     */
    public function setIsClimateControlled($is_climate_controlled)
    {
        
        $this->is_climate_controlled = $is_climate_controlled;
        return $this;
    }
    
    /**
     * Gets is_food_grade
     * @return bool
     */
    public function getIsFoodGrade()
    {
        return $this->is_food_grade;
    }
  
    /**
     * Sets is_food_grade
     * @param bool $is_food_grade 
     * @return $this
     */
    public function setIsFoodGrade($is_food_grade)
    {
        
        $this->is_food_grade = $is_food_grade;
        return $this;
    }
    
    /**
     * Gets is_secure
     * @return bool
     */
    public function getIsSecure()
    {
        return $this->is_secure;
    }
  
    /**
     * Sets is_secure
     * @param bool $is_secure 
     * @return $this
     */
    public function setIsSecure($is_secure)
    {
        
        $this->is_secure = $is_secure;
        return $this;
    }
    
    /**
     * Gets is_frozen
     * @return bool
     */
    public function getIsFrozen()
    {
        return $this->is_frozen;
    }
  
    /**
     * Sets is_frozen
     * @param bool $is_frozen 
     * @return $this
     */
    public function setIsFrozen($is_frozen)
    {
        
        $this->is_frozen = $is_frozen;
        return $this;
    }
    
    /**
     * Gets is_refrigerated
     * @return bool
     */
    public function getIsRefrigerated()
    {
        return $this->is_refrigerated;
    }
  
    /**
     * Sets is_refrigerated
     * @param bool $is_refrigerated 
     * @return $this
     */
    public function setIsRefrigerated($is_refrigerated)
    {
        
        $this->is_refrigerated = $is_refrigerated;
        return $this;
    }
    
    /**
     * Gets create_date
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->create_date;
    }
  
    /**
     * Sets create_date
     * @param \DateTime $create_date 
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        
        $this->create_date = $create_date;
        return $this;
    }
    
    /**
     * Gets modify_date
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->modify_date;
    }
  
    /**
     * Sets modify_date
     * @param \DateTime $modify_date 
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        
        $this->modify_date = $modify_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
