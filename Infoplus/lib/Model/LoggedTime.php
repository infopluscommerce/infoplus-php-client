<?php
/**
 * LoggedTime
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * LoggedTime Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LoggedTime implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'duration' => 'int',
        'description' => 'string',
        'client' => 'int',
        'user_id' => 'int',
        'lob_id' => 'int',
        'warehouse_id' => 'int',
        'logged_time_type_id' => 'int',
        'app_id' => 'int'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'start' => 'start',
        'end' => 'end',
        'duration' => 'duration',
        'description' => 'description',
        'client' => 'client',
        'user_id' => 'userId',
        'lob_id' => 'lobId',
        'warehouse_id' => 'warehouseId',
        'logged_time_type_id' => 'loggedTimeTypeId',
        'app_id' => 'appId'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'start' => 'setStart',
        'end' => 'setEnd',
        'duration' => 'setDuration',
        'description' => 'setDescription',
        'client' => 'setClient',
        'user_id' => 'setUserId',
        'lob_id' => 'setLobId',
        'warehouse_id' => 'setWarehouseId',
        'logged_time_type_id' => 'setLoggedTimeTypeId',
        'app_id' => 'setAppId'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'start' => 'getStart',
        'end' => 'getEnd',
        'duration' => 'getDuration',
        'description' => 'getDescription',
        'client' => 'getClient',
        'user_id' => 'getUserId',
        'lob_id' => 'getLobId',
        'warehouse_id' => 'getWarehouseId',
        'logged_time_type_id' => 'getLoggedTimeTypeId',
        'app_id' => 'getAppId'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $create_date 
      * @var \DateTime
      */
    protected $create_date;
    
    /**
      * $modify_date 
      * @var \DateTime
      */
    protected $modify_date;
    
    /**
      * $start 
      * @var \DateTime
      */
    protected $start;
    
    /**
      * $end 
      * @var \DateTime
      */
    protected $end;
    
    /**
      * $duration 
      * @var int
      */
    protected $duration;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $client 
      * @var int
      */
    protected $client;
    
    /**
      * $user_id 
      * @var int
      */
    protected $user_id;
    
    /**
      * $lob_id 
      * @var int
      */
    protected $lob_id;
    
    /**
      * $warehouse_id 
      * @var int
      */
    protected $warehouse_id;
    
    /**
      * $logged_time_type_id 
      * @var int
      */
    protected $logged_time_type_id;
    
    /**
      * $app_id 
      * @var int
      */
    protected $app_id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->create_date = $data["create_date"];
            $this->modify_date = $data["modify_date"];
            $this->start = $data["start"];
            $this->end = $data["end"];
            $this->duration = $data["duration"];
            $this->description = $data["description"];
            $this->client = $data["client"];
            $this->user_id = $data["user_id"];
            $this->lob_id = $data["lob_id"];
            $this->warehouse_id = $data["warehouse_id"];
            $this->logged_time_type_id = $data["logged_time_type_id"];
            $this->app_id = $data["app_id"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets create_date
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->create_date;
    }
  
    /**
     * Sets create_date
     * @param \DateTime $create_date 
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        
        $this->create_date = $create_date;
        return $this;
    }
    
    /**
     * Gets modify_date
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->modify_date;
    }
  
    /**
     * Sets modify_date
     * @param \DateTime $modify_date 
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        
        $this->modify_date = $modify_date;
        return $this;
    }
    
    /**
     * Gets start
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->start;
    }
  
    /**
     * Sets start
     * @param \DateTime $start 
     * @return $this
     */
    public function setStart($start)
    {
        
        $this->start = $start;
        return $this;
    }
    
    /**
     * Gets end
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->end;
    }
  
    /**
     * Sets end
     * @param \DateTime $end 
     * @return $this
     */
    public function setEnd($end)
    {
        
        $this->end = $end;
        return $this;
    }
    
    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->duration;
    }
  
    /**
     * Sets duration
     * @param int $duration 
     * @return $this
     */
    public function setDuration($duration)
    {
        
        $this->duration = $duration;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets client
     * @return int
     */
    public function getClient()
    {
        return $this->client;
    }
  
    /**
     * Sets client
     * @param int $client 
     * @return $this
     */
    public function setClient($client)
    {
        
        $this->client = $client;
        return $this;
    }
    
    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param int $user_id 
     * @return $this
     */
    public function setUserId($user_id)
    {
        
        $this->user_id = $user_id;
        return $this;
    }
    
    /**
     * Gets lob_id
     * @return int
     */
    public function getLobId()
    {
        return $this->lob_id;
    }
  
    /**
     * Sets lob_id
     * @param int $lob_id 
     * @return $this
     */
    public function setLobId($lob_id)
    {
        
        $this->lob_id = $lob_id;
        return $this;
    }
    
    /**
     * Gets warehouse_id
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->warehouse_id;
    }
  
    /**
     * Sets warehouse_id
     * @param int $warehouse_id 
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        
        $this->warehouse_id = $warehouse_id;
        return $this;
    }
    
    /**
     * Gets logged_time_type_id
     * @return int
     */
    public function getLoggedTimeTypeId()
    {
        return $this->logged_time_type_id;
    }
  
    /**
     * Sets logged_time_type_id
     * @param int $logged_time_type_id 
     * @return $this
     */
    public function setLoggedTimeTypeId($logged_time_type_id)
    {
        
        $this->logged_time_type_id = $logged_time_type_id;
        return $this;
    }
    
    /**
     * Gets app_id
     * @return int
     */
    public function getAppId()
    {
        return $this->app_id;
    }
  
    /**
     * Sets app_id
     * @param int $app_id 
     * @return $this
     */
    public function setAppId($app_id)
    {
        
        $this->app_id = $app_id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
