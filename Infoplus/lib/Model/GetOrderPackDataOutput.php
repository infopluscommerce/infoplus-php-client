<?php
/**
 * GetOrderPackDataOutput
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * GetOrderPackDataOutput Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderPackDataOutput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'getOrderPackDataOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_no' => 'string',
        'order' => '\Infoplus\Infoplus\Model\Order',
        'pallet_list' => '\Infoplus\Infoplus\Model\PackedPallet[]',
        'master_carton_list' => '\Infoplus\Infoplus\Model\PackedMasterCarton[]',
        'carton_list' => '\Infoplus\Infoplus\Model\PackedCarton[]',
        'full_item_list' => '\Infoplus\Infoplus\Model\PackedItem[]',
        'unpacked_item_list' => '\Infoplus\Infoplus\Model\PackedItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_no' => null,
        'order' => null,
        'pallet_list' => null,
        'master_carton_list' => null,
        'carton_list' => null,
        'full_item_list' => null,
        'unpacked_item_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_no' => 'orderNo',
        'order' => 'order',
        'pallet_list' => 'palletList',
        'master_carton_list' => 'masterCartonList',
        'carton_list' => 'cartonList',
        'full_item_list' => 'fullItemList',
        'unpacked_item_list' => 'unpackedItemList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_no' => 'setOrderNo',
        'order' => 'setOrder',
        'pallet_list' => 'setPalletList',
        'master_carton_list' => 'setMasterCartonList',
        'carton_list' => 'setCartonList',
        'full_item_list' => 'setFullItemList',
        'unpacked_item_list' => 'setUnpackedItemList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_no' => 'getOrderNo',
        'order' => 'getOrder',
        'pallet_list' => 'getPalletList',
        'master_carton_list' => 'getMasterCartonList',
        'carton_list' => 'getCartonList',
        'full_item_list' => 'getFullItemList',
        'unpacked_item_list' => 'getUnpackedItemList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['pallet_list'] = isset($data['pallet_list']) ? $data['pallet_list'] : null;
        $this->container['master_carton_list'] = isset($data['master_carton_list']) ? $data['master_carton_list'] : null;
        $this->container['carton_list'] = isset($data['carton_list']) ? $data['carton_list'] : null;
        $this->container['full_item_list'] = isset($data['full_item_list']) ? $data['full_item_list'] : null;
        $this->container['unpacked_item_list'] = isset($data['unpacked_item_list']) ? $data['unpacked_item_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets order_no
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string $order_no order_no
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Infoplus\Infoplus\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Infoplus\Infoplus\Model\Order $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets pallet_list
     *
     * @return \Infoplus\Infoplus\Model\PackedPallet[]
     */
    public function getPalletList()
    {
        return $this->container['pallet_list'];
    }

    /**
     * Sets pallet_list
     *
     * @param \Infoplus\Infoplus\Model\PackedPallet[] $pallet_list pallet_list
     *
     * @return $this
     */
    public function setPalletList($pallet_list)
    {
        $this->container['pallet_list'] = $pallet_list;

        return $this;
    }

    /**
     * Gets master_carton_list
     *
     * @return \Infoplus\Infoplus\Model\PackedMasterCarton[]
     */
    public function getMasterCartonList()
    {
        return $this->container['master_carton_list'];
    }

    /**
     * Sets master_carton_list
     *
     * @param \Infoplus\Infoplus\Model\PackedMasterCarton[] $master_carton_list master_carton_list
     *
     * @return $this
     */
    public function setMasterCartonList($master_carton_list)
    {
        $this->container['master_carton_list'] = $master_carton_list;

        return $this;
    }

    /**
     * Gets carton_list
     *
     * @return \Infoplus\Infoplus\Model\PackedCarton[]
     */
    public function getCartonList()
    {
        return $this->container['carton_list'];
    }

    /**
     * Sets carton_list
     *
     * @param \Infoplus\Infoplus\Model\PackedCarton[] $carton_list carton_list
     *
     * @return $this
     */
    public function setCartonList($carton_list)
    {
        $this->container['carton_list'] = $carton_list;

        return $this;
    }

    /**
     * Gets full_item_list
     *
     * @return \Infoplus\Infoplus\Model\PackedItem[]
     */
    public function getFullItemList()
    {
        return $this->container['full_item_list'];
    }

    /**
     * Sets full_item_list
     *
     * @param \Infoplus\Infoplus\Model\PackedItem[] $full_item_list full_item_list
     *
     * @return $this
     */
    public function setFullItemList($full_item_list)
    {
        $this->container['full_item_list'] = $full_item_list;

        return $this;
    }

    /**
     * Gets unpacked_item_list
     *
     * @return \Infoplus\Infoplus\Model\PackedItem[]
     */
    public function getUnpackedItemList()
    {
        return $this->container['unpacked_item_list'];
    }

    /**
     * Sets unpacked_item_list
     *
     * @param \Infoplus\Infoplus\Model\PackedItem[] $unpacked_item_list unpacked_item_list
     *
     * @return $this
     */
    public function setUnpackedItemList($unpacked_item_list)
    {
        $this->container['unpacked_item_list'] = $unpacked_item_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


