<?php
/**
 * ItemReceipt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * ItemReceipt Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemReceipt implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'po_no' => 'string',
        'lob_id' => 'int',
        'legacy_po_no' => 'string',
        'warehouse_id' => 'int',
        'order_date' => '\DateTime',
        'fact_cost' => 'double',
        'ml_cost' => 'double',
        'sku' => 'string',
        'order_quantity' => 'int',
        'requested_delivery_date' => '\DateTime',
        'unit_code' => 'string',
        'wrap_code' => 'string',
        'units_per_wrap' => 'int',
        'cost' => 'double',
        'sell' => 'double',
        'pricing_per' => 'string',
        'max_freight' => 'double',
        'charge_freight' => 'string',
        'max_other' => 'double',
        'dist_date' => '\DateTime',
        'void_date' => '\DateTime',
        'freeze_action' => 'string',
        'rev_date' => 'string',
        'art_back' => 'string',
        'origin' => 'string',
        'sample' => 'int',
        'sample_to' => 'string',
        'max_overs' => 'int',
        'max_unders' => 'int',
        'received_sfp' => 'int',
        'budget_code' => 'string',
        'accounting_code' => 'string',
        'tax_exempt' => 'string',
        'capitalize' => 'string',
        'accrual' => 'string',
        'odd_quantity' => 'int',
        'freight_cost' => 'double',
        'received_date' => '\DateTime',
        'received_quantity' => 'int',
        'from_prod' => 'int',
        'sfp_complete' => 'string',
        'end_quantity' => 'int',
        'end_val' => 'double',
        'end_fact' => 'double',
        'interim_quantity' => 'int',
        'interim_val' => 'double',
        'interim_fact' => 'double',
        'last_act' => '\DateTime',
        'weight_per_wrap' => 'double',
        'norcs' => 'string',
        'vendor_id' => 'int',
        'bs_vendor' => 'int',
        'ml_vendor' => 'int',
        'receipt_no' => 'int',
        'paid_full' => 'string',
        'entered_by' => 'string',
        'received_by' => 'string',
        'line_no' => 'int',
        'prod_lot' => 'string',
        'units_per_case' => 'int',
        'case_weight' => 'double',
        'height' => 'double',
        'width' => 'double',
        'length' => 'double',
        'dock_time' => '\DateTime',
        'modify_date' => '\DateTime',
        'impressions' => 'int',
        'asn_line' => 'int'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'po_no' => 'poNo',
        'lob_id' => 'lobId',
        'legacy_po_no' => 'legacyPoNo',
        'warehouse_id' => 'warehouseId',
        'order_date' => 'orderDate',
        'fact_cost' => 'factCost',
        'ml_cost' => 'mlCost',
        'sku' => 'sku',
        'order_quantity' => 'orderQuantity',
        'requested_delivery_date' => 'requestedDeliveryDate',
        'unit_code' => 'unitCode',
        'wrap_code' => 'wrapCode',
        'units_per_wrap' => 'unitsPerWrap',
        'cost' => 'cost',
        'sell' => 'sell',
        'pricing_per' => 'pricingPer',
        'max_freight' => 'maxFreight',
        'charge_freight' => 'chargeFreight',
        'max_other' => 'maxOther',
        'dist_date' => 'distDate',
        'void_date' => 'voidDate',
        'freeze_action' => 'freezeAction',
        'rev_date' => 'revDate',
        'art_back' => 'artBack',
        'origin' => 'origin',
        'sample' => 'sample',
        'sample_to' => 'sampleTo',
        'max_overs' => 'maxOvers',
        'max_unders' => 'maxUnders',
        'received_sfp' => 'receivedSfp',
        'budget_code' => 'budgetCode',
        'accounting_code' => 'accountingCode',
        'tax_exempt' => 'taxExempt',
        'capitalize' => 'capitalize',
        'accrual' => 'accrual',
        'odd_quantity' => 'oddQuantity',
        'freight_cost' => 'freightCost',
        'received_date' => 'receivedDate',
        'received_quantity' => 'receivedQuantity',
        'from_prod' => 'fromProd',
        'sfp_complete' => 'sfpComplete',
        'end_quantity' => 'endQuantity',
        'end_val' => 'endVal',
        'end_fact' => 'endFact',
        'interim_quantity' => 'interimQuantity',
        'interim_val' => 'interimVal',
        'interim_fact' => 'interimFact',
        'last_act' => 'lastAct',
        'weight_per_wrap' => 'weightPerWrap',
        'norcs' => 'norcs',
        'vendor_id' => 'vendorId',
        'bs_vendor' => 'bsVendor',
        'ml_vendor' => 'mlVendor',
        'receipt_no' => 'receiptNo',
        'paid_full' => 'paidFull',
        'entered_by' => 'enteredBy',
        'received_by' => 'receivedBy',
        'line_no' => 'lineNo',
        'prod_lot' => 'prodLot',
        'units_per_case' => 'unitsPerCase',
        'case_weight' => 'caseWeight',
        'height' => 'height',
        'width' => 'width',
        'length' => 'length',
        'dock_time' => 'dockTime',
        'modify_date' => 'modifyDate',
        'impressions' => 'impressions',
        'asn_line' => 'asnLine'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'po_no' => 'setPoNo',
        'lob_id' => 'setLobId',
        'legacy_po_no' => 'setLegacyPoNo',
        'warehouse_id' => 'setWarehouseId',
        'order_date' => 'setOrderDate',
        'fact_cost' => 'setFactCost',
        'ml_cost' => 'setMlCost',
        'sku' => 'setSku',
        'order_quantity' => 'setOrderQuantity',
        'requested_delivery_date' => 'setRequestedDeliveryDate',
        'unit_code' => 'setUnitCode',
        'wrap_code' => 'setWrapCode',
        'units_per_wrap' => 'setUnitsPerWrap',
        'cost' => 'setCost',
        'sell' => 'setSell',
        'pricing_per' => 'setPricingPer',
        'max_freight' => 'setMaxFreight',
        'charge_freight' => 'setChargeFreight',
        'max_other' => 'setMaxOther',
        'dist_date' => 'setDistDate',
        'void_date' => 'setVoidDate',
        'freeze_action' => 'setFreezeAction',
        'rev_date' => 'setRevDate',
        'art_back' => 'setArtBack',
        'origin' => 'setOrigin',
        'sample' => 'setSample',
        'sample_to' => 'setSampleTo',
        'max_overs' => 'setMaxOvers',
        'max_unders' => 'setMaxUnders',
        'received_sfp' => 'setReceivedSfp',
        'budget_code' => 'setBudgetCode',
        'accounting_code' => 'setAccountingCode',
        'tax_exempt' => 'setTaxExempt',
        'capitalize' => 'setCapitalize',
        'accrual' => 'setAccrual',
        'odd_quantity' => 'setOddQuantity',
        'freight_cost' => 'setFreightCost',
        'received_date' => 'setReceivedDate',
        'received_quantity' => 'setReceivedQuantity',
        'from_prod' => 'setFromProd',
        'sfp_complete' => 'setSfpComplete',
        'end_quantity' => 'setEndQuantity',
        'end_val' => 'setEndVal',
        'end_fact' => 'setEndFact',
        'interim_quantity' => 'setInterimQuantity',
        'interim_val' => 'setInterimVal',
        'interim_fact' => 'setInterimFact',
        'last_act' => 'setLastAct',
        'weight_per_wrap' => 'setWeightPerWrap',
        'norcs' => 'setNorcs',
        'vendor_id' => 'setVendorId',
        'bs_vendor' => 'setBsVendor',
        'ml_vendor' => 'setMlVendor',
        'receipt_no' => 'setReceiptNo',
        'paid_full' => 'setPaidFull',
        'entered_by' => 'setEnteredBy',
        'received_by' => 'setReceivedBy',
        'line_no' => 'setLineNo',
        'prod_lot' => 'setProdLot',
        'units_per_case' => 'setUnitsPerCase',
        'case_weight' => 'setCaseWeight',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'length' => 'setLength',
        'dock_time' => 'setDockTime',
        'modify_date' => 'setModifyDate',
        'impressions' => 'setImpressions',
        'asn_line' => 'setAsnLine'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'po_no' => 'getPoNo',
        'lob_id' => 'getLobId',
        'legacy_po_no' => 'getLegacyPoNo',
        'warehouse_id' => 'getWarehouseId',
        'order_date' => 'getOrderDate',
        'fact_cost' => 'getFactCost',
        'ml_cost' => 'getMlCost',
        'sku' => 'getSku',
        'order_quantity' => 'getOrderQuantity',
        'requested_delivery_date' => 'getRequestedDeliveryDate',
        'unit_code' => 'getUnitCode',
        'wrap_code' => 'getWrapCode',
        'units_per_wrap' => 'getUnitsPerWrap',
        'cost' => 'getCost',
        'sell' => 'getSell',
        'pricing_per' => 'getPricingPer',
        'max_freight' => 'getMaxFreight',
        'charge_freight' => 'getChargeFreight',
        'max_other' => 'getMaxOther',
        'dist_date' => 'getDistDate',
        'void_date' => 'getVoidDate',
        'freeze_action' => 'getFreezeAction',
        'rev_date' => 'getRevDate',
        'art_back' => 'getArtBack',
        'origin' => 'getOrigin',
        'sample' => 'getSample',
        'sample_to' => 'getSampleTo',
        'max_overs' => 'getMaxOvers',
        'max_unders' => 'getMaxUnders',
        'received_sfp' => 'getReceivedSfp',
        'budget_code' => 'getBudgetCode',
        'accounting_code' => 'getAccountingCode',
        'tax_exempt' => 'getTaxExempt',
        'capitalize' => 'getCapitalize',
        'accrual' => 'getAccrual',
        'odd_quantity' => 'getOddQuantity',
        'freight_cost' => 'getFreightCost',
        'received_date' => 'getReceivedDate',
        'received_quantity' => 'getReceivedQuantity',
        'from_prod' => 'getFromProd',
        'sfp_complete' => 'getSfpComplete',
        'end_quantity' => 'getEndQuantity',
        'end_val' => 'getEndVal',
        'end_fact' => 'getEndFact',
        'interim_quantity' => 'getInterimQuantity',
        'interim_val' => 'getInterimVal',
        'interim_fact' => 'getInterimFact',
        'last_act' => 'getLastAct',
        'weight_per_wrap' => 'getWeightPerWrap',
        'norcs' => 'getNorcs',
        'vendor_id' => 'getVendorId',
        'bs_vendor' => 'getBsVendor',
        'ml_vendor' => 'getMlVendor',
        'receipt_no' => 'getReceiptNo',
        'paid_full' => 'getPaidFull',
        'entered_by' => 'getEnteredBy',
        'received_by' => 'getReceivedBy',
        'line_no' => 'getLineNo',
        'prod_lot' => 'getProdLot',
        'units_per_case' => 'getUnitsPerCase',
        'case_weight' => 'getCaseWeight',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'length' => 'getLength',
        'dock_time' => 'getDockTime',
        'modify_date' => 'getModifyDate',
        'impressions' => 'getImpressions',
        'asn_line' => 'getAsnLine'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $po_no 
      * @var string
      */
    protected $po_no;
    
    /**
      * $lob_id 
      * @var int
      */
    protected $lob_id;
    
    /**
      * $legacy_po_no 
      * @var string
      */
    protected $legacy_po_no;
    
    /**
      * $warehouse_id 
      * @var int
      */
    protected $warehouse_id;
    
    /**
      * $order_date 
      * @var \DateTime
      */
    protected $order_date;
    
    /**
      * $fact_cost 
      * @var double
      */
    protected $fact_cost;
    
    /**
      * $ml_cost 
      * @var double
      */
    protected $ml_cost;
    
    /**
      * $sku 
      * @var string
      */
    protected $sku;
    
    /**
      * $order_quantity 
      * @var int
      */
    protected $order_quantity;
    
    /**
      * $requested_delivery_date 
      * @var \DateTime
      */
    protected $requested_delivery_date;
    
    /**
      * $unit_code 
      * @var string
      */
    protected $unit_code;
    
    /**
      * $wrap_code 
      * @var string
      */
    protected $wrap_code;
    
    /**
      * $units_per_wrap 
      * @var int
      */
    protected $units_per_wrap;
    
    /**
      * $cost 
      * @var double
      */
    protected $cost;
    
    /**
      * $sell 
      * @var double
      */
    protected $sell;
    
    /**
      * $pricing_per 
      * @var string
      */
    protected $pricing_per;
    
    /**
      * $max_freight 
      * @var double
      */
    protected $max_freight;
    
    /**
      * $charge_freight 
      * @var string
      */
    protected $charge_freight;
    
    /**
      * $max_other 
      * @var double
      */
    protected $max_other;
    
    /**
      * $dist_date 
      * @var \DateTime
      */
    protected $dist_date;
    
    /**
      * $void_date 
      * @var \DateTime
      */
    protected $void_date;
    
    /**
      * $freeze_action 
      * @var string
      */
    protected $freeze_action;
    
    /**
      * $rev_date 
      * @var string
      */
    protected $rev_date;
    
    /**
      * $art_back 
      * @var string
      */
    protected $art_back;
    
    /**
      * $origin 
      * @var string
      */
    protected $origin;
    
    /**
      * $sample 
      * @var int
      */
    protected $sample;
    
    /**
      * $sample_to 
      * @var string
      */
    protected $sample_to;
    
    /**
      * $max_overs 
      * @var int
      */
    protected $max_overs;
    
    /**
      * $max_unders 
      * @var int
      */
    protected $max_unders;
    
    /**
      * $received_sfp 
      * @var int
      */
    protected $received_sfp;
    
    /**
      * $budget_code 
      * @var string
      */
    protected $budget_code;
    
    /**
      * $accounting_code 
      * @var string
      */
    protected $accounting_code;
    
    /**
      * $tax_exempt 
      * @var string
      */
    protected $tax_exempt;
    
    /**
      * $capitalize 
      * @var string
      */
    protected $capitalize;
    
    /**
      * $accrual 
      * @var string
      */
    protected $accrual;
    
    /**
      * $odd_quantity 
      * @var int
      */
    protected $odd_quantity;
    
    /**
      * $freight_cost 
      * @var double
      */
    protected $freight_cost;
    
    /**
      * $received_date 
      * @var \DateTime
      */
    protected $received_date;
    
    /**
      * $received_quantity 
      * @var int
      */
    protected $received_quantity;
    
    /**
      * $from_prod 
      * @var int
      */
    protected $from_prod;
    
    /**
      * $sfp_complete 
      * @var string
      */
    protected $sfp_complete;
    
    /**
      * $end_quantity 
      * @var int
      */
    protected $end_quantity;
    
    /**
      * $end_val 
      * @var double
      */
    protected $end_val;
    
    /**
      * $end_fact 
      * @var double
      */
    protected $end_fact;
    
    /**
      * $interim_quantity 
      * @var int
      */
    protected $interim_quantity;
    
    /**
      * $interim_val 
      * @var double
      */
    protected $interim_val;
    
    /**
      * $interim_fact 
      * @var double
      */
    protected $interim_fact;
    
    /**
      * $last_act 
      * @var \DateTime
      */
    protected $last_act;
    
    /**
      * $weight_per_wrap 
      * @var double
      */
    protected $weight_per_wrap;
    
    /**
      * $norcs 
      * @var string
      */
    protected $norcs;
    
    /**
      * $vendor_id 
      * @var int
      */
    protected $vendor_id;
    
    /**
      * $bs_vendor 
      * @var int
      */
    protected $bs_vendor;
    
    /**
      * $ml_vendor 
      * @var int
      */
    protected $ml_vendor;
    
    /**
      * $receipt_no 
      * @var int
      */
    protected $receipt_no;
    
    /**
      * $paid_full 
      * @var string
      */
    protected $paid_full;
    
    /**
      * $entered_by 
      * @var string
      */
    protected $entered_by;
    
    /**
      * $received_by 
      * @var string
      */
    protected $received_by;
    
    /**
      * $line_no 
      * @var int
      */
    protected $line_no;
    
    /**
      * $prod_lot 
      * @var string
      */
    protected $prod_lot;
    
    /**
      * $units_per_case 
      * @var int
      */
    protected $units_per_case;
    
    /**
      * $case_weight 
      * @var double
      */
    protected $case_weight;
    
    /**
      * $height 
      * @var double
      */
    protected $height;
    
    /**
      * $width 
      * @var double
      */
    protected $width;
    
    /**
      * $length 
      * @var double
      */
    protected $length;
    
    /**
      * $dock_time 
      * @var \DateTime
      */
    protected $dock_time;
    
    /**
      * $modify_date 
      * @var \DateTime
      */
    protected $modify_date;
    
    /**
      * $impressions 
      * @var int
      */
    protected $impressions;
    
    /**
      * $asn_line 
      * @var int
      */
    protected $asn_line;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->po_no = $data["po_no"];
            $this->lob_id = $data["lob_id"];
            $this->legacy_po_no = $data["legacy_po_no"];
            $this->warehouse_id = $data["warehouse_id"];
            $this->order_date = $data["order_date"];
            $this->fact_cost = $data["fact_cost"];
            $this->ml_cost = $data["ml_cost"];
            $this->sku = $data["sku"];
            $this->order_quantity = $data["order_quantity"];
            $this->requested_delivery_date = $data["requested_delivery_date"];
            $this->unit_code = $data["unit_code"];
            $this->wrap_code = $data["wrap_code"];
            $this->units_per_wrap = $data["units_per_wrap"];
            $this->cost = $data["cost"];
            $this->sell = $data["sell"];
            $this->pricing_per = $data["pricing_per"];
            $this->max_freight = $data["max_freight"];
            $this->charge_freight = $data["charge_freight"];
            $this->max_other = $data["max_other"];
            $this->dist_date = $data["dist_date"];
            $this->void_date = $data["void_date"];
            $this->freeze_action = $data["freeze_action"];
            $this->rev_date = $data["rev_date"];
            $this->art_back = $data["art_back"];
            $this->origin = $data["origin"];
            $this->sample = $data["sample"];
            $this->sample_to = $data["sample_to"];
            $this->max_overs = $data["max_overs"];
            $this->max_unders = $data["max_unders"];
            $this->received_sfp = $data["received_sfp"];
            $this->budget_code = $data["budget_code"];
            $this->accounting_code = $data["accounting_code"];
            $this->tax_exempt = $data["tax_exempt"];
            $this->capitalize = $data["capitalize"];
            $this->accrual = $data["accrual"];
            $this->odd_quantity = $data["odd_quantity"];
            $this->freight_cost = $data["freight_cost"];
            $this->received_date = $data["received_date"];
            $this->received_quantity = $data["received_quantity"];
            $this->from_prod = $data["from_prod"];
            $this->sfp_complete = $data["sfp_complete"];
            $this->end_quantity = $data["end_quantity"];
            $this->end_val = $data["end_val"];
            $this->end_fact = $data["end_fact"];
            $this->interim_quantity = $data["interim_quantity"];
            $this->interim_val = $data["interim_val"];
            $this->interim_fact = $data["interim_fact"];
            $this->last_act = $data["last_act"];
            $this->weight_per_wrap = $data["weight_per_wrap"];
            $this->norcs = $data["norcs"];
            $this->vendor_id = $data["vendor_id"];
            $this->bs_vendor = $data["bs_vendor"];
            $this->ml_vendor = $data["ml_vendor"];
            $this->receipt_no = $data["receipt_no"];
            $this->paid_full = $data["paid_full"];
            $this->entered_by = $data["entered_by"];
            $this->received_by = $data["received_by"];
            $this->line_no = $data["line_no"];
            $this->prod_lot = $data["prod_lot"];
            $this->units_per_case = $data["units_per_case"];
            $this->case_weight = $data["case_weight"];
            $this->height = $data["height"];
            $this->width = $data["width"];
            $this->length = $data["length"];
            $this->dock_time = $data["dock_time"];
            $this->modify_date = $data["modify_date"];
            $this->impressions = $data["impressions"];
            $this->asn_line = $data["asn_line"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets po_no
     * @return string
     */
    public function getPoNo()
    {
        return $this->po_no;
    }
  
    /**
     * Sets po_no
     * @param string $po_no 
     * @return $this
     */
    public function setPoNo($po_no)
    {
        
        $this->po_no = $po_no;
        return $this;
    }
    
    /**
     * Gets lob_id
     * @return int
     */
    public function getLobId()
    {
        return $this->lob_id;
    }
  
    /**
     * Sets lob_id
     * @param int $lob_id 
     * @return $this
     */
    public function setLobId($lob_id)
    {
        
        $this->lob_id = $lob_id;
        return $this;
    }
    
    /**
     * Gets legacy_po_no
     * @return string
     */
    public function getLegacyPoNo()
    {
        return $this->legacy_po_no;
    }
  
    /**
     * Sets legacy_po_no
     * @param string $legacy_po_no 
     * @return $this
     */
    public function setLegacyPoNo($legacy_po_no)
    {
        
        $this->legacy_po_no = $legacy_po_no;
        return $this;
    }
    
    /**
     * Gets warehouse_id
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->warehouse_id;
    }
  
    /**
     * Sets warehouse_id
     * @param int $warehouse_id 
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        
        $this->warehouse_id = $warehouse_id;
        return $this;
    }
    
    /**
     * Gets order_date
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->order_date;
    }
  
    /**
     * Sets order_date
     * @param \DateTime $order_date 
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        
        $this->order_date = $order_date;
        return $this;
    }
    
    /**
     * Gets fact_cost
     * @return double
     */
    public function getFactCost()
    {
        return $this->fact_cost;
    }
  
    /**
     * Sets fact_cost
     * @param double $fact_cost 
     * @return $this
     */
    public function setFactCost($fact_cost)
    {
        
        $this->fact_cost = $fact_cost;
        return $this;
    }
    
    /**
     * Gets ml_cost
     * @return double
     */
    public function getMlCost()
    {
        return $this->ml_cost;
    }
  
    /**
     * Sets ml_cost
     * @param double $ml_cost 
     * @return $this
     */
    public function setMlCost($ml_cost)
    {
        
        $this->ml_cost = $ml_cost;
        return $this;
    }
    
    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->sku;
    }
  
    /**
     * Sets sku
     * @param string $sku 
     * @return $this
     */
    public function setSku($sku)
    {
        
        $this->sku = $sku;
        return $this;
    }
    
    /**
     * Gets order_quantity
     * @return int
     */
    public function getOrderQuantity()
    {
        return $this->order_quantity;
    }
  
    /**
     * Sets order_quantity
     * @param int $order_quantity 
     * @return $this
     */
    public function setOrderQuantity($order_quantity)
    {
        
        $this->order_quantity = $order_quantity;
        return $this;
    }
    
    /**
     * Gets requested_delivery_date
     * @return \DateTime
     */
    public function getRequestedDeliveryDate()
    {
        return $this->requested_delivery_date;
    }
  
    /**
     * Sets requested_delivery_date
     * @param \DateTime $requested_delivery_date 
     * @return $this
     */
    public function setRequestedDeliveryDate($requested_delivery_date)
    {
        
        $this->requested_delivery_date = $requested_delivery_date;
        return $this;
    }
    
    /**
     * Gets unit_code
     * @return string
     */
    public function getUnitCode()
    {
        return $this->unit_code;
    }
  
    /**
     * Sets unit_code
     * @param string $unit_code 
     * @return $this
     */
    public function setUnitCode($unit_code)
    {
        
        $this->unit_code = $unit_code;
        return $this;
    }
    
    /**
     * Gets wrap_code
     * @return string
     */
    public function getWrapCode()
    {
        return $this->wrap_code;
    }
  
    /**
     * Sets wrap_code
     * @param string $wrap_code 
     * @return $this
     */
    public function setWrapCode($wrap_code)
    {
        
        $this->wrap_code = $wrap_code;
        return $this;
    }
    
    /**
     * Gets units_per_wrap
     * @return int
     */
    public function getUnitsPerWrap()
    {
        return $this->units_per_wrap;
    }
  
    /**
     * Sets units_per_wrap
     * @param int $units_per_wrap 
     * @return $this
     */
    public function setUnitsPerWrap($units_per_wrap)
    {
        
        $this->units_per_wrap = $units_per_wrap;
        return $this;
    }
    
    /**
     * Gets cost
     * @return double
     */
    public function getCost()
    {
        return $this->cost;
    }
  
    /**
     * Sets cost
     * @param double $cost 
     * @return $this
     */
    public function setCost($cost)
    {
        
        $this->cost = $cost;
        return $this;
    }
    
    /**
     * Gets sell
     * @return double
     */
    public function getSell()
    {
        return $this->sell;
    }
  
    /**
     * Sets sell
     * @param double $sell 
     * @return $this
     */
    public function setSell($sell)
    {
        
        $this->sell = $sell;
        return $this;
    }
    
    /**
     * Gets pricing_per
     * @return string
     */
    public function getPricingPer()
    {
        return $this->pricing_per;
    }
  
    /**
     * Sets pricing_per
     * @param string $pricing_per 
     * @return $this
     */
    public function setPricingPer($pricing_per)
    {
        
        $this->pricing_per = $pricing_per;
        return $this;
    }
    
    /**
     * Gets max_freight
     * @return double
     */
    public function getMaxFreight()
    {
        return $this->max_freight;
    }
  
    /**
     * Sets max_freight
     * @param double $max_freight 
     * @return $this
     */
    public function setMaxFreight($max_freight)
    {
        
        $this->max_freight = $max_freight;
        return $this;
    }
    
    /**
     * Gets charge_freight
     * @return string
     */
    public function getChargeFreight()
    {
        return $this->charge_freight;
    }
  
    /**
     * Sets charge_freight
     * @param string $charge_freight 
     * @return $this
     */
    public function setChargeFreight($charge_freight)
    {
        
        $this->charge_freight = $charge_freight;
        return $this;
    }
    
    /**
     * Gets max_other
     * @return double
     */
    public function getMaxOther()
    {
        return $this->max_other;
    }
  
    /**
     * Sets max_other
     * @param double $max_other 
     * @return $this
     */
    public function setMaxOther($max_other)
    {
        
        $this->max_other = $max_other;
        return $this;
    }
    
    /**
     * Gets dist_date
     * @return \DateTime
     */
    public function getDistDate()
    {
        return $this->dist_date;
    }
  
    /**
     * Sets dist_date
     * @param \DateTime $dist_date 
     * @return $this
     */
    public function setDistDate($dist_date)
    {
        
        $this->dist_date = $dist_date;
        return $this;
    }
    
    /**
     * Gets void_date
     * @return \DateTime
     */
    public function getVoidDate()
    {
        return $this->void_date;
    }
  
    /**
     * Sets void_date
     * @param \DateTime $void_date 
     * @return $this
     */
    public function setVoidDate($void_date)
    {
        
        $this->void_date = $void_date;
        return $this;
    }
    
    /**
     * Gets freeze_action
     * @return string
     */
    public function getFreezeAction()
    {
        return $this->freeze_action;
    }
  
    /**
     * Sets freeze_action
     * @param string $freeze_action 
     * @return $this
     */
    public function setFreezeAction($freeze_action)
    {
        
        $this->freeze_action = $freeze_action;
        return $this;
    }
    
    /**
     * Gets rev_date
     * @return string
     */
    public function getRevDate()
    {
        return $this->rev_date;
    }
  
    /**
     * Sets rev_date
     * @param string $rev_date 
     * @return $this
     */
    public function setRevDate($rev_date)
    {
        
        $this->rev_date = $rev_date;
        return $this;
    }
    
    /**
     * Gets art_back
     * @return string
     */
    public function getArtBack()
    {
        return $this->art_back;
    }
  
    /**
     * Sets art_back
     * @param string $art_back 
     * @return $this
     */
    public function setArtBack($art_back)
    {
        
        $this->art_back = $art_back;
        return $this;
    }
    
    /**
     * Gets origin
     * @return string
     */
    public function getOrigin()
    {
        return $this->origin;
    }
  
    /**
     * Sets origin
     * @param string $origin 
     * @return $this
     */
    public function setOrigin($origin)
    {
        
        $this->origin = $origin;
        return $this;
    }
    
    /**
     * Gets sample
     * @return int
     */
    public function getSample()
    {
        return $this->sample;
    }
  
    /**
     * Sets sample
     * @param int $sample 
     * @return $this
     */
    public function setSample($sample)
    {
        
        $this->sample = $sample;
        return $this;
    }
    
    /**
     * Gets sample_to
     * @return string
     */
    public function getSampleTo()
    {
        return $this->sample_to;
    }
  
    /**
     * Sets sample_to
     * @param string $sample_to 
     * @return $this
     */
    public function setSampleTo($sample_to)
    {
        
        $this->sample_to = $sample_to;
        return $this;
    }
    
    /**
     * Gets max_overs
     * @return int
     */
    public function getMaxOvers()
    {
        return $this->max_overs;
    }
  
    /**
     * Sets max_overs
     * @param int $max_overs 
     * @return $this
     */
    public function setMaxOvers($max_overs)
    {
        
        $this->max_overs = $max_overs;
        return $this;
    }
    
    /**
     * Gets max_unders
     * @return int
     */
    public function getMaxUnders()
    {
        return $this->max_unders;
    }
  
    /**
     * Sets max_unders
     * @param int $max_unders 
     * @return $this
     */
    public function setMaxUnders($max_unders)
    {
        
        $this->max_unders = $max_unders;
        return $this;
    }
    
    /**
     * Gets received_sfp
     * @return int
     */
    public function getReceivedSfp()
    {
        return $this->received_sfp;
    }
  
    /**
     * Sets received_sfp
     * @param int $received_sfp 
     * @return $this
     */
    public function setReceivedSfp($received_sfp)
    {
        
        $this->received_sfp = $received_sfp;
        return $this;
    }
    
    /**
     * Gets budget_code
     * @return string
     */
    public function getBudgetCode()
    {
        return $this->budget_code;
    }
  
    /**
     * Sets budget_code
     * @param string $budget_code 
     * @return $this
     */
    public function setBudgetCode($budget_code)
    {
        
        $this->budget_code = $budget_code;
        return $this;
    }
    
    /**
     * Gets accounting_code
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->accounting_code;
    }
  
    /**
     * Sets accounting_code
     * @param string $accounting_code 
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        
        $this->accounting_code = $accounting_code;
        return $this;
    }
    
    /**
     * Gets tax_exempt
     * @return string
     */
    public function getTaxExempt()
    {
        return $this->tax_exempt;
    }
  
    /**
     * Sets tax_exempt
     * @param string $tax_exempt 
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        
        $this->tax_exempt = $tax_exempt;
        return $this;
    }
    
    /**
     * Gets capitalize
     * @return string
     */
    public function getCapitalize()
    {
        return $this->capitalize;
    }
  
    /**
     * Sets capitalize
     * @param string $capitalize 
     * @return $this
     */
    public function setCapitalize($capitalize)
    {
        
        $this->capitalize = $capitalize;
        return $this;
    }
    
    /**
     * Gets accrual
     * @return string
     */
    public function getAccrual()
    {
        return $this->accrual;
    }
  
    /**
     * Sets accrual
     * @param string $accrual 
     * @return $this
     */
    public function setAccrual($accrual)
    {
        
        $this->accrual = $accrual;
        return $this;
    }
    
    /**
     * Gets odd_quantity
     * @return int
     */
    public function getOddQuantity()
    {
        return $this->odd_quantity;
    }
  
    /**
     * Sets odd_quantity
     * @param int $odd_quantity 
     * @return $this
     */
    public function setOddQuantity($odd_quantity)
    {
        
        $this->odd_quantity = $odd_quantity;
        return $this;
    }
    
    /**
     * Gets freight_cost
     * @return double
     */
    public function getFreightCost()
    {
        return $this->freight_cost;
    }
  
    /**
     * Sets freight_cost
     * @param double $freight_cost 
     * @return $this
     */
    public function setFreightCost($freight_cost)
    {
        
        $this->freight_cost = $freight_cost;
        return $this;
    }
    
    /**
     * Gets received_date
     * @return \DateTime
     */
    public function getReceivedDate()
    {
        return $this->received_date;
    }
  
    /**
     * Sets received_date
     * @param \DateTime $received_date 
     * @return $this
     */
    public function setReceivedDate($received_date)
    {
        
        $this->received_date = $received_date;
        return $this;
    }
    
    /**
     * Gets received_quantity
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->received_quantity;
    }
  
    /**
     * Sets received_quantity
     * @param int $received_quantity 
     * @return $this
     */
    public function setReceivedQuantity($received_quantity)
    {
        
        $this->received_quantity = $received_quantity;
        return $this;
    }
    
    /**
     * Gets from_prod
     * @return int
     */
    public function getFromProd()
    {
        return $this->from_prod;
    }
  
    /**
     * Sets from_prod
     * @param int $from_prod 
     * @return $this
     */
    public function setFromProd($from_prod)
    {
        
        $this->from_prod = $from_prod;
        return $this;
    }
    
    /**
     * Gets sfp_complete
     * @return string
     */
    public function getSfpComplete()
    {
        return $this->sfp_complete;
    }
  
    /**
     * Sets sfp_complete
     * @param string $sfp_complete 
     * @return $this
     */
    public function setSfpComplete($sfp_complete)
    {
        
        $this->sfp_complete = $sfp_complete;
        return $this;
    }
    
    /**
     * Gets end_quantity
     * @return int
     */
    public function getEndQuantity()
    {
        return $this->end_quantity;
    }
  
    /**
     * Sets end_quantity
     * @param int $end_quantity 
     * @return $this
     */
    public function setEndQuantity($end_quantity)
    {
        
        $this->end_quantity = $end_quantity;
        return $this;
    }
    
    /**
     * Gets end_val
     * @return double
     */
    public function getEndVal()
    {
        return $this->end_val;
    }
  
    /**
     * Sets end_val
     * @param double $end_val 
     * @return $this
     */
    public function setEndVal($end_val)
    {
        
        $this->end_val = $end_val;
        return $this;
    }
    
    /**
     * Gets end_fact
     * @return double
     */
    public function getEndFact()
    {
        return $this->end_fact;
    }
  
    /**
     * Sets end_fact
     * @param double $end_fact 
     * @return $this
     */
    public function setEndFact($end_fact)
    {
        
        $this->end_fact = $end_fact;
        return $this;
    }
    
    /**
     * Gets interim_quantity
     * @return int
     */
    public function getInterimQuantity()
    {
        return $this->interim_quantity;
    }
  
    /**
     * Sets interim_quantity
     * @param int $interim_quantity 
     * @return $this
     */
    public function setInterimQuantity($interim_quantity)
    {
        
        $this->interim_quantity = $interim_quantity;
        return $this;
    }
    
    /**
     * Gets interim_val
     * @return double
     */
    public function getInterimVal()
    {
        return $this->interim_val;
    }
  
    /**
     * Sets interim_val
     * @param double $interim_val 
     * @return $this
     */
    public function setInterimVal($interim_val)
    {
        
        $this->interim_val = $interim_val;
        return $this;
    }
    
    /**
     * Gets interim_fact
     * @return double
     */
    public function getInterimFact()
    {
        return $this->interim_fact;
    }
  
    /**
     * Sets interim_fact
     * @param double $interim_fact 
     * @return $this
     */
    public function setInterimFact($interim_fact)
    {
        
        $this->interim_fact = $interim_fact;
        return $this;
    }
    
    /**
     * Gets last_act
     * @return \DateTime
     */
    public function getLastAct()
    {
        return $this->last_act;
    }
  
    /**
     * Sets last_act
     * @param \DateTime $last_act 
     * @return $this
     */
    public function setLastAct($last_act)
    {
        
        $this->last_act = $last_act;
        return $this;
    }
    
    /**
     * Gets weight_per_wrap
     * @return double
     */
    public function getWeightPerWrap()
    {
        return $this->weight_per_wrap;
    }
  
    /**
     * Sets weight_per_wrap
     * @param double $weight_per_wrap 
     * @return $this
     */
    public function setWeightPerWrap($weight_per_wrap)
    {
        
        $this->weight_per_wrap = $weight_per_wrap;
        return $this;
    }
    
    /**
     * Gets norcs
     * @return string
     */
    public function getNorcs()
    {
        return $this->norcs;
    }
  
    /**
     * Sets norcs
     * @param string $norcs 
     * @return $this
     */
    public function setNorcs($norcs)
    {
        
        $this->norcs = $norcs;
        return $this;
    }
    
    /**
     * Gets vendor_id
     * @return int
     */
    public function getVendorId()
    {
        return $this->vendor_id;
    }
  
    /**
     * Sets vendor_id
     * @param int $vendor_id 
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        
        $this->vendor_id = $vendor_id;
        return $this;
    }
    
    /**
     * Gets bs_vendor
     * @return int
     */
    public function getBsVendor()
    {
        return $this->bs_vendor;
    }
  
    /**
     * Sets bs_vendor
     * @param int $bs_vendor 
     * @return $this
     */
    public function setBsVendor($bs_vendor)
    {
        
        $this->bs_vendor = $bs_vendor;
        return $this;
    }
    
    /**
     * Gets ml_vendor
     * @return int
     */
    public function getMlVendor()
    {
        return $this->ml_vendor;
    }
  
    /**
     * Sets ml_vendor
     * @param int $ml_vendor 
     * @return $this
     */
    public function setMlVendor($ml_vendor)
    {
        
        $this->ml_vendor = $ml_vendor;
        return $this;
    }
    
    /**
     * Gets receipt_no
     * @return int
     */
    public function getReceiptNo()
    {
        return $this->receipt_no;
    }
  
    /**
     * Sets receipt_no
     * @param int $receipt_no 
     * @return $this
     */
    public function setReceiptNo($receipt_no)
    {
        
        $this->receipt_no = $receipt_no;
        return $this;
    }
    
    /**
     * Gets paid_full
     * @return string
     */
    public function getPaidFull()
    {
        return $this->paid_full;
    }
  
    /**
     * Sets paid_full
     * @param string $paid_full 
     * @return $this
     */
    public function setPaidFull($paid_full)
    {
        
        $this->paid_full = $paid_full;
        return $this;
    }
    
    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->entered_by;
    }
  
    /**
     * Sets entered_by
     * @param string $entered_by 
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        
        $this->entered_by = $entered_by;
        return $this;
    }
    
    /**
     * Gets received_by
     * @return string
     */
    public function getReceivedBy()
    {
        return $this->received_by;
    }
  
    /**
     * Sets received_by
     * @param string $received_by 
     * @return $this
     */
    public function setReceivedBy($received_by)
    {
        
        $this->received_by = $received_by;
        return $this;
    }
    
    /**
     * Gets line_no
     * @return int
     */
    public function getLineNo()
    {
        return $this->line_no;
    }
  
    /**
     * Sets line_no
     * @param int $line_no 
     * @return $this
     */
    public function setLineNo($line_no)
    {
        
        $this->line_no = $line_no;
        return $this;
    }
    
    /**
     * Gets prod_lot
     * @return string
     */
    public function getProdLot()
    {
        return $this->prod_lot;
    }
  
    /**
     * Sets prod_lot
     * @param string $prod_lot 
     * @return $this
     */
    public function setProdLot($prod_lot)
    {
        
        $this->prod_lot = $prod_lot;
        return $this;
    }
    
    /**
     * Gets units_per_case
     * @return int
     */
    public function getUnitsPerCase()
    {
        return $this->units_per_case;
    }
  
    /**
     * Sets units_per_case
     * @param int $units_per_case 
     * @return $this
     */
    public function setUnitsPerCase($units_per_case)
    {
        
        $this->units_per_case = $units_per_case;
        return $this;
    }
    
    /**
     * Gets case_weight
     * @return double
     */
    public function getCaseWeight()
    {
        return $this->case_weight;
    }
  
    /**
     * Sets case_weight
     * @param double $case_weight 
     * @return $this
     */
    public function setCaseWeight($case_weight)
    {
        
        $this->case_weight = $case_weight;
        return $this;
    }
    
    /**
     * Gets height
     * @return double
     */
    public function getHeight()
    {
        return $this->height;
    }
  
    /**
     * Sets height
     * @param double $height 
     * @return $this
     */
    public function setHeight($height)
    {
        
        $this->height = $height;
        return $this;
    }
    
    /**
     * Gets width
     * @return double
     */
    public function getWidth()
    {
        return $this->width;
    }
  
    /**
     * Sets width
     * @param double $width 
     * @return $this
     */
    public function setWidth($width)
    {
        
        $this->width = $width;
        return $this;
    }
    
    /**
     * Gets length
     * @return double
     */
    public function getLength()
    {
        return $this->length;
    }
  
    /**
     * Sets length
     * @param double $length 
     * @return $this
     */
    public function setLength($length)
    {
        
        $this->length = $length;
        return $this;
    }
    
    /**
     * Gets dock_time
     * @return \DateTime
     */
    public function getDockTime()
    {
        return $this->dock_time;
    }
  
    /**
     * Sets dock_time
     * @param \DateTime $dock_time 
     * @return $this
     */
    public function setDockTime($dock_time)
    {
        
        $this->dock_time = $dock_time;
        return $this;
    }
    
    /**
     * Gets modify_date
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->modify_date;
    }
  
    /**
     * Sets modify_date
     * @param \DateTime $modify_date 
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        
        $this->modify_date = $modify_date;
        return $this;
    }
    
    /**
     * Gets impressions
     * @return int
     */
    public function getImpressions()
    {
        return $this->impressions;
    }
  
    /**
     * Sets impressions
     * @param int $impressions 
     * @return $this
     */
    public function setImpressions($impressions)
    {
        
        $this->impressions = $impressions;
        return $this;
    }
    
    /**
     * Gets asn_line
     * @return int
     */
    public function getAsnLine()
    {
        return $this->asn_line;
    }
  
    /**
     * Sets asn_line
     * @param int $asn_line 
     * @return $this
     */
    public function setAsnLine($asn_line)
    {
        
        $this->asn_line = $asn_line;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
