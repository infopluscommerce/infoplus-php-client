<?php
/**
 * ShoppingCartConnection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * ShoppingCartConnection Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShoppingCartConnection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'shoppingCartConnection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'client_id' => 'int',
        'nonce' => 'string',
        'lob_id' => 'int',
        'order_source_id' => 'int',
        'integration_partner_id' => 'int',
        'connection_type' => 'string',
        'item_filter_id' => 'int',
        'infoplus_sku_field_to_map' => 'string',
        'shopping_cart_sku_field_to_map' => 'string',
        'script_id' => 'int',
        'name' => 'string',
        'shopping_cart_store_url' => 'string',
        'access_code' => 'string',
        'access_token' => 'string',
        'username' => 'string',
        'password' => 'string',
        'default_carrier_id' => 'int',
        'order_shipment_level' => 'string',
        'create_invoices' => 'bool',
        'sync_orders' => 'bool',
        'sync_inventory' => 'bool',
        'sync_tracking_data' => 'bool',
        'sync_inventory_cron_string' => 'string',
        'fulfill_all_items' => 'bool',
        'sync_inventory_levels_last_run_time' => '\DateTime',
        'sync_orders_last_run_time' => '\DateTime',
        'inventory_level_warehouse_controls' => 'string',
        'warehouse_list' => '\Infoplus\Infoplus\Model\Warehouse[]',
        'inventory_level_store_controls' => 'string',
        'store_list' => '\Infoplus\Infoplus\Model\Store[]',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'client_id' => 'int32',
        'nonce' => null,
        'lob_id' => 'int32',
        'order_source_id' => 'int32',
        'integration_partner_id' => 'int32',
        'connection_type' => null,
        'item_filter_id' => 'int32',
        'infoplus_sku_field_to_map' => null,
        'shopping_cart_sku_field_to_map' => null,
        'script_id' => 'int32',
        'name' => null,
        'shopping_cart_store_url' => null,
        'access_code' => null,
        'access_token' => null,
        'username' => null,
        'password' => null,
        'default_carrier_id' => 'int32',
        'order_shipment_level' => null,
        'create_invoices' => null,
        'sync_orders' => null,
        'sync_inventory' => null,
        'sync_tracking_data' => null,
        'sync_inventory_cron_string' => null,
        'fulfill_all_items' => null,
        'sync_inventory_levels_last_run_time' => 'date-time',
        'sync_orders_last_run_time' => 'date-time',
        'inventory_level_warehouse_controls' => null,
        'warehouse_list' => null,
        'inventory_level_store_controls' => null,
        'store_list' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'client_id' => 'clientId',
        'nonce' => 'nonce',
        'lob_id' => 'lobId',
        'order_source_id' => 'orderSourceId',
        'integration_partner_id' => 'integrationPartnerId',
        'connection_type' => 'connectionType',
        'item_filter_id' => 'itemFilterId',
        'infoplus_sku_field_to_map' => 'infoplusSKUFieldToMap',
        'shopping_cart_sku_field_to_map' => 'shoppingCartSKUFieldToMap',
        'script_id' => 'scriptId',
        'name' => 'name',
        'shopping_cart_store_url' => 'shoppingCartStoreURL',
        'access_code' => 'accessCode',
        'access_token' => 'accessToken',
        'username' => 'username',
        'password' => 'password',
        'default_carrier_id' => 'defaultCarrierId',
        'order_shipment_level' => 'orderShipmentLevel',
        'create_invoices' => 'createInvoices',
        'sync_orders' => 'syncOrders',
        'sync_inventory' => 'syncInventory',
        'sync_tracking_data' => 'syncTrackingData',
        'sync_inventory_cron_string' => 'syncInventoryCronString',
        'fulfill_all_items' => 'fulfillAllItems',
        'sync_inventory_levels_last_run_time' => 'syncInventoryLevelsLastRunTime',
        'sync_orders_last_run_time' => 'syncOrdersLastRunTime',
        'inventory_level_warehouse_controls' => 'inventoryLevelWarehouseControls',
        'warehouse_list' => 'warehouseList',
        'inventory_level_store_controls' => 'inventoryLevelStoreControls',
        'store_list' => 'storeList',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'client_id' => 'setClientId',
        'nonce' => 'setNonce',
        'lob_id' => 'setLobId',
        'order_source_id' => 'setOrderSourceId',
        'integration_partner_id' => 'setIntegrationPartnerId',
        'connection_type' => 'setConnectionType',
        'item_filter_id' => 'setItemFilterId',
        'infoplus_sku_field_to_map' => 'setInfoplusSkuFieldToMap',
        'shopping_cart_sku_field_to_map' => 'setShoppingCartSkuFieldToMap',
        'script_id' => 'setScriptId',
        'name' => 'setName',
        'shopping_cart_store_url' => 'setShoppingCartStoreUrl',
        'access_code' => 'setAccessCode',
        'access_token' => 'setAccessToken',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'default_carrier_id' => 'setDefaultCarrierId',
        'order_shipment_level' => 'setOrderShipmentLevel',
        'create_invoices' => 'setCreateInvoices',
        'sync_orders' => 'setSyncOrders',
        'sync_inventory' => 'setSyncInventory',
        'sync_tracking_data' => 'setSyncTrackingData',
        'sync_inventory_cron_string' => 'setSyncInventoryCronString',
        'fulfill_all_items' => 'setFulfillAllItems',
        'sync_inventory_levels_last_run_time' => 'setSyncInventoryLevelsLastRunTime',
        'sync_orders_last_run_time' => 'setSyncOrdersLastRunTime',
        'inventory_level_warehouse_controls' => 'setInventoryLevelWarehouseControls',
        'warehouse_list' => 'setWarehouseList',
        'inventory_level_store_controls' => 'setInventoryLevelStoreControls',
        'store_list' => 'setStoreList',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'client_id' => 'getClientId',
        'nonce' => 'getNonce',
        'lob_id' => 'getLobId',
        'order_source_id' => 'getOrderSourceId',
        'integration_partner_id' => 'getIntegrationPartnerId',
        'connection_type' => 'getConnectionType',
        'item_filter_id' => 'getItemFilterId',
        'infoplus_sku_field_to_map' => 'getInfoplusSkuFieldToMap',
        'shopping_cart_sku_field_to_map' => 'getShoppingCartSkuFieldToMap',
        'script_id' => 'getScriptId',
        'name' => 'getName',
        'shopping_cart_store_url' => 'getShoppingCartStoreUrl',
        'access_code' => 'getAccessCode',
        'access_token' => 'getAccessToken',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'default_carrier_id' => 'getDefaultCarrierId',
        'order_shipment_level' => 'getOrderShipmentLevel',
        'create_invoices' => 'getCreateInvoices',
        'sync_orders' => 'getSyncOrders',
        'sync_inventory' => 'getSyncInventory',
        'sync_tracking_data' => 'getSyncTrackingData',
        'sync_inventory_cron_string' => 'getSyncInventoryCronString',
        'fulfill_all_items' => 'getFulfillAllItems',
        'sync_inventory_levels_last_run_time' => 'getSyncInventoryLevelsLastRunTime',
        'sync_orders_last_run_time' => 'getSyncOrdersLastRunTime',
        'inventory_level_warehouse_controls' => 'getInventoryLevelWarehouseControls',
        'warehouse_list' => 'getWarehouseList',
        'inventory_level_store_controls' => 'getInventoryLevelStoreControls',
        'store_list' => 'getStoreList',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['nonce'] = isset($data['nonce']) ? $data['nonce'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['order_source_id'] = isset($data['order_source_id']) ? $data['order_source_id'] : null;
        $this->container['integration_partner_id'] = isset($data['integration_partner_id']) ? $data['integration_partner_id'] : null;
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['item_filter_id'] = isset($data['item_filter_id']) ? $data['item_filter_id'] : null;
        $this->container['infoplus_sku_field_to_map'] = isset($data['infoplus_sku_field_to_map']) ? $data['infoplus_sku_field_to_map'] : null;
        $this->container['shopping_cart_sku_field_to_map'] = isset($data['shopping_cart_sku_field_to_map']) ? $data['shopping_cart_sku_field_to_map'] : null;
        $this->container['script_id'] = isset($data['script_id']) ? $data['script_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shopping_cart_store_url'] = isset($data['shopping_cart_store_url']) ? $data['shopping_cart_store_url'] : null;
        $this->container['access_code'] = isset($data['access_code']) ? $data['access_code'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['default_carrier_id'] = isset($data['default_carrier_id']) ? $data['default_carrier_id'] : null;
        $this->container['order_shipment_level'] = isset($data['order_shipment_level']) ? $data['order_shipment_level'] : null;
        $this->container['create_invoices'] = isset($data['create_invoices']) ? $data['create_invoices'] : false;
        $this->container['sync_orders'] = isset($data['sync_orders']) ? $data['sync_orders'] : false;
        $this->container['sync_inventory'] = isset($data['sync_inventory']) ? $data['sync_inventory'] : false;
        $this->container['sync_tracking_data'] = isset($data['sync_tracking_data']) ? $data['sync_tracking_data'] : false;
        $this->container['sync_inventory_cron_string'] = isset($data['sync_inventory_cron_string']) ? $data['sync_inventory_cron_string'] : null;
        $this->container['fulfill_all_items'] = isset($data['fulfill_all_items']) ? $data['fulfill_all_items'] : false;
        $this->container['sync_inventory_levels_last_run_time'] = isset($data['sync_inventory_levels_last_run_time']) ? $data['sync_inventory_levels_last_run_time'] : null;
        $this->container['sync_orders_last_run_time'] = isset($data['sync_orders_last_run_time']) ? $data['sync_orders_last_run_time'] : null;
        $this->container['inventory_level_warehouse_controls'] = isset($data['inventory_level_warehouse_controls']) ? $data['inventory_level_warehouse_controls'] : null;
        $this->container['warehouse_list'] = isset($data['warehouse_list']) ? $data['warehouse_list'] : null;
        $this->container['inventory_level_store_controls'] = isset($data['inventory_level_store_controls']) ? $data['inventory_level_store_controls'] : null;
        $this->container['store_list'] = isset($data['store_list']) ? $data['store_list'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        if ($this->container['order_source_id'] === null) {
            $invalidProperties[] = "'order_source_id' can't be null";
        }
        if ($this->container['integration_partner_id'] === null) {
            $invalidProperties[] = "'integration_partner_id' can't be null";
        }
        if ($this->container['connection_type'] === null) {
            $invalidProperties[] = "'connection_type' can't be null";
        }
        if ($this->container['infoplus_sku_field_to_map'] === null) {
            $invalidProperties[] = "'infoplus_sku_field_to_map' can't be null";
        }
        if ($this->container['shopping_cart_sku_field_to_map'] === null) {
            $invalidProperties[] = "'shopping_cart_sku_field_to_map' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['shopping_cart_store_url'] === null) {
            $invalidProperties[] = "'shopping_cart_store_url' can't be null";
        }
        if ($this->container['access_code'] === null) {
            $invalidProperties[] = "'access_code' can't be null";
        }
        if ($this->container['access_token'] === null) {
            $invalidProperties[] = "'access_token' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ($this->container['order_shipment_level'] === null) {
            $invalidProperties[] = "'order_shipment_level' can't be null";
        }
        if ($this->container['sync_orders'] === null) {
            $invalidProperties[] = "'sync_orders' can't be null";
        }
        if ($this->container['sync_inventory'] === null) {
            $invalidProperties[] = "'sync_inventory' can't be null";
        }
        if ($this->container['sync_tracking_data'] === null) {
            $invalidProperties[] = "'sync_tracking_data' can't be null";
        }
        if ($this->container['fulfill_all_items'] === null) {
            $invalidProperties[] = "'fulfill_all_items' can't be null";
        }
        if ($this->container['inventory_level_warehouse_controls'] === null) {
            $invalidProperties[] = "'inventory_level_warehouse_controls' can't be null";
        }
        if ($this->container['inventory_level_store_controls'] === null) {
            $invalidProperties[] = "'inventory_level_store_controls' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['lob_id'] === null) {
            return false;
        }
        if ($this->container['order_source_id'] === null) {
            return false;
        }
        if ($this->container['integration_partner_id'] === null) {
            return false;
        }
        if ($this->container['connection_type'] === null) {
            return false;
        }
        if ($this->container['infoplus_sku_field_to_map'] === null) {
            return false;
        }
        if ($this->container['shopping_cart_sku_field_to_map'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['shopping_cart_store_url'] === null) {
            return false;
        }
        if ($this->container['access_code'] === null) {
            return false;
        }
        if ($this->container['access_token'] === null) {
            return false;
        }
        if ($this->container['username'] === null) {
            return false;
        }
        if ($this->container['password'] === null) {
            return false;
        }
        if ($this->container['order_shipment_level'] === null) {
            return false;
        }
        if ($this->container['sync_orders'] === null) {
            return false;
        }
        if ($this->container['sync_inventory'] === null) {
            return false;
        }
        if ($this->container['sync_tracking_data'] === null) {
            return false;
        }
        if ($this->container['fulfill_all_items'] === null) {
            return false;
        }
        if ($this->container['inventory_level_warehouse_controls'] === null) {
            return false;
        }
        if ($this->container['inventory_level_store_controls'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return $this
     */
    public function setNonce($nonce)
    {
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets order_source_id
     *
     * @return int
     */
    public function getOrderSourceId()
    {
        return $this->container['order_source_id'];
    }

    /**
     * Sets order_source_id
     *
     * @param int $order_source_id order_source_id
     *
     * @return $this
     */
    public function setOrderSourceId($order_source_id)
    {
        $this->container['order_source_id'] = $order_source_id;

        return $this;
    }

    /**
     * Gets integration_partner_id
     *
     * @return int
     */
    public function getIntegrationPartnerId()
    {
        return $this->container['integration_partner_id'];
    }

    /**
     * Sets integration_partner_id
     *
     * @param int $integration_partner_id integration_partner_id
     *
     * @return $this
     */
    public function setIntegrationPartnerId($integration_partner_id)
    {
        $this->container['integration_partner_id'] = $integration_partner_id;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type connection_type
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets item_filter_id
     *
     * @return int
     */
    public function getItemFilterId()
    {
        return $this->container['item_filter_id'];
    }

    /**
     * Sets item_filter_id
     *
     * @param int $item_filter_id item_filter_id
     *
     * @return $this
     */
    public function setItemFilterId($item_filter_id)
    {
        $this->container['item_filter_id'] = $item_filter_id;

        return $this;
    }

    /**
     * Gets infoplus_sku_field_to_map
     *
     * @return string
     */
    public function getInfoplusSkuFieldToMap()
    {
        return $this->container['infoplus_sku_field_to_map'];
    }

    /**
     * Sets infoplus_sku_field_to_map
     *
     * @param string $infoplus_sku_field_to_map infoplus_sku_field_to_map
     *
     * @return $this
     */
    public function setInfoplusSkuFieldToMap($infoplus_sku_field_to_map)
    {
        $this->container['infoplus_sku_field_to_map'] = $infoplus_sku_field_to_map;

        return $this;
    }

    /**
     * Gets shopping_cart_sku_field_to_map
     *
     * @return string
     */
    public function getShoppingCartSkuFieldToMap()
    {
        return $this->container['shopping_cart_sku_field_to_map'];
    }

    /**
     * Sets shopping_cart_sku_field_to_map
     *
     * @param string $shopping_cart_sku_field_to_map shopping_cart_sku_field_to_map
     *
     * @return $this
     */
    public function setShoppingCartSkuFieldToMap($shopping_cart_sku_field_to_map)
    {
        $this->container['shopping_cart_sku_field_to_map'] = $shopping_cart_sku_field_to_map;

        return $this;
    }

    /**
     * Gets script_id
     *
     * @return int
     */
    public function getScriptId()
    {
        return $this->container['script_id'];
    }

    /**
     * Sets script_id
     *
     * @param int $script_id script_id
     *
     * @return $this
     */
    public function setScriptId($script_id)
    {
        $this->container['script_id'] = $script_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shopping_cart_store_url
     *
     * @return string
     */
    public function getShoppingCartStoreUrl()
    {
        return $this->container['shopping_cart_store_url'];
    }

    /**
     * Sets shopping_cart_store_url
     *
     * @param string $shopping_cart_store_url shopping_cart_store_url
     *
     * @return $this
     */
    public function setShoppingCartStoreUrl($shopping_cart_store_url)
    {
        $this->container['shopping_cart_store_url'] = $shopping_cart_store_url;

        return $this;
    }

    /**
     * Gets access_code
     *
     * @return string
     */
    public function getAccessCode()
    {
        return $this->container['access_code'];
    }

    /**
     * Sets access_code
     *
     * @param string $access_code access_code
     *
     * @return $this
     */
    public function setAccessCode($access_code)
    {
        $this->container['access_code'] = $access_code;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets default_carrier_id
     *
     * @return int
     */
    public function getDefaultCarrierId()
    {
        return $this->container['default_carrier_id'];
    }

    /**
     * Sets default_carrier_id
     *
     * @param int $default_carrier_id default_carrier_id
     *
     * @return $this
     */
    public function setDefaultCarrierId($default_carrier_id)
    {
        $this->container['default_carrier_id'] = $default_carrier_id;

        return $this;
    }

    /**
     * Gets order_shipment_level
     *
     * @return string
     */
    public function getOrderShipmentLevel()
    {
        return $this->container['order_shipment_level'];
    }

    /**
     * Sets order_shipment_level
     *
     * @param string $order_shipment_level order_shipment_level
     *
     * @return $this
     */
    public function setOrderShipmentLevel($order_shipment_level)
    {
        $this->container['order_shipment_level'] = $order_shipment_level;

        return $this;
    }

    /**
     * Gets create_invoices
     *
     * @return bool
     */
    public function getCreateInvoices()
    {
        return $this->container['create_invoices'];
    }

    /**
     * Sets create_invoices
     *
     * @param bool $create_invoices create_invoices
     *
     * @return $this
     */
    public function setCreateInvoices($create_invoices)
    {
        $this->container['create_invoices'] = $create_invoices;

        return $this;
    }

    /**
     * Gets sync_orders
     *
     * @return bool
     */
    public function getSyncOrders()
    {
        return $this->container['sync_orders'];
    }

    /**
     * Sets sync_orders
     *
     * @param bool $sync_orders sync_orders
     *
     * @return $this
     */
    public function setSyncOrders($sync_orders)
    {
        $this->container['sync_orders'] = $sync_orders;

        return $this;
    }

    /**
     * Gets sync_inventory
     *
     * @return bool
     */
    public function getSyncInventory()
    {
        return $this->container['sync_inventory'];
    }

    /**
     * Sets sync_inventory
     *
     * @param bool $sync_inventory sync_inventory
     *
     * @return $this
     */
    public function setSyncInventory($sync_inventory)
    {
        $this->container['sync_inventory'] = $sync_inventory;

        return $this;
    }

    /**
     * Gets sync_tracking_data
     *
     * @return bool
     */
    public function getSyncTrackingData()
    {
        return $this->container['sync_tracking_data'];
    }

    /**
     * Sets sync_tracking_data
     *
     * @param bool $sync_tracking_data sync_tracking_data
     *
     * @return $this
     */
    public function setSyncTrackingData($sync_tracking_data)
    {
        $this->container['sync_tracking_data'] = $sync_tracking_data;

        return $this;
    }

    /**
     * Gets sync_inventory_cron_string
     *
     * @return string
     */
    public function getSyncInventoryCronString()
    {
        return $this->container['sync_inventory_cron_string'];
    }

    /**
     * Sets sync_inventory_cron_string
     *
     * @param string $sync_inventory_cron_string sync_inventory_cron_string
     *
     * @return $this
     */
    public function setSyncInventoryCronString($sync_inventory_cron_string)
    {
        $this->container['sync_inventory_cron_string'] = $sync_inventory_cron_string;

        return $this;
    }

    /**
     * Gets fulfill_all_items
     *
     * @return bool
     */
    public function getFulfillAllItems()
    {
        return $this->container['fulfill_all_items'];
    }

    /**
     * Sets fulfill_all_items
     *
     * @param bool $fulfill_all_items fulfill_all_items
     *
     * @return $this
     */
    public function setFulfillAllItems($fulfill_all_items)
    {
        $this->container['fulfill_all_items'] = $fulfill_all_items;

        return $this;
    }

    /**
     * Gets sync_inventory_levels_last_run_time
     *
     * @return \DateTime
     */
    public function getSyncInventoryLevelsLastRunTime()
    {
        return $this->container['sync_inventory_levels_last_run_time'];
    }

    /**
     * Sets sync_inventory_levels_last_run_time
     *
     * @param \DateTime $sync_inventory_levels_last_run_time sync_inventory_levels_last_run_time
     *
     * @return $this
     */
    public function setSyncInventoryLevelsLastRunTime($sync_inventory_levels_last_run_time)
    {
        $this->container['sync_inventory_levels_last_run_time'] = $sync_inventory_levels_last_run_time;

        return $this;
    }

    /**
     * Gets sync_orders_last_run_time
     *
     * @return \DateTime
     */
    public function getSyncOrdersLastRunTime()
    {
        return $this->container['sync_orders_last_run_time'];
    }

    /**
     * Sets sync_orders_last_run_time
     *
     * @param \DateTime $sync_orders_last_run_time sync_orders_last_run_time
     *
     * @return $this
     */
    public function setSyncOrdersLastRunTime($sync_orders_last_run_time)
    {
        $this->container['sync_orders_last_run_time'] = $sync_orders_last_run_time;

        return $this;
    }

    /**
     * Gets inventory_level_warehouse_controls
     *
     * @return string
     */
    public function getInventoryLevelWarehouseControls()
    {
        return $this->container['inventory_level_warehouse_controls'];
    }

    /**
     * Sets inventory_level_warehouse_controls
     *
     * @param string $inventory_level_warehouse_controls inventory_level_warehouse_controls
     *
     * @return $this
     */
    public function setInventoryLevelWarehouseControls($inventory_level_warehouse_controls)
    {
        $this->container['inventory_level_warehouse_controls'] = $inventory_level_warehouse_controls;

        return $this;
    }

    /**
     * Gets warehouse_list
     *
     * @return \Infoplus\Infoplus\Model\Warehouse[]
     */
    public function getWarehouseList()
    {
        return $this->container['warehouse_list'];
    }

    /**
     * Sets warehouse_list
     *
     * @param \Infoplus\Infoplus\Model\Warehouse[] $warehouse_list warehouse_list
     *
     * @return $this
     */
    public function setWarehouseList($warehouse_list)
    {
        $this->container['warehouse_list'] = $warehouse_list;

        return $this;
    }

    /**
     * Gets inventory_level_store_controls
     *
     * @return string
     */
    public function getInventoryLevelStoreControls()
    {
        return $this->container['inventory_level_store_controls'];
    }

    /**
     * Sets inventory_level_store_controls
     *
     * @param string $inventory_level_store_controls inventory_level_store_controls
     *
     * @return $this
     */
    public function setInventoryLevelStoreControls($inventory_level_store_controls)
    {
        $this->container['inventory_level_store_controls'] = $inventory_level_store_controls;

        return $this;
    }

    /**
     * Gets store_list
     *
     * @return \Infoplus\Infoplus\Model\Store[]
     */
    public function getStoreList()
    {
        return $this->container['store_list'];
    }

    /**
     * Sets store_list
     *
     * @param \Infoplus\Infoplus\Model\Store[] $store_list store_list
     *
     * @return $this
     */
    public function setStoreList($store_list)
    {
        $this->container['store_list'] = $store_list;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


