<?php
/**
 * Warehouse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * Warehouse Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Warehouse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'warehouse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'client' => 'int',
        'name' => 'string',
        'address' => 'string',
        'company' => 'string',
        'street1' => 'string',
        'street2' => 'string',
        'street3' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'location_barcode_prefix' => 'string',
        'lpn_prefix' => 'string',
        'time_zone' => 'string',
        'pack_station_allow_packing_before_pick_work_is_complete' => 'bool',
        'pack_station_skip_carton_lpn' => 'bool',
        'pack_station_require_confirm_on_error' => 'bool',
        'pack_station_allow_scanning_sku_to_identify_orders' => 'bool',
        'pack_station_allow_entry_of_item_quantities' => 'bool',
        'ship_station_weight_check_packed_orders' => 'bool',
        'ship_station_show_user_weight_check_exceptions' => 'bool',
        'ship_station_auto_print_pre_generated_labels' => 'bool',
        'ship_station_allow_scanning_sku_to_identify_orders' => 'bool',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'client' => 'int32',
        'name' => null,
        'address' => null,
        'company' => null,
        'street1' => null,
        'street2' => null,
        'street3' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'phone' => null,
        'location_barcode_prefix' => null,
        'lpn_prefix' => null,
        'time_zone' => null,
        'pack_station_allow_packing_before_pick_work_is_complete' => null,
        'pack_station_skip_carton_lpn' => null,
        'pack_station_require_confirm_on_error' => null,
        'pack_station_allow_scanning_sku_to_identify_orders' => null,
        'pack_station_allow_entry_of_item_quantities' => null,
        'ship_station_weight_check_packed_orders' => null,
        'ship_station_show_user_weight_check_exceptions' => null,
        'ship_station_auto_print_pre_generated_labels' => null,
        'ship_station_allow_scanning_sku_to_identify_orders' => null,
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'client' => 'client',
        'name' => 'name',
        'address' => 'address',
        'company' => 'company',
        'street1' => 'street1',
        'street2' => 'street2',
        'street3' => 'street3',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'phone' => 'phone',
        'location_barcode_prefix' => 'locationBarcodePrefix',
        'lpn_prefix' => 'lpnPrefix',
        'time_zone' => 'timeZone',
        'pack_station_allow_packing_before_pick_work_is_complete' => 'packStationAllowPackingBeforePickWorkIsComplete',
        'pack_station_skip_carton_lpn' => 'packStationSkipCartonLPN',
        'pack_station_require_confirm_on_error' => 'packStationRequireConfirmOnError',
        'pack_station_allow_scanning_sku_to_identify_orders' => 'packStationAllowScanningSKUToIdentifyOrders',
        'pack_station_allow_entry_of_item_quantities' => 'packStationAllowEntryOfItemQuantities',
        'ship_station_weight_check_packed_orders' => 'shipStationWeightCheckPackedOrders',
        'ship_station_show_user_weight_check_exceptions' => 'shipStationShowUserWeightCheckExceptions',
        'ship_station_auto_print_pre_generated_labels' => 'shipStationAutoPrintPreGeneratedLabels',
        'ship_station_allow_scanning_sku_to_identify_orders' => 'shipStationAllowScanningSKUToIdentifyOrders',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'client' => 'setClient',
        'name' => 'setName',
        'address' => 'setAddress',
        'company' => 'setCompany',
        'street1' => 'setStreet1',
        'street2' => 'setStreet2',
        'street3' => 'setStreet3',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'location_barcode_prefix' => 'setLocationBarcodePrefix',
        'lpn_prefix' => 'setLpnPrefix',
        'time_zone' => 'setTimeZone',
        'pack_station_allow_packing_before_pick_work_is_complete' => 'setPackStationAllowPackingBeforePickWorkIsComplete',
        'pack_station_skip_carton_lpn' => 'setPackStationSkipCartonLpn',
        'pack_station_require_confirm_on_error' => 'setPackStationRequireConfirmOnError',
        'pack_station_allow_scanning_sku_to_identify_orders' => 'setPackStationAllowScanningSkuToIdentifyOrders',
        'pack_station_allow_entry_of_item_quantities' => 'setPackStationAllowEntryOfItemQuantities',
        'ship_station_weight_check_packed_orders' => 'setShipStationWeightCheckPackedOrders',
        'ship_station_show_user_weight_check_exceptions' => 'setShipStationShowUserWeightCheckExceptions',
        'ship_station_auto_print_pre_generated_labels' => 'setShipStationAutoPrintPreGeneratedLabels',
        'ship_station_allow_scanning_sku_to_identify_orders' => 'setShipStationAllowScanningSkuToIdentifyOrders',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'client' => 'getClient',
        'name' => 'getName',
        'address' => 'getAddress',
        'company' => 'getCompany',
        'street1' => 'getStreet1',
        'street2' => 'getStreet2',
        'street3' => 'getStreet3',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'location_barcode_prefix' => 'getLocationBarcodePrefix',
        'lpn_prefix' => 'getLpnPrefix',
        'time_zone' => 'getTimeZone',
        'pack_station_allow_packing_before_pick_work_is_complete' => 'getPackStationAllowPackingBeforePickWorkIsComplete',
        'pack_station_skip_carton_lpn' => 'getPackStationSkipCartonLpn',
        'pack_station_require_confirm_on_error' => 'getPackStationRequireConfirmOnError',
        'pack_station_allow_scanning_sku_to_identify_orders' => 'getPackStationAllowScanningSkuToIdentifyOrders',
        'pack_station_allow_entry_of_item_quantities' => 'getPackStationAllowEntryOfItemQuantities',
        'ship_station_weight_check_packed_orders' => 'getShipStationWeightCheckPackedOrders',
        'ship_station_show_user_weight_check_exceptions' => 'getShipStationShowUserWeightCheckExceptions',
        'ship_station_auto_print_pre_generated_labels' => 'getShipStationAutoPrintPreGeneratedLabels',
        'ship_station_allow_scanning_sku_to_identify_orders' => 'getShipStationAllowScanningSkuToIdentifyOrders',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['street1'] = isset($data['street1']) ? $data['street1'] : null;
        $this->container['street2'] = isset($data['street2']) ? $data['street2'] : null;
        $this->container['street3'] = isset($data['street3']) ? $data['street3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['location_barcode_prefix'] = isset($data['location_barcode_prefix']) ? $data['location_barcode_prefix'] : null;
        $this->container['lpn_prefix'] = isset($data['lpn_prefix']) ? $data['lpn_prefix'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['pack_station_allow_packing_before_pick_work_is_complete'] = isset($data['pack_station_allow_packing_before_pick_work_is_complete']) ? $data['pack_station_allow_packing_before_pick_work_is_complete'] : false;
        $this->container['pack_station_skip_carton_lpn'] = isset($data['pack_station_skip_carton_lpn']) ? $data['pack_station_skip_carton_lpn'] : false;
        $this->container['pack_station_require_confirm_on_error'] = isset($data['pack_station_require_confirm_on_error']) ? $data['pack_station_require_confirm_on_error'] : false;
        $this->container['pack_station_allow_scanning_sku_to_identify_orders'] = isset($data['pack_station_allow_scanning_sku_to_identify_orders']) ? $data['pack_station_allow_scanning_sku_to_identify_orders'] : false;
        $this->container['pack_station_allow_entry_of_item_quantities'] = isset($data['pack_station_allow_entry_of_item_quantities']) ? $data['pack_station_allow_entry_of_item_quantities'] : false;
        $this->container['ship_station_weight_check_packed_orders'] = isset($data['ship_station_weight_check_packed_orders']) ? $data['ship_station_weight_check_packed_orders'] : false;
        $this->container['ship_station_show_user_weight_check_exceptions'] = isset($data['ship_station_show_user_weight_check_exceptions']) ? $data['ship_station_show_user_weight_check_exceptions'] : false;
        $this->container['ship_station_auto_print_pre_generated_labels'] = isset($data['ship_station_auto_print_pre_generated_labels']) ? $data['ship_station_auto_print_pre_generated_labels'] : false;
        $this->container['ship_station_allow_scanning_sku_to_identify_orders'] = isset($data['ship_station_allow_scanning_sku_to_identify_orders']) ? $data['ship_station_allow_scanning_sku_to_identify_orders'] : false;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ($this->container['street1'] === null) {
            $invalidProperties[] = "'street1' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['pack_station_allow_packing_before_pick_work_is_complete'] === null) {
            $invalidProperties[] = "'pack_station_allow_packing_before_pick_work_is_complete' can't be null";
        }
        if ($this->container['pack_station_skip_carton_lpn'] === null) {
            $invalidProperties[] = "'pack_station_skip_carton_lpn' can't be null";
        }
        if ($this->container['pack_station_require_confirm_on_error'] === null) {
            $invalidProperties[] = "'pack_station_require_confirm_on_error' can't be null";
        }
        if ($this->container['pack_station_allow_scanning_sku_to_identify_orders'] === null) {
            $invalidProperties[] = "'pack_station_allow_scanning_sku_to_identify_orders' can't be null";
        }
        if ($this->container['pack_station_allow_entry_of_item_quantities'] === null) {
            $invalidProperties[] = "'pack_station_allow_entry_of_item_quantities' can't be null";
        }
        if ($this->container['ship_station_weight_check_packed_orders'] === null) {
            $invalidProperties[] = "'ship_station_weight_check_packed_orders' can't be null";
        }
        if ($this->container['ship_station_show_user_weight_check_exceptions'] === null) {
            $invalidProperties[] = "'ship_station_show_user_weight_check_exceptions' can't be null";
        }
        if ($this->container['ship_station_auto_print_pre_generated_labels'] === null) {
            $invalidProperties[] = "'ship_station_auto_print_pre_generated_labels' can't be null";
        }
        if ($this->container['ship_station_allow_scanning_sku_to_identify_orders'] === null) {
            $invalidProperties[] = "'ship_station_allow_scanning_sku_to_identify_orders' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['client'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        if ($this->container['street1'] === null) {
            return false;
        }
        if ($this->container['city'] === null) {
            return false;
        }
        if ($this->container['zip'] === null) {
            return false;
        }
        if ($this->container['country'] === null) {
            return false;
        }
        if ($this->container['phone'] === null) {
            return false;
        }
        if ($this->container['pack_station_allow_packing_before_pick_work_is_complete'] === null) {
            return false;
        }
        if ($this->container['pack_station_skip_carton_lpn'] === null) {
            return false;
        }
        if ($this->container['pack_station_require_confirm_on_error'] === null) {
            return false;
        }
        if ($this->container['pack_station_allow_scanning_sku_to_identify_orders'] === null) {
            return false;
        }
        if ($this->container['pack_station_allow_entry_of_item_quantities'] === null) {
            return false;
        }
        if ($this->container['ship_station_weight_check_packed_orders'] === null) {
            return false;
        }
        if ($this->container['ship_station_show_user_weight_check_exceptions'] === null) {
            return false;
        }
        if ($this->container['ship_station_auto_print_pre_generated_labels'] === null) {
            return false;
        }
        if ($this->container['ship_station_allow_scanning_sku_to_identify_orders'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client
     *
     * @return int
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param int $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string $street1 street1
     *
     * @return $this
     */
    public function setStreet1($street1)
    {
        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string $street2 street2
     *
     * @return $this
     */
    public function setStreet2($street2)
    {
        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets street3
     *
     * @return string
     */
    public function getStreet3()
    {
        return $this->container['street3'];
    }

    /**
     * Sets street3
     *
     * @param string $street3 street3
     *
     * @return $this
     */
    public function setStreet3($street3)
    {
        $this->container['street3'] = $street3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets location_barcode_prefix
     *
     * @return string
     */
    public function getLocationBarcodePrefix()
    {
        return $this->container['location_barcode_prefix'];
    }

    /**
     * Sets location_barcode_prefix
     *
     * @param string $location_barcode_prefix location_barcode_prefix
     *
     * @return $this
     */
    public function setLocationBarcodePrefix($location_barcode_prefix)
    {
        $this->container['location_barcode_prefix'] = $location_barcode_prefix;

        return $this;
    }

    /**
     * Gets lpn_prefix
     *
     * @return string
     */
    public function getLpnPrefix()
    {
        return $this->container['lpn_prefix'];
    }

    /**
     * Sets lpn_prefix
     *
     * @param string $lpn_prefix lpn_prefix
     *
     * @return $this
     */
    public function setLpnPrefix($lpn_prefix)
    {
        $this->container['lpn_prefix'] = $lpn_prefix;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets pack_station_allow_packing_before_pick_work_is_complete
     *
     * @return bool
     */
    public function getPackStationAllowPackingBeforePickWorkIsComplete()
    {
        return $this->container['pack_station_allow_packing_before_pick_work_is_complete'];
    }

    /**
     * Sets pack_station_allow_packing_before_pick_work_is_complete
     *
     * @param bool $pack_station_allow_packing_before_pick_work_is_complete pack_station_allow_packing_before_pick_work_is_complete
     *
     * @return $this
     */
    public function setPackStationAllowPackingBeforePickWorkIsComplete($pack_station_allow_packing_before_pick_work_is_complete)
    {
        $this->container['pack_station_allow_packing_before_pick_work_is_complete'] = $pack_station_allow_packing_before_pick_work_is_complete;

        return $this;
    }

    /**
     * Gets pack_station_skip_carton_lpn
     *
     * @return bool
     */
    public function getPackStationSkipCartonLpn()
    {
        return $this->container['pack_station_skip_carton_lpn'];
    }

    /**
     * Sets pack_station_skip_carton_lpn
     *
     * @param bool $pack_station_skip_carton_lpn pack_station_skip_carton_lpn
     *
     * @return $this
     */
    public function setPackStationSkipCartonLpn($pack_station_skip_carton_lpn)
    {
        $this->container['pack_station_skip_carton_lpn'] = $pack_station_skip_carton_lpn;

        return $this;
    }

    /**
     * Gets pack_station_require_confirm_on_error
     *
     * @return bool
     */
    public function getPackStationRequireConfirmOnError()
    {
        return $this->container['pack_station_require_confirm_on_error'];
    }

    /**
     * Sets pack_station_require_confirm_on_error
     *
     * @param bool $pack_station_require_confirm_on_error pack_station_require_confirm_on_error
     *
     * @return $this
     */
    public function setPackStationRequireConfirmOnError($pack_station_require_confirm_on_error)
    {
        $this->container['pack_station_require_confirm_on_error'] = $pack_station_require_confirm_on_error;

        return $this;
    }

    /**
     * Gets pack_station_allow_scanning_sku_to_identify_orders
     *
     * @return bool
     */
    public function getPackStationAllowScanningSkuToIdentifyOrders()
    {
        return $this->container['pack_station_allow_scanning_sku_to_identify_orders'];
    }

    /**
     * Sets pack_station_allow_scanning_sku_to_identify_orders
     *
     * @param bool $pack_station_allow_scanning_sku_to_identify_orders pack_station_allow_scanning_sku_to_identify_orders
     *
     * @return $this
     */
    public function setPackStationAllowScanningSkuToIdentifyOrders($pack_station_allow_scanning_sku_to_identify_orders)
    {
        $this->container['pack_station_allow_scanning_sku_to_identify_orders'] = $pack_station_allow_scanning_sku_to_identify_orders;

        return $this;
    }

    /**
     * Gets pack_station_allow_entry_of_item_quantities
     *
     * @return bool
     */
    public function getPackStationAllowEntryOfItemQuantities()
    {
        return $this->container['pack_station_allow_entry_of_item_quantities'];
    }

    /**
     * Sets pack_station_allow_entry_of_item_quantities
     *
     * @param bool $pack_station_allow_entry_of_item_quantities pack_station_allow_entry_of_item_quantities
     *
     * @return $this
     */
    public function setPackStationAllowEntryOfItemQuantities($pack_station_allow_entry_of_item_quantities)
    {
        $this->container['pack_station_allow_entry_of_item_quantities'] = $pack_station_allow_entry_of_item_quantities;

        return $this;
    }

    /**
     * Gets ship_station_weight_check_packed_orders
     *
     * @return bool
     */
    public function getShipStationWeightCheckPackedOrders()
    {
        return $this->container['ship_station_weight_check_packed_orders'];
    }

    /**
     * Sets ship_station_weight_check_packed_orders
     *
     * @param bool $ship_station_weight_check_packed_orders ship_station_weight_check_packed_orders
     *
     * @return $this
     */
    public function setShipStationWeightCheckPackedOrders($ship_station_weight_check_packed_orders)
    {
        $this->container['ship_station_weight_check_packed_orders'] = $ship_station_weight_check_packed_orders;

        return $this;
    }

    /**
     * Gets ship_station_show_user_weight_check_exceptions
     *
     * @return bool
     */
    public function getShipStationShowUserWeightCheckExceptions()
    {
        return $this->container['ship_station_show_user_weight_check_exceptions'];
    }

    /**
     * Sets ship_station_show_user_weight_check_exceptions
     *
     * @param bool $ship_station_show_user_weight_check_exceptions ship_station_show_user_weight_check_exceptions
     *
     * @return $this
     */
    public function setShipStationShowUserWeightCheckExceptions($ship_station_show_user_weight_check_exceptions)
    {
        $this->container['ship_station_show_user_weight_check_exceptions'] = $ship_station_show_user_weight_check_exceptions;

        return $this;
    }

    /**
     * Gets ship_station_auto_print_pre_generated_labels
     *
     * @return bool
     */
    public function getShipStationAutoPrintPreGeneratedLabels()
    {
        return $this->container['ship_station_auto_print_pre_generated_labels'];
    }

    /**
     * Sets ship_station_auto_print_pre_generated_labels
     *
     * @param bool $ship_station_auto_print_pre_generated_labels ship_station_auto_print_pre_generated_labels
     *
     * @return $this
     */
    public function setShipStationAutoPrintPreGeneratedLabels($ship_station_auto_print_pre_generated_labels)
    {
        $this->container['ship_station_auto_print_pre_generated_labels'] = $ship_station_auto_print_pre_generated_labels;

        return $this;
    }

    /**
     * Gets ship_station_allow_scanning_sku_to_identify_orders
     *
     * @return bool
     */
    public function getShipStationAllowScanningSkuToIdentifyOrders()
    {
        return $this->container['ship_station_allow_scanning_sku_to_identify_orders'];
    }

    /**
     * Sets ship_station_allow_scanning_sku_to_identify_orders
     *
     * @param bool $ship_station_allow_scanning_sku_to_identify_orders ship_station_allow_scanning_sku_to_identify_orders
     *
     * @return $this
     */
    public function setShipStationAllowScanningSkuToIdentifyOrders($ship_station_allow_scanning_sku_to_identify_orders)
    {
        $this->container['ship_station_allow_scanning_sku_to_identify_orders'] = $ship_station_allow_scanning_sku_to_identify_orders;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


