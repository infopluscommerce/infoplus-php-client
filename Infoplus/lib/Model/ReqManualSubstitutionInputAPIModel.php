<?php
/**
 * ReqManualSubstitutionInputAPIModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * ReqManualSubstitutionInputAPIModel Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReqManualSubstitutionInputAPIModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReqManualSubstitutionInputAPIModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_no_list' => 'float[]',
        'original_sku' => 'string',
        'original_kit_sku' => 'string',
        'original_quantity' => 'int',
        'original_component_sku' => 'string',
        'new_sku' => 'string',
        'new_quantity' => 'int',
        'edit_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_no_list' => null,
        'original_sku' => null,
        'original_kit_sku' => null,
        'original_quantity' => 'int32',
        'original_component_sku' => null,
        'new_sku' => null,
        'new_quantity' => 'int32',
        'edit_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_no_list' => 'orderNoList',
        'original_sku' => 'originalSKU',
        'original_kit_sku' => 'originalKitSKU',
        'original_quantity' => 'originalQuantity',
        'original_component_sku' => 'originalComponentSKU',
        'new_sku' => 'newSKU',
        'new_quantity' => 'newQuantity',
        'edit_type' => 'editType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_no_list' => 'setOrderNoList',
        'original_sku' => 'setOriginalSku',
        'original_kit_sku' => 'setOriginalKitSku',
        'original_quantity' => 'setOriginalQuantity',
        'original_component_sku' => 'setOriginalComponentSku',
        'new_sku' => 'setNewSku',
        'new_quantity' => 'setNewQuantity',
        'edit_type' => 'setEditType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_no_list' => 'getOrderNoList',
        'original_sku' => 'getOriginalSku',
        'original_kit_sku' => 'getOriginalKitSku',
        'original_quantity' => 'getOriginalQuantity',
        'original_component_sku' => 'getOriginalComponentSku',
        'new_sku' => 'getNewSku',
        'new_quantity' => 'getNewQuantity',
        'edit_type' => 'getEditType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_no_list'] = isset($data['order_no_list']) ? $data['order_no_list'] : null;
        $this->container['original_sku'] = isset($data['original_sku']) ? $data['original_sku'] : null;
        $this->container['original_kit_sku'] = isset($data['original_kit_sku']) ? $data['original_kit_sku'] : null;
        $this->container['original_quantity'] = isset($data['original_quantity']) ? $data['original_quantity'] : null;
        $this->container['original_component_sku'] = isset($data['original_component_sku']) ? $data['original_component_sku'] : null;
        $this->container['new_sku'] = isset($data['new_sku']) ? $data['new_sku'] : null;
        $this->container['new_quantity'] = isset($data['new_quantity']) ? $data['new_quantity'] : null;
        $this->container['edit_type'] = isset($data['edit_type']) ? $data['edit_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['edit_type'] === null) {
            $invalidProperties[] = "'edit_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['edit_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_no_list
     *
     * @return float[]
     */
    public function getOrderNoList()
    {
        return $this->container['order_no_list'];
    }

    /**
     * Sets order_no_list
     *
     * @param float[] $order_no_list order_no_list
     *
     * @return $this
     */
    public function setOrderNoList($order_no_list)
    {
        $this->container['order_no_list'] = $order_no_list;

        return $this;
    }

    /**
     * Gets original_sku
     *
     * @return string
     */
    public function getOriginalSku()
    {
        return $this->container['original_sku'];
    }

    /**
     * Sets original_sku
     *
     * @param string $original_sku original_sku
     *
     * @return $this
     */
    public function setOriginalSku($original_sku)
    {
        $this->container['original_sku'] = $original_sku;

        return $this;
    }

    /**
     * Gets original_kit_sku
     *
     * @return string
     */
    public function getOriginalKitSku()
    {
        return $this->container['original_kit_sku'];
    }

    /**
     * Sets original_kit_sku
     *
     * @param string $original_kit_sku original_kit_sku
     *
     * @return $this
     */
    public function setOriginalKitSku($original_kit_sku)
    {
        $this->container['original_kit_sku'] = $original_kit_sku;

        return $this;
    }

    /**
     * Gets original_quantity
     *
     * @return int
     */
    public function getOriginalQuantity()
    {
        return $this->container['original_quantity'];
    }

    /**
     * Sets original_quantity
     *
     * @param int $original_quantity original_quantity
     *
     * @return $this
     */
    public function setOriginalQuantity($original_quantity)
    {
        $this->container['original_quantity'] = $original_quantity;

        return $this;
    }

    /**
     * Gets original_component_sku
     *
     * @return string
     */
    public function getOriginalComponentSku()
    {
        return $this->container['original_component_sku'];
    }

    /**
     * Sets original_component_sku
     *
     * @param string $original_component_sku original_component_sku
     *
     * @return $this
     */
    public function setOriginalComponentSku($original_component_sku)
    {
        $this->container['original_component_sku'] = $original_component_sku;

        return $this;
    }

    /**
     * Gets new_sku
     *
     * @return string
     */
    public function getNewSku()
    {
        return $this->container['new_sku'];
    }

    /**
     * Sets new_sku
     *
     * @param string $new_sku new_sku
     *
     * @return $this
     */
    public function setNewSku($new_sku)
    {
        $this->container['new_sku'] = $new_sku;

        return $this;
    }

    /**
     * Gets new_quantity
     *
     * @return int
     */
    public function getNewQuantity()
    {
        return $this->container['new_quantity'];
    }

    /**
     * Sets new_quantity
     *
     * @param int $new_quantity new_quantity
     *
     * @return $this
     */
    public function setNewQuantity($new_quantity)
    {
        $this->container['new_quantity'] = $new_quantity;

        return $this;
    }

    /**
     * Gets edit_type
     *
     * @return string
     */
    public function getEditType()
    {
        return $this->container['edit_type'];
    }

    /**
     * Sets edit_type
     *
     * @param string $edit_type edit_type
     *
     * @return $this
     */
    public function setEditType($edit_type)
    {
        $this->container['edit_type'] = $edit_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


