<?php
/**
 * ReceivingWorksheet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * ReceivingWorksheet Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceivingWorksheet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'receivingWorksheet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'warehouse_id' => 'int',
        'po_no_id' => 'int',
        'lob_id' => 'int',
        'vendor_id' => 'int',
        'status' => 'string',
        'service_level' => 'string',
        'receiving_process_id' => 'int',
        'dock_date' => '\DateTime',
        'created_by' => 'int',
        'worksheet_name' => 'string',
        'carrier' => 'string',
        'on_the_dock' => 'bool',
        'auto_commit' => 'bool',
        'line_items' => '\Infoplus\Infoplus\Model\ReceivingWorksheetLineItem[]',
        'notes' => 'string',
        'work_batch_id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'warehouse_id' => 'int32',
        'po_no_id' => 'int32',
        'lob_id' => 'int32',
        'vendor_id' => 'int32',
        'status' => null,
        'service_level' => null,
        'receiving_process_id' => 'int32',
        'dock_date' => 'date-time',
        'created_by' => 'int32',
        'worksheet_name' => null,
        'carrier' => null,
        'on_the_dock' => null,
        'auto_commit' => null,
        'line_items' => null,
        'notes' => null,
        'work_batch_id' => 'int32',
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'warehouse_id' => 'warehouseId',
        'po_no_id' => 'poNoId',
        'lob_id' => 'lobId',
        'vendor_id' => 'vendorId',
        'status' => 'status',
        'service_level' => 'serviceLevel',
        'receiving_process_id' => 'receivingProcessId',
        'dock_date' => 'dockDate',
        'created_by' => 'createdBy',
        'worksheet_name' => 'worksheetName',
        'carrier' => 'carrier',
        'on_the_dock' => 'onTheDock',
        'auto_commit' => 'autoCommit',
        'line_items' => 'lineItems',
        'notes' => 'notes',
        'work_batch_id' => 'workBatchId',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'warehouse_id' => 'setWarehouseId',
        'po_no_id' => 'setPoNoId',
        'lob_id' => 'setLobId',
        'vendor_id' => 'setVendorId',
        'status' => 'setStatus',
        'service_level' => 'setServiceLevel',
        'receiving_process_id' => 'setReceivingProcessId',
        'dock_date' => 'setDockDate',
        'created_by' => 'setCreatedBy',
        'worksheet_name' => 'setWorksheetName',
        'carrier' => 'setCarrier',
        'on_the_dock' => 'setOnTheDock',
        'auto_commit' => 'setAutoCommit',
        'line_items' => 'setLineItems',
        'notes' => 'setNotes',
        'work_batch_id' => 'setWorkBatchId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'warehouse_id' => 'getWarehouseId',
        'po_no_id' => 'getPoNoId',
        'lob_id' => 'getLobId',
        'vendor_id' => 'getVendorId',
        'status' => 'getStatus',
        'service_level' => 'getServiceLevel',
        'receiving_process_id' => 'getReceivingProcessId',
        'dock_date' => 'getDockDate',
        'created_by' => 'getCreatedBy',
        'worksheet_name' => 'getWorksheetName',
        'carrier' => 'getCarrier',
        'on_the_dock' => 'getOnTheDock',
        'auto_commit' => 'getAutoCommit',
        'line_items' => 'getLineItems',
        'notes' => 'getNotes',
        'work_batch_id' => 'getWorkBatchId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['po_no_id'] = isset($data['po_no_id']) ? $data['po_no_id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['service_level'] = isset($data['service_level']) ? $data['service_level'] : null;
        $this->container['receiving_process_id'] = isset($data['receiving_process_id']) ? $data['receiving_process_id'] : null;
        $this->container['dock_date'] = isset($data['dock_date']) ? $data['dock_date'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['worksheet_name'] = isset($data['worksheet_name']) ? $data['worksheet_name'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['on_the_dock'] = isset($data['on_the_dock']) ? $data['on_the_dock'] : false;
        $this->container['auto_commit'] = isset($data['auto_commit']) ? $data['auto_commit'] : false;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['work_batch_id'] = isset($data['work_batch_id']) ? $data['work_batch_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        if ($this->container['service_level'] === null) {
            $invalidProperties[] = "'service_level' can't be null";
        }
        if ($this->container['worksheet_name'] === null) {
            $invalidProperties[] = "'worksheet_name' can't be null";
        }
        if ($this->container['auto_commit'] === null) {
            $invalidProperties[] = "'auto_commit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['warehouse_id'] === null) {
            return false;
        }
        if ($this->container['service_level'] === null) {
            return false;
        }
        if ($this->container['worksheet_name'] === null) {
            return false;
        }
        if ($this->container['auto_commit'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets po_no_id
     *
     * @return int
     */
    public function getPoNoId()
    {
        return $this->container['po_no_id'];
    }

    /**
     * Sets po_no_id
     *
     * @param int $po_no_id po_no_id
     *
     * @return $this
     */
    public function setPoNoId($po_no_id)
    {
        $this->container['po_no_id'] = $po_no_id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets service_level
     *
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     *
     * @param string $service_level service_level
     *
     * @return $this
     */
    public function setServiceLevel($service_level)
    {
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets receiving_process_id
     *
     * @return int
     */
    public function getReceivingProcessId()
    {
        return $this->container['receiving_process_id'];
    }

    /**
     * Sets receiving_process_id
     *
     * @param int $receiving_process_id receiving_process_id
     *
     * @return $this
     */
    public function setReceivingProcessId($receiving_process_id)
    {
        $this->container['receiving_process_id'] = $receiving_process_id;

        return $this;
    }

    /**
     * Gets dock_date
     *
     * @return \DateTime
     */
    public function getDockDate()
    {
        return $this->container['dock_date'];
    }

    /**
     * Sets dock_date
     *
     * @param \DateTime $dock_date dock_date
     *
     * @return $this
     */
    public function setDockDate($dock_date)
    {
        $this->container['dock_date'] = $dock_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets worksheet_name
     *
     * @return string
     */
    public function getWorksheetName()
    {
        return $this->container['worksheet_name'];
    }

    /**
     * Sets worksheet_name
     *
     * @param string $worksheet_name worksheet_name
     *
     * @return $this
     */
    public function setWorksheetName($worksheet_name)
    {
        $this->container['worksheet_name'] = $worksheet_name;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets on_the_dock
     *
     * @return bool
     */
    public function getOnTheDock()
    {
        return $this->container['on_the_dock'];
    }

    /**
     * Sets on_the_dock
     *
     * @param bool $on_the_dock on_the_dock
     *
     * @return $this
     */
    public function setOnTheDock($on_the_dock)
    {
        $this->container['on_the_dock'] = $on_the_dock;

        return $this;
    }

    /**
     * Gets auto_commit
     *
     * @return bool
     */
    public function getAutoCommit()
    {
        return $this->container['auto_commit'];
    }

    /**
     * Sets auto_commit
     *
     * @param bool $auto_commit auto_commit
     *
     * @return $this
     */
    public function setAutoCommit($auto_commit)
    {
        $this->container['auto_commit'] = $auto_commit;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Infoplus\Infoplus\Model\ReceivingWorksheetLineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Infoplus\Infoplus\Model\ReceivingWorksheetLineItem[] $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets work_batch_id
     *
     * @return int
     */
    public function getWorkBatchId()
    {
        return $this->container['work_batch_id'];
    }

    /**
     * Sets work_batch_id
     *
     * @param int $work_batch_id work_batch_id
     *
     * @return $this
     */
    public function setWorkBatchId($work_batch_id)
    {
        $this->container['work_batch_id'] = $work_batch_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


