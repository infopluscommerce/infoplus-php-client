<?php
/**
 * PerpetualInventoryLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * PerpetualInventoryLog Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PerpetualInventoryLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'perpetualInventoryLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'item_receipt_location_id' => 'int',
        'item_receipt_id' => 'int',
        'asn_id' => 'int',
        'lob_id' => 'int',
        'legacy_po_no' => 'string',
        'warehouse_id' => 'int',
        'current_quantity' => 'int',
        'address' => 'string',
        'warehouse_location_id' => 'int',
        'location_status' => 'string',
        'order_date' => '\DateTime',
        'receipt_status' => 'string',
        'fact_cost' => 'float',
        'ml_cost' => 'float',
        'sku' => 'string',
        'order_quantity' => 'int',
        'requested_delivery_date' => '\DateTime',
        'unit_code' => 'string',
        'wrap_code' => 'string',
        'units_per_wrap' => 'int',
        'cost' => 'float',
        'sell' => 'float',
        'pricing_per' => 'string',
        'max_freight' => 'float',
        'charge_freight' => 'string',
        'max_other' => 'float',
        'dist_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'void_date' => '\DateTime',
        'freeze_action' => 'string',
        'rev_date' => 'string',
        'art_back' => 'string',
        'origin' => 'string',
        'sample' => 'int',
        'sample_to' => 'string',
        'max_overs' => 'int',
        'max_unders' => 'int',
        'received_sfp' => 'int',
        'budget_code' => 'string',
        'accounting_code' => 'string',
        'tax_exempt' => 'string',
        'capitalize' => 'string',
        'accrual' => 'string',
        'odd_quantity' => 'int',
        'freight_cost' => 'float',
        'received_date' => '\DateTime',
        'received_quantity' => 'int',
        'from_prod' => 'int',
        'sfp_complete' => 'string',
        'end_quantity' => 'int',
        'end_val' => 'float',
        'end_fact' => 'float',
        'interim_quantity' => 'int',
        'interim_val' => 'float',
        'interim_fact' => 'float',
        'last_act' => '\DateTime',
        'weight_per_wrap' => 'float',
        'norcs' => 'string',
        'vendor_id' => 'int',
        'bs_vendor' => 'int',
        'ml_vendor' => 'int',
        'receipt_no' => 'int',
        'paid_full' => 'string',
        'entered_by' => 'string',
        'received_by' => 'string',
        'line_no' => 'int',
        'prod_lot' => 'string',
        'product_id_tag' => 'string',
        'units_per_case' => 'int',
        'case_weight' => 'float',
        'height' => 'float',
        'width' => 'float',
        'length' => 'float',
        'dock_date' => '\DateTime',
        'impressions' => 'int',
        'asn_line' => 'int',
        'updated_at' => '\DateTime',
        'item_forward_lot_mixing_rule' => 'string',
        'item_storage_lot_mixing_rule' => 'string',
        'item_forward_item_mixing_rule' => 'string',
        'item_storage_item_mixing_rule' => 'string',
        'item_allocation_rule' => 'string',
        'item_barcode_field' => 'string',
        'item_warehouse_display_field' => 'string',
        'item_product_id_tag_scheme_id' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'item_receipt_location_id' => 'int32',
        'item_receipt_id' => 'int32',
        'asn_id' => 'int32',
        'lob_id' => 'int32',
        'legacy_po_no' => null,
        'warehouse_id' => 'int32',
        'current_quantity' => 'int32',
        'address' => null,
        'warehouse_location_id' => 'int32',
        'location_status' => null,
        'order_date' => 'date-time',
        'receipt_status' => null,
        'fact_cost' => null,
        'ml_cost' => null,
        'sku' => null,
        'order_quantity' => 'int32',
        'requested_delivery_date' => 'date-time',
        'unit_code' => null,
        'wrap_code' => null,
        'units_per_wrap' => 'int32',
        'cost' => null,
        'sell' => null,
        'pricing_per' => null,
        'max_freight' => null,
        'charge_freight' => null,
        'max_other' => null,
        'dist_date' => 'date-time',
        'expiration_date' => 'date-time',
        'void_date' => 'date-time',
        'freeze_action' => null,
        'rev_date' => null,
        'art_back' => null,
        'origin' => null,
        'sample' => 'int32',
        'sample_to' => null,
        'max_overs' => 'int32',
        'max_unders' => 'int32',
        'received_sfp' => 'int32',
        'budget_code' => null,
        'accounting_code' => null,
        'tax_exempt' => null,
        'capitalize' => null,
        'accrual' => null,
        'odd_quantity' => 'int32',
        'freight_cost' => null,
        'received_date' => 'date-time',
        'received_quantity' => 'int32',
        'from_prod' => 'int32',
        'sfp_complete' => null,
        'end_quantity' => 'int32',
        'end_val' => null,
        'end_fact' => null,
        'interim_quantity' => 'int32',
        'interim_val' => null,
        'interim_fact' => null,
        'last_act' => 'date-time',
        'weight_per_wrap' => null,
        'norcs' => null,
        'vendor_id' => 'int32',
        'bs_vendor' => 'int32',
        'ml_vendor' => 'int32',
        'receipt_no' => 'int32',
        'paid_full' => null,
        'entered_by' => null,
        'received_by' => null,
        'line_no' => 'int32',
        'prod_lot' => null,
        'product_id_tag' => null,
        'units_per_case' => 'int32',
        'case_weight' => null,
        'height' => null,
        'width' => null,
        'length' => null,
        'dock_date' => 'date-time',
        'impressions' => 'int32',
        'asn_line' => 'int32',
        'updated_at' => 'date-time',
        'item_forward_lot_mixing_rule' => null,
        'item_storage_lot_mixing_rule' => null,
        'item_forward_item_mixing_rule' => null,
        'item_storage_item_mixing_rule' => null,
        'item_allocation_rule' => null,
        'item_barcode_field' => null,
        'item_warehouse_display_field' => null,
        'item_product_id_tag_scheme_id' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'item_receipt_location_id' => 'itemReceiptLocationId',
        'item_receipt_id' => 'itemReceiptId',
        'asn_id' => 'asnId',
        'lob_id' => 'lobId',
        'legacy_po_no' => 'legacyPoNo',
        'warehouse_id' => 'warehouseId',
        'current_quantity' => 'currentQuantity',
        'address' => 'address',
        'warehouse_location_id' => 'warehouseLocationId',
        'location_status' => 'locationStatus',
        'order_date' => 'orderDate',
        'receipt_status' => 'receiptStatus',
        'fact_cost' => 'factCost',
        'ml_cost' => 'mlCost',
        'sku' => 'sku',
        'order_quantity' => 'orderQuantity',
        'requested_delivery_date' => 'requestedDeliveryDate',
        'unit_code' => 'unitCode',
        'wrap_code' => 'wrapCode',
        'units_per_wrap' => 'unitsPerWrap',
        'cost' => 'cost',
        'sell' => 'sell',
        'pricing_per' => 'pricingPer',
        'max_freight' => 'maxFreight',
        'charge_freight' => 'chargeFreight',
        'max_other' => 'maxOther',
        'dist_date' => 'distDate',
        'expiration_date' => 'expirationDate',
        'void_date' => 'voidDate',
        'freeze_action' => 'freezeAction',
        'rev_date' => 'revDate',
        'art_back' => 'artBack',
        'origin' => 'origin',
        'sample' => 'sample',
        'sample_to' => 'sampleTo',
        'max_overs' => 'maxOvers',
        'max_unders' => 'maxUnders',
        'received_sfp' => 'receivedSfp',
        'budget_code' => 'budgetCode',
        'accounting_code' => 'accountingCode',
        'tax_exempt' => 'taxExempt',
        'capitalize' => 'capitalize',
        'accrual' => 'accrual',
        'odd_quantity' => 'oddQuantity',
        'freight_cost' => 'freightCost',
        'received_date' => 'receivedDate',
        'received_quantity' => 'receivedQuantity',
        'from_prod' => 'fromProd',
        'sfp_complete' => 'sfpComplete',
        'end_quantity' => 'endQuantity',
        'end_val' => 'endVal',
        'end_fact' => 'endFact',
        'interim_quantity' => 'interimQuantity',
        'interim_val' => 'interimVal',
        'interim_fact' => 'interimFact',
        'last_act' => 'lastAct',
        'weight_per_wrap' => 'weightPerWrap',
        'norcs' => 'norcs',
        'vendor_id' => 'vendorId',
        'bs_vendor' => 'bsVendor',
        'ml_vendor' => 'mlVendor',
        'receipt_no' => 'receiptNo',
        'paid_full' => 'paidFull',
        'entered_by' => 'enteredBy',
        'received_by' => 'receivedBy',
        'line_no' => 'lineNo',
        'prod_lot' => 'prodLot',
        'product_id_tag' => 'productIdTag',
        'units_per_case' => 'unitsPerCase',
        'case_weight' => 'caseWeight',
        'height' => 'height',
        'width' => 'width',
        'length' => 'length',
        'dock_date' => 'dockDate',
        'impressions' => 'impressions',
        'asn_line' => 'asnLine',
        'updated_at' => 'updatedAt',
        'item_forward_lot_mixing_rule' => 'itemForwardLotMixingRule',
        'item_storage_lot_mixing_rule' => 'itemStorageLotMixingRule',
        'item_forward_item_mixing_rule' => 'itemForwardItemMixingRule',
        'item_storage_item_mixing_rule' => 'itemStorageItemMixingRule',
        'item_allocation_rule' => 'itemAllocationRule',
        'item_barcode_field' => 'itemBarcodeField',
        'item_warehouse_display_field' => 'itemWarehouseDisplayField',
        'item_product_id_tag_scheme_id' => 'itemProductIdTagSchemeId',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'item_receipt_location_id' => 'setItemReceiptLocationId',
        'item_receipt_id' => 'setItemReceiptId',
        'asn_id' => 'setAsnId',
        'lob_id' => 'setLobId',
        'legacy_po_no' => 'setLegacyPoNo',
        'warehouse_id' => 'setWarehouseId',
        'current_quantity' => 'setCurrentQuantity',
        'address' => 'setAddress',
        'warehouse_location_id' => 'setWarehouseLocationId',
        'location_status' => 'setLocationStatus',
        'order_date' => 'setOrderDate',
        'receipt_status' => 'setReceiptStatus',
        'fact_cost' => 'setFactCost',
        'ml_cost' => 'setMlCost',
        'sku' => 'setSku',
        'order_quantity' => 'setOrderQuantity',
        'requested_delivery_date' => 'setRequestedDeliveryDate',
        'unit_code' => 'setUnitCode',
        'wrap_code' => 'setWrapCode',
        'units_per_wrap' => 'setUnitsPerWrap',
        'cost' => 'setCost',
        'sell' => 'setSell',
        'pricing_per' => 'setPricingPer',
        'max_freight' => 'setMaxFreight',
        'charge_freight' => 'setChargeFreight',
        'max_other' => 'setMaxOther',
        'dist_date' => 'setDistDate',
        'expiration_date' => 'setExpirationDate',
        'void_date' => 'setVoidDate',
        'freeze_action' => 'setFreezeAction',
        'rev_date' => 'setRevDate',
        'art_back' => 'setArtBack',
        'origin' => 'setOrigin',
        'sample' => 'setSample',
        'sample_to' => 'setSampleTo',
        'max_overs' => 'setMaxOvers',
        'max_unders' => 'setMaxUnders',
        'received_sfp' => 'setReceivedSfp',
        'budget_code' => 'setBudgetCode',
        'accounting_code' => 'setAccountingCode',
        'tax_exempt' => 'setTaxExempt',
        'capitalize' => 'setCapitalize',
        'accrual' => 'setAccrual',
        'odd_quantity' => 'setOddQuantity',
        'freight_cost' => 'setFreightCost',
        'received_date' => 'setReceivedDate',
        'received_quantity' => 'setReceivedQuantity',
        'from_prod' => 'setFromProd',
        'sfp_complete' => 'setSfpComplete',
        'end_quantity' => 'setEndQuantity',
        'end_val' => 'setEndVal',
        'end_fact' => 'setEndFact',
        'interim_quantity' => 'setInterimQuantity',
        'interim_val' => 'setInterimVal',
        'interim_fact' => 'setInterimFact',
        'last_act' => 'setLastAct',
        'weight_per_wrap' => 'setWeightPerWrap',
        'norcs' => 'setNorcs',
        'vendor_id' => 'setVendorId',
        'bs_vendor' => 'setBsVendor',
        'ml_vendor' => 'setMlVendor',
        'receipt_no' => 'setReceiptNo',
        'paid_full' => 'setPaidFull',
        'entered_by' => 'setEnteredBy',
        'received_by' => 'setReceivedBy',
        'line_no' => 'setLineNo',
        'prod_lot' => 'setProdLot',
        'product_id_tag' => 'setProductIdTag',
        'units_per_case' => 'setUnitsPerCase',
        'case_weight' => 'setCaseWeight',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'length' => 'setLength',
        'dock_date' => 'setDockDate',
        'impressions' => 'setImpressions',
        'asn_line' => 'setAsnLine',
        'updated_at' => 'setUpdatedAt',
        'item_forward_lot_mixing_rule' => 'setItemForwardLotMixingRule',
        'item_storage_lot_mixing_rule' => 'setItemStorageLotMixingRule',
        'item_forward_item_mixing_rule' => 'setItemForwardItemMixingRule',
        'item_storage_item_mixing_rule' => 'setItemStorageItemMixingRule',
        'item_allocation_rule' => 'setItemAllocationRule',
        'item_barcode_field' => 'setItemBarcodeField',
        'item_warehouse_display_field' => 'setItemWarehouseDisplayField',
        'item_product_id_tag_scheme_id' => 'setItemProductIdTagSchemeId',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'item_receipt_location_id' => 'getItemReceiptLocationId',
        'item_receipt_id' => 'getItemReceiptId',
        'asn_id' => 'getAsnId',
        'lob_id' => 'getLobId',
        'legacy_po_no' => 'getLegacyPoNo',
        'warehouse_id' => 'getWarehouseId',
        'current_quantity' => 'getCurrentQuantity',
        'address' => 'getAddress',
        'warehouse_location_id' => 'getWarehouseLocationId',
        'location_status' => 'getLocationStatus',
        'order_date' => 'getOrderDate',
        'receipt_status' => 'getReceiptStatus',
        'fact_cost' => 'getFactCost',
        'ml_cost' => 'getMlCost',
        'sku' => 'getSku',
        'order_quantity' => 'getOrderQuantity',
        'requested_delivery_date' => 'getRequestedDeliveryDate',
        'unit_code' => 'getUnitCode',
        'wrap_code' => 'getWrapCode',
        'units_per_wrap' => 'getUnitsPerWrap',
        'cost' => 'getCost',
        'sell' => 'getSell',
        'pricing_per' => 'getPricingPer',
        'max_freight' => 'getMaxFreight',
        'charge_freight' => 'getChargeFreight',
        'max_other' => 'getMaxOther',
        'dist_date' => 'getDistDate',
        'expiration_date' => 'getExpirationDate',
        'void_date' => 'getVoidDate',
        'freeze_action' => 'getFreezeAction',
        'rev_date' => 'getRevDate',
        'art_back' => 'getArtBack',
        'origin' => 'getOrigin',
        'sample' => 'getSample',
        'sample_to' => 'getSampleTo',
        'max_overs' => 'getMaxOvers',
        'max_unders' => 'getMaxUnders',
        'received_sfp' => 'getReceivedSfp',
        'budget_code' => 'getBudgetCode',
        'accounting_code' => 'getAccountingCode',
        'tax_exempt' => 'getTaxExempt',
        'capitalize' => 'getCapitalize',
        'accrual' => 'getAccrual',
        'odd_quantity' => 'getOddQuantity',
        'freight_cost' => 'getFreightCost',
        'received_date' => 'getReceivedDate',
        'received_quantity' => 'getReceivedQuantity',
        'from_prod' => 'getFromProd',
        'sfp_complete' => 'getSfpComplete',
        'end_quantity' => 'getEndQuantity',
        'end_val' => 'getEndVal',
        'end_fact' => 'getEndFact',
        'interim_quantity' => 'getInterimQuantity',
        'interim_val' => 'getInterimVal',
        'interim_fact' => 'getInterimFact',
        'last_act' => 'getLastAct',
        'weight_per_wrap' => 'getWeightPerWrap',
        'norcs' => 'getNorcs',
        'vendor_id' => 'getVendorId',
        'bs_vendor' => 'getBsVendor',
        'ml_vendor' => 'getMlVendor',
        'receipt_no' => 'getReceiptNo',
        'paid_full' => 'getPaidFull',
        'entered_by' => 'getEnteredBy',
        'received_by' => 'getReceivedBy',
        'line_no' => 'getLineNo',
        'prod_lot' => 'getProdLot',
        'product_id_tag' => 'getProductIdTag',
        'units_per_case' => 'getUnitsPerCase',
        'case_weight' => 'getCaseWeight',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'length' => 'getLength',
        'dock_date' => 'getDockDate',
        'impressions' => 'getImpressions',
        'asn_line' => 'getAsnLine',
        'updated_at' => 'getUpdatedAt',
        'item_forward_lot_mixing_rule' => 'getItemForwardLotMixingRule',
        'item_storage_lot_mixing_rule' => 'getItemStorageLotMixingRule',
        'item_forward_item_mixing_rule' => 'getItemForwardItemMixingRule',
        'item_storage_item_mixing_rule' => 'getItemStorageItemMixingRule',
        'item_allocation_rule' => 'getItemAllocationRule',
        'item_barcode_field' => 'getItemBarcodeField',
        'item_warehouse_display_field' => 'getItemWarehouseDisplayField',
        'item_product_id_tag_scheme_id' => 'getItemProductIdTagSchemeId',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['item_receipt_location_id'] = isset($data['item_receipt_location_id']) ? $data['item_receipt_location_id'] : null;
        $this->container['item_receipt_id'] = isset($data['item_receipt_id']) ? $data['item_receipt_id'] : null;
        $this->container['asn_id'] = isset($data['asn_id']) ? $data['asn_id'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['legacy_po_no'] = isset($data['legacy_po_no']) ? $data['legacy_po_no'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['current_quantity'] = isset($data['current_quantity']) ? $data['current_quantity'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['warehouse_location_id'] = isset($data['warehouse_location_id']) ? $data['warehouse_location_id'] : null;
        $this->container['location_status'] = isset($data['location_status']) ? $data['location_status'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['receipt_status'] = isset($data['receipt_status']) ? $data['receipt_status'] : null;
        $this->container['fact_cost'] = isset($data['fact_cost']) ? $data['fact_cost'] : null;
        $this->container['ml_cost'] = isset($data['ml_cost']) ? $data['ml_cost'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['order_quantity'] = isset($data['order_quantity']) ? $data['order_quantity'] : null;
        $this->container['requested_delivery_date'] = isset($data['requested_delivery_date']) ? $data['requested_delivery_date'] : null;
        $this->container['unit_code'] = isset($data['unit_code']) ? $data['unit_code'] : null;
        $this->container['wrap_code'] = isset($data['wrap_code']) ? $data['wrap_code'] : null;
        $this->container['units_per_wrap'] = isset($data['units_per_wrap']) ? $data['units_per_wrap'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['sell'] = isset($data['sell']) ? $data['sell'] : null;
        $this->container['pricing_per'] = isset($data['pricing_per']) ? $data['pricing_per'] : null;
        $this->container['max_freight'] = isset($data['max_freight']) ? $data['max_freight'] : null;
        $this->container['charge_freight'] = isset($data['charge_freight']) ? $data['charge_freight'] : null;
        $this->container['max_other'] = isset($data['max_other']) ? $data['max_other'] : null;
        $this->container['dist_date'] = isset($data['dist_date']) ? $data['dist_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['void_date'] = isset($data['void_date']) ? $data['void_date'] : null;
        $this->container['freeze_action'] = isset($data['freeze_action']) ? $data['freeze_action'] : null;
        $this->container['rev_date'] = isset($data['rev_date']) ? $data['rev_date'] : null;
        $this->container['art_back'] = isset($data['art_back']) ? $data['art_back'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['sample'] = isset($data['sample']) ? $data['sample'] : null;
        $this->container['sample_to'] = isset($data['sample_to']) ? $data['sample_to'] : null;
        $this->container['max_overs'] = isset($data['max_overs']) ? $data['max_overs'] : null;
        $this->container['max_unders'] = isset($data['max_unders']) ? $data['max_unders'] : null;
        $this->container['received_sfp'] = isset($data['received_sfp']) ? $data['received_sfp'] : null;
        $this->container['budget_code'] = isset($data['budget_code']) ? $data['budget_code'] : null;
        $this->container['accounting_code'] = isset($data['accounting_code']) ? $data['accounting_code'] : null;
        $this->container['tax_exempt'] = isset($data['tax_exempt']) ? $data['tax_exempt'] : null;
        $this->container['capitalize'] = isset($data['capitalize']) ? $data['capitalize'] : null;
        $this->container['accrual'] = isset($data['accrual']) ? $data['accrual'] : null;
        $this->container['odd_quantity'] = isset($data['odd_quantity']) ? $data['odd_quantity'] : null;
        $this->container['freight_cost'] = isset($data['freight_cost']) ? $data['freight_cost'] : null;
        $this->container['received_date'] = isset($data['received_date']) ? $data['received_date'] : null;
        $this->container['received_quantity'] = isset($data['received_quantity']) ? $data['received_quantity'] : null;
        $this->container['from_prod'] = isset($data['from_prod']) ? $data['from_prod'] : null;
        $this->container['sfp_complete'] = isset($data['sfp_complete']) ? $data['sfp_complete'] : null;
        $this->container['end_quantity'] = isset($data['end_quantity']) ? $data['end_quantity'] : null;
        $this->container['end_val'] = isset($data['end_val']) ? $data['end_val'] : null;
        $this->container['end_fact'] = isset($data['end_fact']) ? $data['end_fact'] : null;
        $this->container['interim_quantity'] = isset($data['interim_quantity']) ? $data['interim_quantity'] : null;
        $this->container['interim_val'] = isset($data['interim_val']) ? $data['interim_val'] : null;
        $this->container['interim_fact'] = isset($data['interim_fact']) ? $data['interim_fact'] : null;
        $this->container['last_act'] = isset($data['last_act']) ? $data['last_act'] : null;
        $this->container['weight_per_wrap'] = isset($data['weight_per_wrap']) ? $data['weight_per_wrap'] : null;
        $this->container['norcs'] = isset($data['norcs']) ? $data['norcs'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['bs_vendor'] = isset($data['bs_vendor']) ? $data['bs_vendor'] : null;
        $this->container['ml_vendor'] = isset($data['ml_vendor']) ? $data['ml_vendor'] : null;
        $this->container['receipt_no'] = isset($data['receipt_no']) ? $data['receipt_no'] : null;
        $this->container['paid_full'] = isset($data['paid_full']) ? $data['paid_full'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['received_by'] = isset($data['received_by']) ? $data['received_by'] : null;
        $this->container['line_no'] = isset($data['line_no']) ? $data['line_no'] : null;
        $this->container['prod_lot'] = isset($data['prod_lot']) ? $data['prod_lot'] : null;
        $this->container['product_id_tag'] = isset($data['product_id_tag']) ? $data['product_id_tag'] : null;
        $this->container['units_per_case'] = isset($data['units_per_case']) ? $data['units_per_case'] : null;
        $this->container['case_weight'] = isset($data['case_weight']) ? $data['case_weight'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['dock_date'] = isset($data['dock_date']) ? $data['dock_date'] : null;
        $this->container['impressions'] = isset($data['impressions']) ? $data['impressions'] : null;
        $this->container['asn_line'] = isset($data['asn_line']) ? $data['asn_line'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['item_forward_lot_mixing_rule'] = isset($data['item_forward_lot_mixing_rule']) ? $data['item_forward_lot_mixing_rule'] : null;
        $this->container['item_storage_lot_mixing_rule'] = isset($data['item_storage_lot_mixing_rule']) ? $data['item_storage_lot_mixing_rule'] : null;
        $this->container['item_forward_item_mixing_rule'] = isset($data['item_forward_item_mixing_rule']) ? $data['item_forward_item_mixing_rule'] : null;
        $this->container['item_storage_item_mixing_rule'] = isset($data['item_storage_item_mixing_rule']) ? $data['item_storage_item_mixing_rule'] : null;
        $this->container['item_allocation_rule'] = isset($data['item_allocation_rule']) ? $data['item_allocation_rule'] : null;
        $this->container['item_barcode_field'] = isset($data['item_barcode_field']) ? $data['item_barcode_field'] : null;
        $this->container['item_warehouse_display_field'] = isset($data['item_warehouse_display_field']) ? $data['item_warehouse_display_field'] : null;
        $this->container['item_product_id_tag_scheme_id'] = isset($data['item_product_id_tag_scheme_id']) ? $data['item_product_id_tag_scheme_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_forward_lot_mixing_rule'] === null) {
            $invalidProperties[] = "'item_forward_lot_mixing_rule' can't be null";
        }
        if ($this->container['item_storage_lot_mixing_rule'] === null) {
            $invalidProperties[] = "'item_storage_lot_mixing_rule' can't be null";
        }
        if ($this->container['item_forward_item_mixing_rule'] === null) {
            $invalidProperties[] = "'item_forward_item_mixing_rule' can't be null";
        }
        if ($this->container['item_storage_item_mixing_rule'] === null) {
            $invalidProperties[] = "'item_storage_item_mixing_rule' can't be null";
        }
        if ($this->container['item_allocation_rule'] === null) {
            $invalidProperties[] = "'item_allocation_rule' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['item_forward_lot_mixing_rule'] === null) {
            return false;
        }
        if ($this->container['item_storage_lot_mixing_rule'] === null) {
            return false;
        }
        if ($this->container['item_forward_item_mixing_rule'] === null) {
            return false;
        }
        if ($this->container['item_storage_item_mixing_rule'] === null) {
            return false;
        }
        if ($this->container['item_allocation_rule'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_receipt_location_id
     *
     * @return int
     */
    public function getItemReceiptLocationId()
    {
        return $this->container['item_receipt_location_id'];
    }

    /**
     * Sets item_receipt_location_id
     *
     * @param int $item_receipt_location_id item_receipt_location_id
     *
     * @return $this
     */
    public function setItemReceiptLocationId($item_receipt_location_id)
    {
        $this->container['item_receipt_location_id'] = $item_receipt_location_id;

        return $this;
    }

    /**
     * Gets item_receipt_id
     *
     * @return int
     */
    public function getItemReceiptId()
    {
        return $this->container['item_receipt_id'];
    }

    /**
     * Sets item_receipt_id
     *
     * @param int $item_receipt_id item_receipt_id
     *
     * @return $this
     */
    public function setItemReceiptId($item_receipt_id)
    {
        $this->container['item_receipt_id'] = $item_receipt_id;

        return $this;
    }

    /**
     * Gets asn_id
     *
     * @return int
     */
    public function getAsnId()
    {
        return $this->container['asn_id'];
    }

    /**
     * Sets asn_id
     *
     * @param int $asn_id asn_id
     *
     * @return $this
     */
    public function setAsnId($asn_id)
    {
        $this->container['asn_id'] = $asn_id;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets legacy_po_no
     *
     * @return string
     */
    public function getLegacyPoNo()
    {
        return $this->container['legacy_po_no'];
    }

    /**
     * Sets legacy_po_no
     *
     * @param string $legacy_po_no legacy_po_no
     *
     * @return $this
     */
    public function setLegacyPoNo($legacy_po_no)
    {
        $this->container['legacy_po_no'] = $legacy_po_no;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets current_quantity
     *
     * @return int
     */
    public function getCurrentQuantity()
    {
        return $this->container['current_quantity'];
    }

    /**
     * Sets current_quantity
     *
     * @param int $current_quantity current_quantity
     *
     * @return $this
     */
    public function setCurrentQuantity($current_quantity)
    {
        $this->container['current_quantity'] = $current_quantity;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets warehouse_location_id
     *
     * @return int
     */
    public function getWarehouseLocationId()
    {
        return $this->container['warehouse_location_id'];
    }

    /**
     * Sets warehouse_location_id
     *
     * @param int $warehouse_location_id warehouse_location_id
     *
     * @return $this
     */
    public function setWarehouseLocationId($warehouse_location_id)
    {
        $this->container['warehouse_location_id'] = $warehouse_location_id;

        return $this;
    }

    /**
     * Gets location_status
     *
     * @return string
     */
    public function getLocationStatus()
    {
        return $this->container['location_status'];
    }

    /**
     * Sets location_status
     *
     * @param string $location_status location_status
     *
     * @return $this
     */
    public function setLocationStatus($location_status)
    {
        $this->container['location_status'] = $location_status;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets receipt_status
     *
     * @return string
     */
    public function getReceiptStatus()
    {
        return $this->container['receipt_status'];
    }

    /**
     * Sets receipt_status
     *
     * @param string $receipt_status receipt_status
     *
     * @return $this
     */
    public function setReceiptStatus($receipt_status)
    {
        $this->container['receipt_status'] = $receipt_status;

        return $this;
    }

    /**
     * Gets fact_cost
     *
     * @return float
     */
    public function getFactCost()
    {
        return $this->container['fact_cost'];
    }

    /**
     * Sets fact_cost
     *
     * @param float $fact_cost fact_cost
     *
     * @return $this
     */
    public function setFactCost($fact_cost)
    {
        $this->container['fact_cost'] = $fact_cost;

        return $this;
    }

    /**
     * Gets ml_cost
     *
     * @return float
     */
    public function getMlCost()
    {
        return $this->container['ml_cost'];
    }

    /**
     * Sets ml_cost
     *
     * @param float $ml_cost ml_cost
     *
     * @return $this
     */
    public function setMlCost($ml_cost)
    {
        $this->container['ml_cost'] = $ml_cost;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return int
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param int $order_quantity order_quantity
     *
     * @return $this
     */
    public function setOrderQuantity($order_quantity)
    {
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets requested_delivery_date
     *
     * @return \DateTime
     */
    public function getRequestedDeliveryDate()
    {
        return $this->container['requested_delivery_date'];
    }

    /**
     * Sets requested_delivery_date
     *
     * @param \DateTime $requested_delivery_date requested_delivery_date
     *
     * @return $this
     */
    public function setRequestedDeliveryDate($requested_delivery_date)
    {
        $this->container['requested_delivery_date'] = $requested_delivery_date;

        return $this;
    }

    /**
     * Gets unit_code
     *
     * @return string
     */
    public function getUnitCode()
    {
        return $this->container['unit_code'];
    }

    /**
     * Sets unit_code
     *
     * @param string $unit_code unit_code
     *
     * @return $this
     */
    public function setUnitCode($unit_code)
    {
        $this->container['unit_code'] = $unit_code;

        return $this;
    }

    /**
     * Gets wrap_code
     *
     * @return string
     */
    public function getWrapCode()
    {
        return $this->container['wrap_code'];
    }

    /**
     * Sets wrap_code
     *
     * @param string $wrap_code wrap_code
     *
     * @return $this
     */
    public function setWrapCode($wrap_code)
    {
        $this->container['wrap_code'] = $wrap_code;

        return $this;
    }

    /**
     * Gets units_per_wrap
     *
     * @return int
     */
    public function getUnitsPerWrap()
    {
        return $this->container['units_per_wrap'];
    }

    /**
     * Sets units_per_wrap
     *
     * @param int $units_per_wrap units_per_wrap
     *
     * @return $this
     */
    public function setUnitsPerWrap($units_per_wrap)
    {
        $this->container['units_per_wrap'] = $units_per_wrap;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets sell
     *
     * @return float
     */
    public function getSell()
    {
        return $this->container['sell'];
    }

    /**
     * Sets sell
     *
     * @param float $sell sell
     *
     * @return $this
     */
    public function setSell($sell)
    {
        $this->container['sell'] = $sell;

        return $this;
    }

    /**
     * Gets pricing_per
     *
     * @return string
     */
    public function getPricingPer()
    {
        return $this->container['pricing_per'];
    }

    /**
     * Sets pricing_per
     *
     * @param string $pricing_per pricing_per
     *
     * @return $this
     */
    public function setPricingPer($pricing_per)
    {
        $this->container['pricing_per'] = $pricing_per;

        return $this;
    }

    /**
     * Gets max_freight
     *
     * @return float
     */
    public function getMaxFreight()
    {
        return $this->container['max_freight'];
    }

    /**
     * Sets max_freight
     *
     * @param float $max_freight max_freight
     *
     * @return $this
     */
    public function setMaxFreight($max_freight)
    {
        $this->container['max_freight'] = $max_freight;

        return $this;
    }

    /**
     * Gets charge_freight
     *
     * @return string
     */
    public function getChargeFreight()
    {
        return $this->container['charge_freight'];
    }

    /**
     * Sets charge_freight
     *
     * @param string $charge_freight charge_freight
     *
     * @return $this
     */
    public function setChargeFreight($charge_freight)
    {
        $this->container['charge_freight'] = $charge_freight;

        return $this;
    }

    /**
     * Gets max_other
     *
     * @return float
     */
    public function getMaxOther()
    {
        return $this->container['max_other'];
    }

    /**
     * Sets max_other
     *
     * @param float $max_other max_other
     *
     * @return $this
     */
    public function setMaxOther($max_other)
    {
        $this->container['max_other'] = $max_other;

        return $this;
    }

    /**
     * Gets dist_date
     *
     * @return \DateTime
     */
    public function getDistDate()
    {
        return $this->container['dist_date'];
    }

    /**
     * Sets dist_date
     *
     * @param \DateTime $dist_date dist_date
     *
     * @return $this
     */
    public function setDistDate($dist_date)
    {
        $this->container['dist_date'] = $dist_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets void_date
     *
     * @return \DateTime
     */
    public function getVoidDate()
    {
        return $this->container['void_date'];
    }

    /**
     * Sets void_date
     *
     * @param \DateTime $void_date void_date
     *
     * @return $this
     */
    public function setVoidDate($void_date)
    {
        $this->container['void_date'] = $void_date;

        return $this;
    }

    /**
     * Gets freeze_action
     *
     * @return string
     */
    public function getFreezeAction()
    {
        return $this->container['freeze_action'];
    }

    /**
     * Sets freeze_action
     *
     * @param string $freeze_action freeze_action
     *
     * @return $this
     */
    public function setFreezeAction($freeze_action)
    {
        $this->container['freeze_action'] = $freeze_action;

        return $this;
    }

    /**
     * Gets rev_date
     *
     * @return string
     */
    public function getRevDate()
    {
        return $this->container['rev_date'];
    }

    /**
     * Sets rev_date
     *
     * @param string $rev_date rev_date
     *
     * @return $this
     */
    public function setRevDate($rev_date)
    {
        $this->container['rev_date'] = $rev_date;

        return $this;
    }

    /**
     * Gets art_back
     *
     * @return string
     */
    public function getArtBack()
    {
        return $this->container['art_back'];
    }

    /**
     * Sets art_back
     *
     * @param string $art_back art_back
     *
     * @return $this
     */
    public function setArtBack($art_back)
    {
        $this->container['art_back'] = $art_back;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets sample
     *
     * @return int
     */
    public function getSample()
    {
        return $this->container['sample'];
    }

    /**
     * Sets sample
     *
     * @param int $sample sample
     *
     * @return $this
     */
    public function setSample($sample)
    {
        $this->container['sample'] = $sample;

        return $this;
    }

    /**
     * Gets sample_to
     *
     * @return string
     */
    public function getSampleTo()
    {
        return $this->container['sample_to'];
    }

    /**
     * Sets sample_to
     *
     * @param string $sample_to sample_to
     *
     * @return $this
     */
    public function setSampleTo($sample_to)
    {
        $this->container['sample_to'] = $sample_to;

        return $this;
    }

    /**
     * Gets max_overs
     *
     * @return int
     */
    public function getMaxOvers()
    {
        return $this->container['max_overs'];
    }

    /**
     * Sets max_overs
     *
     * @param int $max_overs max_overs
     *
     * @return $this
     */
    public function setMaxOvers($max_overs)
    {
        $this->container['max_overs'] = $max_overs;

        return $this;
    }

    /**
     * Gets max_unders
     *
     * @return int
     */
    public function getMaxUnders()
    {
        return $this->container['max_unders'];
    }

    /**
     * Sets max_unders
     *
     * @param int $max_unders max_unders
     *
     * @return $this
     */
    public function setMaxUnders($max_unders)
    {
        $this->container['max_unders'] = $max_unders;

        return $this;
    }

    /**
     * Gets received_sfp
     *
     * @return int
     */
    public function getReceivedSfp()
    {
        return $this->container['received_sfp'];
    }

    /**
     * Sets received_sfp
     *
     * @param int $received_sfp received_sfp
     *
     * @return $this
     */
    public function setReceivedSfp($received_sfp)
    {
        $this->container['received_sfp'] = $received_sfp;

        return $this;
    }

    /**
     * Gets budget_code
     *
     * @return string
     */
    public function getBudgetCode()
    {
        return $this->container['budget_code'];
    }

    /**
     * Sets budget_code
     *
     * @param string $budget_code budget_code
     *
     * @return $this
     */
    public function setBudgetCode($budget_code)
    {
        $this->container['budget_code'] = $budget_code;

        return $this;
    }

    /**
     * Gets accounting_code
     *
     * @return string
     */
    public function getAccountingCode()
    {
        return $this->container['accounting_code'];
    }

    /**
     * Sets accounting_code
     *
     * @param string $accounting_code accounting_code
     *
     * @return $this
     */
    public function setAccountingCode($accounting_code)
    {
        $this->container['accounting_code'] = $accounting_code;

        return $this;
    }

    /**
     * Gets tax_exempt
     *
     * @return string
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     *
     * @param string $tax_exempt tax_exempt
     *
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets capitalize
     *
     * @return string
     */
    public function getCapitalize()
    {
        return $this->container['capitalize'];
    }

    /**
     * Sets capitalize
     *
     * @param string $capitalize capitalize
     *
     * @return $this
     */
    public function setCapitalize($capitalize)
    {
        $this->container['capitalize'] = $capitalize;

        return $this;
    }

    /**
     * Gets accrual
     *
     * @return string
     */
    public function getAccrual()
    {
        return $this->container['accrual'];
    }

    /**
     * Sets accrual
     *
     * @param string $accrual accrual
     *
     * @return $this
     */
    public function setAccrual($accrual)
    {
        $this->container['accrual'] = $accrual;

        return $this;
    }

    /**
     * Gets odd_quantity
     *
     * @return int
     */
    public function getOddQuantity()
    {
        return $this->container['odd_quantity'];
    }

    /**
     * Sets odd_quantity
     *
     * @param int $odd_quantity odd_quantity
     *
     * @return $this
     */
    public function setOddQuantity($odd_quantity)
    {
        $this->container['odd_quantity'] = $odd_quantity;

        return $this;
    }

    /**
     * Gets freight_cost
     *
     * @return float
     */
    public function getFreightCost()
    {
        return $this->container['freight_cost'];
    }

    /**
     * Sets freight_cost
     *
     * @param float $freight_cost freight_cost
     *
     * @return $this
     */
    public function setFreightCost($freight_cost)
    {
        $this->container['freight_cost'] = $freight_cost;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime $received_date received_date
     *
     * @return $this
     */
    public function setReceivedDate($received_date)
    {
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets received_quantity
     *
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     *
     * @param int $received_quantity received_quantity
     *
     * @return $this
     */
    public function setReceivedQuantity($received_quantity)
    {
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets from_prod
     *
     * @return int
     */
    public function getFromProd()
    {
        return $this->container['from_prod'];
    }

    /**
     * Sets from_prod
     *
     * @param int $from_prod from_prod
     *
     * @return $this
     */
    public function setFromProd($from_prod)
    {
        $this->container['from_prod'] = $from_prod;

        return $this;
    }

    /**
     * Gets sfp_complete
     *
     * @return string
     */
    public function getSfpComplete()
    {
        return $this->container['sfp_complete'];
    }

    /**
     * Sets sfp_complete
     *
     * @param string $sfp_complete sfp_complete
     *
     * @return $this
     */
    public function setSfpComplete($sfp_complete)
    {
        $this->container['sfp_complete'] = $sfp_complete;

        return $this;
    }

    /**
     * Gets end_quantity
     *
     * @return int
     */
    public function getEndQuantity()
    {
        return $this->container['end_quantity'];
    }

    /**
     * Sets end_quantity
     *
     * @param int $end_quantity end_quantity
     *
     * @return $this
     */
    public function setEndQuantity($end_quantity)
    {
        $this->container['end_quantity'] = $end_quantity;

        return $this;
    }

    /**
     * Gets end_val
     *
     * @return float
     */
    public function getEndVal()
    {
        return $this->container['end_val'];
    }

    /**
     * Sets end_val
     *
     * @param float $end_val end_val
     *
     * @return $this
     */
    public function setEndVal($end_val)
    {
        $this->container['end_val'] = $end_val;

        return $this;
    }

    /**
     * Gets end_fact
     *
     * @return float
     */
    public function getEndFact()
    {
        return $this->container['end_fact'];
    }

    /**
     * Sets end_fact
     *
     * @param float $end_fact end_fact
     *
     * @return $this
     */
    public function setEndFact($end_fact)
    {
        $this->container['end_fact'] = $end_fact;

        return $this;
    }

    /**
     * Gets interim_quantity
     *
     * @return int
     */
    public function getInterimQuantity()
    {
        return $this->container['interim_quantity'];
    }

    /**
     * Sets interim_quantity
     *
     * @param int $interim_quantity interim_quantity
     *
     * @return $this
     */
    public function setInterimQuantity($interim_quantity)
    {
        $this->container['interim_quantity'] = $interim_quantity;

        return $this;
    }

    /**
     * Gets interim_val
     *
     * @return float
     */
    public function getInterimVal()
    {
        return $this->container['interim_val'];
    }

    /**
     * Sets interim_val
     *
     * @param float $interim_val interim_val
     *
     * @return $this
     */
    public function setInterimVal($interim_val)
    {
        $this->container['interim_val'] = $interim_val;

        return $this;
    }

    /**
     * Gets interim_fact
     *
     * @return float
     */
    public function getInterimFact()
    {
        return $this->container['interim_fact'];
    }

    /**
     * Sets interim_fact
     *
     * @param float $interim_fact interim_fact
     *
     * @return $this
     */
    public function setInterimFact($interim_fact)
    {
        $this->container['interim_fact'] = $interim_fact;

        return $this;
    }

    /**
     * Gets last_act
     *
     * @return \DateTime
     */
    public function getLastAct()
    {
        return $this->container['last_act'];
    }

    /**
     * Sets last_act
     *
     * @param \DateTime $last_act last_act
     *
     * @return $this
     */
    public function setLastAct($last_act)
    {
        $this->container['last_act'] = $last_act;

        return $this;
    }

    /**
     * Gets weight_per_wrap
     *
     * @return float
     */
    public function getWeightPerWrap()
    {
        return $this->container['weight_per_wrap'];
    }

    /**
     * Sets weight_per_wrap
     *
     * @param float $weight_per_wrap weight_per_wrap
     *
     * @return $this
     */
    public function setWeightPerWrap($weight_per_wrap)
    {
        $this->container['weight_per_wrap'] = $weight_per_wrap;

        return $this;
    }

    /**
     * Gets norcs
     *
     * @return string
     */
    public function getNorcs()
    {
        return $this->container['norcs'];
    }

    /**
     * Sets norcs
     *
     * @param string $norcs norcs
     *
     * @return $this
     */
    public function setNorcs($norcs)
    {
        $this->container['norcs'] = $norcs;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets bs_vendor
     *
     * @return int
     */
    public function getBsVendor()
    {
        return $this->container['bs_vendor'];
    }

    /**
     * Sets bs_vendor
     *
     * @param int $bs_vendor bs_vendor
     *
     * @return $this
     */
    public function setBsVendor($bs_vendor)
    {
        $this->container['bs_vendor'] = $bs_vendor;

        return $this;
    }

    /**
     * Gets ml_vendor
     *
     * @return int
     */
    public function getMlVendor()
    {
        return $this->container['ml_vendor'];
    }

    /**
     * Sets ml_vendor
     *
     * @param int $ml_vendor ml_vendor
     *
     * @return $this
     */
    public function setMlVendor($ml_vendor)
    {
        $this->container['ml_vendor'] = $ml_vendor;

        return $this;
    }

    /**
     * Gets receipt_no
     *
     * @return int
     */
    public function getReceiptNo()
    {
        return $this->container['receipt_no'];
    }

    /**
     * Sets receipt_no
     *
     * @param int $receipt_no receipt_no
     *
     * @return $this
     */
    public function setReceiptNo($receipt_no)
    {
        $this->container['receipt_no'] = $receipt_no;

        return $this;
    }

    /**
     * Gets paid_full
     *
     * @return string
     */
    public function getPaidFull()
    {
        return $this->container['paid_full'];
    }

    /**
     * Sets paid_full
     *
     * @param string $paid_full paid_full
     *
     * @return $this
     */
    public function setPaidFull($paid_full)
    {
        $this->container['paid_full'] = $paid_full;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string $entered_by entered_by
     *
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets received_by
     *
     * @return string
     */
    public function getReceivedBy()
    {
        return $this->container['received_by'];
    }

    /**
     * Sets received_by
     *
     * @param string $received_by received_by
     *
     * @return $this
     */
    public function setReceivedBy($received_by)
    {
        $this->container['received_by'] = $received_by;

        return $this;
    }

    /**
     * Gets line_no
     *
     * @return int
     */
    public function getLineNo()
    {
        return $this->container['line_no'];
    }

    /**
     * Sets line_no
     *
     * @param int $line_no line_no
     *
     * @return $this
     */
    public function setLineNo($line_no)
    {
        $this->container['line_no'] = $line_no;

        return $this;
    }

    /**
     * Gets prod_lot
     *
     * @return string
     */
    public function getProdLot()
    {
        return $this->container['prod_lot'];
    }

    /**
     * Sets prod_lot
     *
     * @param string $prod_lot prod_lot
     *
     * @return $this
     */
    public function setProdLot($prod_lot)
    {
        $this->container['prod_lot'] = $prod_lot;

        return $this;
    }

    /**
     * Gets product_id_tag
     *
     * @return string
     */
    public function getProductIdTag()
    {
        return $this->container['product_id_tag'];
    }

    /**
     * Sets product_id_tag
     *
     * @param string $product_id_tag product_id_tag
     *
     * @return $this
     */
    public function setProductIdTag($product_id_tag)
    {
        $this->container['product_id_tag'] = $product_id_tag;

        return $this;
    }

    /**
     * Gets units_per_case
     *
     * @return int
     */
    public function getUnitsPerCase()
    {
        return $this->container['units_per_case'];
    }

    /**
     * Sets units_per_case
     *
     * @param int $units_per_case units_per_case
     *
     * @return $this
     */
    public function setUnitsPerCase($units_per_case)
    {
        $this->container['units_per_case'] = $units_per_case;

        return $this;
    }

    /**
     * Gets case_weight
     *
     * @return float
     */
    public function getCaseWeight()
    {
        return $this->container['case_weight'];
    }

    /**
     * Sets case_weight
     *
     * @param float $case_weight case_weight
     *
     * @return $this
     */
    public function setCaseWeight($case_weight)
    {
        $this->container['case_weight'] = $case_weight;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets dock_date
     *
     * @return \DateTime
     */
    public function getDockDate()
    {
        return $this->container['dock_date'];
    }

    /**
     * Sets dock_date
     *
     * @param \DateTime $dock_date dock_date
     *
     * @return $this
     */
    public function setDockDate($dock_date)
    {
        $this->container['dock_date'] = $dock_date;

        return $this;
    }

    /**
     * Gets impressions
     *
     * @return int
     */
    public function getImpressions()
    {
        return $this->container['impressions'];
    }

    /**
     * Sets impressions
     *
     * @param int $impressions impressions
     *
     * @return $this
     */
    public function setImpressions($impressions)
    {
        $this->container['impressions'] = $impressions;

        return $this;
    }

    /**
     * Gets asn_line
     *
     * @return int
     */
    public function getAsnLine()
    {
        return $this->container['asn_line'];
    }

    /**
     * Sets asn_line
     *
     * @param int $asn_line asn_line
     *
     * @return $this
     */
    public function setAsnLine($asn_line)
    {
        $this->container['asn_line'] = $asn_line;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets item_forward_lot_mixing_rule
     *
     * @return string
     */
    public function getItemForwardLotMixingRule()
    {
        return $this->container['item_forward_lot_mixing_rule'];
    }

    /**
     * Sets item_forward_lot_mixing_rule
     *
     * @param string $item_forward_lot_mixing_rule item_forward_lot_mixing_rule
     *
     * @return $this
     */
    public function setItemForwardLotMixingRule($item_forward_lot_mixing_rule)
    {
        $this->container['item_forward_lot_mixing_rule'] = $item_forward_lot_mixing_rule;

        return $this;
    }

    /**
     * Gets item_storage_lot_mixing_rule
     *
     * @return string
     */
    public function getItemStorageLotMixingRule()
    {
        return $this->container['item_storage_lot_mixing_rule'];
    }

    /**
     * Sets item_storage_lot_mixing_rule
     *
     * @param string $item_storage_lot_mixing_rule item_storage_lot_mixing_rule
     *
     * @return $this
     */
    public function setItemStorageLotMixingRule($item_storage_lot_mixing_rule)
    {
        $this->container['item_storage_lot_mixing_rule'] = $item_storage_lot_mixing_rule;

        return $this;
    }

    /**
     * Gets item_forward_item_mixing_rule
     *
     * @return string
     */
    public function getItemForwardItemMixingRule()
    {
        return $this->container['item_forward_item_mixing_rule'];
    }

    /**
     * Sets item_forward_item_mixing_rule
     *
     * @param string $item_forward_item_mixing_rule item_forward_item_mixing_rule
     *
     * @return $this
     */
    public function setItemForwardItemMixingRule($item_forward_item_mixing_rule)
    {
        $this->container['item_forward_item_mixing_rule'] = $item_forward_item_mixing_rule;

        return $this;
    }

    /**
     * Gets item_storage_item_mixing_rule
     *
     * @return string
     */
    public function getItemStorageItemMixingRule()
    {
        return $this->container['item_storage_item_mixing_rule'];
    }

    /**
     * Sets item_storage_item_mixing_rule
     *
     * @param string $item_storage_item_mixing_rule item_storage_item_mixing_rule
     *
     * @return $this
     */
    public function setItemStorageItemMixingRule($item_storage_item_mixing_rule)
    {
        $this->container['item_storage_item_mixing_rule'] = $item_storage_item_mixing_rule;

        return $this;
    }

    /**
     * Gets item_allocation_rule
     *
     * @return string
     */
    public function getItemAllocationRule()
    {
        return $this->container['item_allocation_rule'];
    }

    /**
     * Sets item_allocation_rule
     *
     * @param string $item_allocation_rule item_allocation_rule
     *
     * @return $this
     */
    public function setItemAllocationRule($item_allocation_rule)
    {
        $this->container['item_allocation_rule'] = $item_allocation_rule;

        return $this;
    }

    /**
     * Gets item_barcode_field
     *
     * @return string
     */
    public function getItemBarcodeField()
    {
        return $this->container['item_barcode_field'];
    }

    /**
     * Sets item_barcode_field
     *
     * @param string $item_barcode_field item_barcode_field
     *
     * @return $this
     */
    public function setItemBarcodeField($item_barcode_field)
    {
        $this->container['item_barcode_field'] = $item_barcode_field;

        return $this;
    }

    /**
     * Gets item_warehouse_display_field
     *
     * @return string
     */
    public function getItemWarehouseDisplayField()
    {
        return $this->container['item_warehouse_display_field'];
    }

    /**
     * Sets item_warehouse_display_field
     *
     * @param string $item_warehouse_display_field item_warehouse_display_field
     *
     * @return $this
     */
    public function setItemWarehouseDisplayField($item_warehouse_display_field)
    {
        $this->container['item_warehouse_display_field'] = $item_warehouse_display_field;

        return $this;
    }

    /**
     * Gets item_product_id_tag_scheme_id
     *
     * @return int
     */
    public function getItemProductIdTagSchemeId()
    {
        return $this->container['item_product_id_tag_scheme_id'];
    }

    /**
     * Sets item_product_id_tag_scheme_id
     *
     * @param int $item_product_id_tag_scheme_id item_product_id_tag_scheme_id
     *
     * @return $this
     */
    public function setItemProductIdTagSchemeId($item_product_id_tag_scheme_id)
    {
        $this->container['item_product_id_tag_scheme_id'] = $item_product_id_tag_scheme_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


