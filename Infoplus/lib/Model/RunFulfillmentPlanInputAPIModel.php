<?php
/**
 * RunFulfillmentPlanInputAPIModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * RunFulfillmentPlanInputAPIModel Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RunFulfillmentPlanInputAPIModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RunFulfillmentPlanInputAPIModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_no_list' => 'float[]',
        'fulfillment_plan_id' => 'int',
        'max_sk_us_per_batch' => 'int',
        'first_pick_position' => 'int',
        'max_cartons' => 'int',
        'ship_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_no_list' => null,
        'fulfillment_plan_id' => 'int32',
        'max_sk_us_per_batch' => 'int32',
        'first_pick_position' => 'int32',
        'max_cartons' => 'int32',
        'ship_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_no_list' => 'orderNoList',
        'fulfillment_plan_id' => 'fulfillmentPlanId',
        'max_sk_us_per_batch' => 'maxSKUsPerBatch',
        'first_pick_position' => 'firstPickPosition',
        'max_cartons' => 'maxCartons',
        'ship_date' => 'shipDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_no_list' => 'setOrderNoList',
        'fulfillment_plan_id' => 'setFulfillmentPlanId',
        'max_sk_us_per_batch' => 'setMaxSkUsPerBatch',
        'first_pick_position' => 'setFirstPickPosition',
        'max_cartons' => 'setMaxCartons',
        'ship_date' => 'setShipDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_no_list' => 'getOrderNoList',
        'fulfillment_plan_id' => 'getFulfillmentPlanId',
        'max_sk_us_per_batch' => 'getMaxSkUsPerBatch',
        'first_pick_position' => 'getFirstPickPosition',
        'max_cartons' => 'getMaxCartons',
        'ship_date' => 'getShipDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_no_list'] = isset($data['order_no_list']) ? $data['order_no_list'] : null;
        $this->container['fulfillment_plan_id'] = isset($data['fulfillment_plan_id']) ? $data['fulfillment_plan_id'] : null;
        $this->container['max_sk_us_per_batch'] = isset($data['max_sk_us_per_batch']) ? $data['max_sk_us_per_batch'] : null;
        $this->container['first_pick_position'] = isset($data['first_pick_position']) ? $data['first_pick_position'] : null;
        $this->container['max_cartons'] = isset($data['max_cartons']) ? $data['max_cartons'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fulfillment_plan_id'] === null) {
            $invalidProperties[] = "'fulfillment_plan_id' can't be null";
        }
        if ($this->container['ship_date'] === null) {
            $invalidProperties[] = "'ship_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['fulfillment_plan_id'] === null) {
            return false;
        }
        if ($this->container['ship_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_no_list
     *
     * @return float[]
     */
    public function getOrderNoList()
    {
        return $this->container['order_no_list'];
    }

    /**
     * Sets order_no_list
     *
     * @param float[] $order_no_list order_no_list
     *
     * @return $this
     */
    public function setOrderNoList($order_no_list)
    {
        $this->container['order_no_list'] = $order_no_list;

        return $this;
    }

    /**
     * Gets fulfillment_plan_id
     *
     * @return int
     */
    public function getFulfillmentPlanId()
    {
        return $this->container['fulfillment_plan_id'];
    }

    /**
     * Sets fulfillment_plan_id
     *
     * @param int $fulfillment_plan_id fulfillment_plan_id
     *
     * @return $this
     */
    public function setFulfillmentPlanId($fulfillment_plan_id)
    {
        $this->container['fulfillment_plan_id'] = $fulfillment_plan_id;

        return $this;
    }

    /**
     * Gets max_sk_us_per_batch
     *
     * @return int
     */
    public function getMaxSkUsPerBatch()
    {
        return $this->container['max_sk_us_per_batch'];
    }

    /**
     * Sets max_sk_us_per_batch
     *
     * @param int $max_sk_us_per_batch max_sk_us_per_batch
     *
     * @return $this
     */
    public function setMaxSkUsPerBatch($max_sk_us_per_batch)
    {
        $this->container['max_sk_us_per_batch'] = $max_sk_us_per_batch;

        return $this;
    }

    /**
     * Gets first_pick_position
     *
     * @return int
     */
    public function getFirstPickPosition()
    {
        return $this->container['first_pick_position'];
    }

    /**
     * Sets first_pick_position
     *
     * @param int $first_pick_position first_pick_position
     *
     * @return $this
     */
    public function setFirstPickPosition($first_pick_position)
    {
        $this->container['first_pick_position'] = $first_pick_position;

        return $this;
    }

    /**
     * Gets max_cartons
     *
     * @return int
     */
    public function getMaxCartons()
    {
        return $this->container['max_cartons'];
    }

    /**
     * Sets max_cartons
     *
     * @param int $max_cartons max_cartons
     *
     * @return $this
     */
    public function setMaxCartons($max_cartons)
    {
        $this->container['max_cartons'] = $max_cartons;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime $ship_date ship_date
     *
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


