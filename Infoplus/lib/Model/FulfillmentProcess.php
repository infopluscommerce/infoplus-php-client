<?php
/**
 * FulfillmentProcess
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * FulfillmentProcess Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FulfillmentProcess implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'fulfillmentProcess';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'create_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'process_no' => 'int',
        'work_batch_id_list' => 'int[]',
        'warehouse_id' => 'int',
        'fulfillment_plan_id' => 'int',
        'pick_scan_scheme_id' => 'int',
        'status' => 'string',
        'order_smart_filter_id' => 'int',
        'location_smart_filter_id' => 'int',
        'max_orders' => 'int',
        'batch_max_size' => 'int',
        'batch_min_size' => 'int',
        'max_cartons' => 'int',
        'version' => 'string',
        'fulfillment_process_group' => 'int',
        'is_mass_distribution' => 'bool',
        'priority_code' => 'int',
        'number_of_orders' => 'int',
        'number_of_lines' => 'int',
        'number_of_sk_us' => 'int',
        'completed_picks' => 'int',
        'total_picks' => 'int',
        'shipped_casebreaks' => 'int',
        'total_casebreaks_to_ship' => 'int',
        'shipped_orders' => 'int',
        'total_orders_to_ship' => 'int',
        'completed_to_do' => 'int',
        'total_to_do' => 'int',
        'create_pick_work' => 'bool',
        'picking_rule' => 'string',
        'pick_batch_group_id' => 'string',
        'max_sk_us_per_batch' => 'int',
        'layout_rule' => 'string',
        'pick_sort_rule' => 'string',
        'location_sort' => 'string',
        'first_pick_position' => 'int',
        'pick_list_format' => 'string',
        'pick_list_layout' => 'string',
        'pick_list_group' => 'string',
        'pick_list_sort' => 'string',
        'pick_list_location_sort' => 'string',
        'pick_summary_format' => 'string',
        'pick_summary_layout' => 'string',
        'pick_summary_sort' => 'string',
        'create_pick_summary' => 'bool',
        'create_pick_list' => 'bool',
        'pre_generate_parcel_labels' => 'bool',
        'label_sort' => 'string',
        'ship_date' => '\DateTime',
        'auto_ship_casebreak_cartons' => 'bool',
        'auto_ship_orders' => 'bool',
        'cartonize_orders' => 'bool',
        'cartonization_script_id' => 'int',
        'create_packing_slip' => 'string',
        'override_packing_slip_template_id' => 'int',
        'create_order_assembly_guide' => 'bool',
        'order_assembly_guide_layout' => 'string',
        'create_order_invoice' => 'string',
        'override_order_invoice_template_id' => 'int',
        'create_carton_gs1128_labels' => 'string',
        'create_line_item_each_gs1128_labels' => 'string',
        'send_to_external_shipping_system' => 'bool',
        'external_shipping_system_id' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'create_date' => 'date-time',
        'modify_date' => 'date-time',
        'process_no' => 'int32',
        'work_batch_id_list' => 'int32',
        'warehouse_id' => 'int32',
        'fulfillment_plan_id' => 'int32',
        'pick_scan_scheme_id' => 'int32',
        'status' => null,
        'order_smart_filter_id' => 'int32',
        'location_smart_filter_id' => 'int32',
        'max_orders' => 'int32',
        'batch_max_size' => 'int32',
        'batch_min_size' => 'int32',
        'max_cartons' => 'int32',
        'version' => null,
        'fulfillment_process_group' => 'int32',
        'is_mass_distribution' => null,
        'priority_code' => 'int32',
        'number_of_orders' => 'int32',
        'number_of_lines' => 'int32',
        'number_of_sk_us' => 'int32',
        'completed_picks' => 'int32',
        'total_picks' => 'int32',
        'shipped_casebreaks' => 'int32',
        'total_casebreaks_to_ship' => 'int32',
        'shipped_orders' => 'int32',
        'total_orders_to_ship' => 'int32',
        'completed_to_do' => 'int32',
        'total_to_do' => 'int32',
        'create_pick_work' => null,
        'picking_rule' => null,
        'pick_batch_group_id' => null,
        'max_sk_us_per_batch' => 'int32',
        'layout_rule' => null,
        'pick_sort_rule' => null,
        'location_sort' => null,
        'first_pick_position' => 'int32',
        'pick_list_format' => null,
        'pick_list_layout' => null,
        'pick_list_group' => null,
        'pick_list_sort' => null,
        'pick_list_location_sort' => null,
        'pick_summary_format' => null,
        'pick_summary_layout' => null,
        'pick_summary_sort' => null,
        'create_pick_summary' => null,
        'create_pick_list' => null,
        'pre_generate_parcel_labels' => null,
        'label_sort' => null,
        'ship_date' => 'date-time',
        'auto_ship_casebreak_cartons' => null,
        'auto_ship_orders' => null,
        'cartonize_orders' => null,
        'cartonization_script_id' => 'int32',
        'create_packing_slip' => null,
        'override_packing_slip_template_id' => 'int32',
        'create_order_assembly_guide' => null,
        'order_assembly_guide_layout' => null,
        'create_order_invoice' => null,
        'override_order_invoice_template_id' => 'int32',
        'create_carton_gs1128_labels' => null,
        'create_line_item_each_gs1128_labels' => null,
        'send_to_external_shipping_system' => null,
        'external_shipping_system_id' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'create_date' => 'createDate',
        'modify_date' => 'modifyDate',
        'process_no' => 'processNo',
        'work_batch_id_list' => 'workBatchIdList',
        'warehouse_id' => 'warehouseId',
        'fulfillment_plan_id' => 'fulfillmentPlanId',
        'pick_scan_scheme_id' => 'pickScanSchemeId',
        'status' => 'status',
        'order_smart_filter_id' => 'orderSmartFilterId',
        'location_smart_filter_id' => 'locationSmartFilterId',
        'max_orders' => 'maxOrders',
        'batch_max_size' => 'batchMaxSize',
        'batch_min_size' => 'batchMinSize',
        'max_cartons' => 'maxCartons',
        'version' => 'version',
        'fulfillment_process_group' => 'fulfillmentProcessGroup',
        'is_mass_distribution' => 'isMassDistribution',
        'priority_code' => 'priorityCode',
        'number_of_orders' => 'numberOfOrders',
        'number_of_lines' => 'numberOfLines',
        'number_of_sk_us' => 'numberOfSKUs',
        'completed_picks' => 'completedPicks',
        'total_picks' => 'totalPicks',
        'shipped_casebreaks' => 'shippedCasebreaks',
        'total_casebreaks_to_ship' => 'totalCasebreaksToShip',
        'shipped_orders' => 'shippedOrders',
        'total_orders_to_ship' => 'totalOrdersToShip',
        'completed_to_do' => 'completedToDo',
        'total_to_do' => 'totalToDo',
        'create_pick_work' => 'createPickWork',
        'picking_rule' => 'pickingRule',
        'pick_batch_group_id' => 'pickBatchGroupId',
        'max_sk_us_per_batch' => 'maxSKUsPerBatch',
        'layout_rule' => 'layoutRule',
        'pick_sort_rule' => 'pickSortRule',
        'location_sort' => 'locationSort',
        'first_pick_position' => 'firstPickPosition',
        'pick_list_format' => 'pickListFormat',
        'pick_list_layout' => 'pickListLayout',
        'pick_list_group' => 'pickListGroup',
        'pick_list_sort' => 'pickListSort',
        'pick_list_location_sort' => 'pickListLocationSort',
        'pick_summary_format' => 'pickSummaryFormat',
        'pick_summary_layout' => 'pickSummaryLayout',
        'pick_summary_sort' => 'pickSummarySort',
        'create_pick_summary' => 'createPickSummary',
        'create_pick_list' => 'createPickList',
        'pre_generate_parcel_labels' => 'preGenerateParcelLabels',
        'label_sort' => 'labelSort',
        'ship_date' => 'shipDate',
        'auto_ship_casebreak_cartons' => 'autoShipCasebreakCartons',
        'auto_ship_orders' => 'autoShipOrders',
        'cartonize_orders' => 'cartonizeOrders',
        'cartonization_script_id' => 'cartonizationScriptId',
        'create_packing_slip' => 'createPackingSlip',
        'override_packing_slip_template_id' => 'overridePackingSlipTemplateId',
        'create_order_assembly_guide' => 'createOrderAssemblyGuide',
        'order_assembly_guide_layout' => 'orderAssemblyGuideLayout',
        'create_order_invoice' => 'createOrderInvoice',
        'override_order_invoice_template_id' => 'overrideOrderInvoiceTemplateId',
        'create_carton_gs1128_labels' => 'createCartonGS1128Labels',
        'create_line_item_each_gs1128_labels' => 'createLineItemEachGS1128Labels',
        'send_to_external_shipping_system' => 'sendToExternalShippingSystem',
        'external_shipping_system_id' => 'externalShippingSystemId',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'create_date' => 'setCreateDate',
        'modify_date' => 'setModifyDate',
        'process_no' => 'setProcessNo',
        'work_batch_id_list' => 'setWorkBatchIdList',
        'warehouse_id' => 'setWarehouseId',
        'fulfillment_plan_id' => 'setFulfillmentPlanId',
        'pick_scan_scheme_id' => 'setPickScanSchemeId',
        'status' => 'setStatus',
        'order_smart_filter_id' => 'setOrderSmartFilterId',
        'location_smart_filter_id' => 'setLocationSmartFilterId',
        'max_orders' => 'setMaxOrders',
        'batch_max_size' => 'setBatchMaxSize',
        'batch_min_size' => 'setBatchMinSize',
        'max_cartons' => 'setMaxCartons',
        'version' => 'setVersion',
        'fulfillment_process_group' => 'setFulfillmentProcessGroup',
        'is_mass_distribution' => 'setIsMassDistribution',
        'priority_code' => 'setPriorityCode',
        'number_of_orders' => 'setNumberOfOrders',
        'number_of_lines' => 'setNumberOfLines',
        'number_of_sk_us' => 'setNumberOfSkUs',
        'completed_picks' => 'setCompletedPicks',
        'total_picks' => 'setTotalPicks',
        'shipped_casebreaks' => 'setShippedCasebreaks',
        'total_casebreaks_to_ship' => 'setTotalCasebreaksToShip',
        'shipped_orders' => 'setShippedOrders',
        'total_orders_to_ship' => 'setTotalOrdersToShip',
        'completed_to_do' => 'setCompletedToDo',
        'total_to_do' => 'setTotalToDo',
        'create_pick_work' => 'setCreatePickWork',
        'picking_rule' => 'setPickingRule',
        'pick_batch_group_id' => 'setPickBatchGroupId',
        'max_sk_us_per_batch' => 'setMaxSkUsPerBatch',
        'layout_rule' => 'setLayoutRule',
        'pick_sort_rule' => 'setPickSortRule',
        'location_sort' => 'setLocationSort',
        'first_pick_position' => 'setFirstPickPosition',
        'pick_list_format' => 'setPickListFormat',
        'pick_list_layout' => 'setPickListLayout',
        'pick_list_group' => 'setPickListGroup',
        'pick_list_sort' => 'setPickListSort',
        'pick_list_location_sort' => 'setPickListLocationSort',
        'pick_summary_format' => 'setPickSummaryFormat',
        'pick_summary_layout' => 'setPickSummaryLayout',
        'pick_summary_sort' => 'setPickSummarySort',
        'create_pick_summary' => 'setCreatePickSummary',
        'create_pick_list' => 'setCreatePickList',
        'pre_generate_parcel_labels' => 'setPreGenerateParcelLabels',
        'label_sort' => 'setLabelSort',
        'ship_date' => 'setShipDate',
        'auto_ship_casebreak_cartons' => 'setAutoShipCasebreakCartons',
        'auto_ship_orders' => 'setAutoShipOrders',
        'cartonize_orders' => 'setCartonizeOrders',
        'cartonization_script_id' => 'setCartonizationScriptId',
        'create_packing_slip' => 'setCreatePackingSlip',
        'override_packing_slip_template_id' => 'setOverridePackingSlipTemplateId',
        'create_order_assembly_guide' => 'setCreateOrderAssemblyGuide',
        'order_assembly_guide_layout' => 'setOrderAssemblyGuideLayout',
        'create_order_invoice' => 'setCreateOrderInvoice',
        'override_order_invoice_template_id' => 'setOverrideOrderInvoiceTemplateId',
        'create_carton_gs1128_labels' => 'setCreateCartonGs1128Labels',
        'create_line_item_each_gs1128_labels' => 'setCreateLineItemEachGs1128Labels',
        'send_to_external_shipping_system' => 'setSendToExternalShippingSystem',
        'external_shipping_system_id' => 'setExternalShippingSystemId',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'create_date' => 'getCreateDate',
        'modify_date' => 'getModifyDate',
        'process_no' => 'getProcessNo',
        'work_batch_id_list' => 'getWorkBatchIdList',
        'warehouse_id' => 'getWarehouseId',
        'fulfillment_plan_id' => 'getFulfillmentPlanId',
        'pick_scan_scheme_id' => 'getPickScanSchemeId',
        'status' => 'getStatus',
        'order_smart_filter_id' => 'getOrderSmartFilterId',
        'location_smart_filter_id' => 'getLocationSmartFilterId',
        'max_orders' => 'getMaxOrders',
        'batch_max_size' => 'getBatchMaxSize',
        'batch_min_size' => 'getBatchMinSize',
        'max_cartons' => 'getMaxCartons',
        'version' => 'getVersion',
        'fulfillment_process_group' => 'getFulfillmentProcessGroup',
        'is_mass_distribution' => 'getIsMassDistribution',
        'priority_code' => 'getPriorityCode',
        'number_of_orders' => 'getNumberOfOrders',
        'number_of_lines' => 'getNumberOfLines',
        'number_of_sk_us' => 'getNumberOfSkUs',
        'completed_picks' => 'getCompletedPicks',
        'total_picks' => 'getTotalPicks',
        'shipped_casebreaks' => 'getShippedCasebreaks',
        'total_casebreaks_to_ship' => 'getTotalCasebreaksToShip',
        'shipped_orders' => 'getShippedOrders',
        'total_orders_to_ship' => 'getTotalOrdersToShip',
        'completed_to_do' => 'getCompletedToDo',
        'total_to_do' => 'getTotalToDo',
        'create_pick_work' => 'getCreatePickWork',
        'picking_rule' => 'getPickingRule',
        'pick_batch_group_id' => 'getPickBatchGroupId',
        'max_sk_us_per_batch' => 'getMaxSkUsPerBatch',
        'layout_rule' => 'getLayoutRule',
        'pick_sort_rule' => 'getPickSortRule',
        'location_sort' => 'getLocationSort',
        'first_pick_position' => 'getFirstPickPosition',
        'pick_list_format' => 'getPickListFormat',
        'pick_list_layout' => 'getPickListLayout',
        'pick_list_group' => 'getPickListGroup',
        'pick_list_sort' => 'getPickListSort',
        'pick_list_location_sort' => 'getPickListLocationSort',
        'pick_summary_format' => 'getPickSummaryFormat',
        'pick_summary_layout' => 'getPickSummaryLayout',
        'pick_summary_sort' => 'getPickSummarySort',
        'create_pick_summary' => 'getCreatePickSummary',
        'create_pick_list' => 'getCreatePickList',
        'pre_generate_parcel_labels' => 'getPreGenerateParcelLabels',
        'label_sort' => 'getLabelSort',
        'ship_date' => 'getShipDate',
        'auto_ship_casebreak_cartons' => 'getAutoShipCasebreakCartons',
        'auto_ship_orders' => 'getAutoShipOrders',
        'cartonize_orders' => 'getCartonizeOrders',
        'cartonization_script_id' => 'getCartonizationScriptId',
        'create_packing_slip' => 'getCreatePackingSlip',
        'override_packing_slip_template_id' => 'getOverridePackingSlipTemplateId',
        'create_order_assembly_guide' => 'getCreateOrderAssemblyGuide',
        'order_assembly_guide_layout' => 'getOrderAssemblyGuideLayout',
        'create_order_invoice' => 'getCreateOrderInvoice',
        'override_order_invoice_template_id' => 'getOverrideOrderInvoiceTemplateId',
        'create_carton_gs1128_labels' => 'getCreateCartonGs1128Labels',
        'create_line_item_each_gs1128_labels' => 'getCreateLineItemEachGs1128Labels',
        'send_to_external_shipping_system' => 'getSendToExternalShippingSystem',
        'external_shipping_system_id' => 'getExternalShippingSystemId',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['modify_date'] = isset($data['modify_date']) ? $data['modify_date'] : null;
        $this->container['process_no'] = isset($data['process_no']) ? $data['process_no'] : null;
        $this->container['work_batch_id_list'] = isset($data['work_batch_id_list']) ? $data['work_batch_id_list'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['fulfillment_plan_id'] = isset($data['fulfillment_plan_id']) ? $data['fulfillment_plan_id'] : null;
        $this->container['pick_scan_scheme_id'] = isset($data['pick_scan_scheme_id']) ? $data['pick_scan_scheme_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['order_smart_filter_id'] = isset($data['order_smart_filter_id']) ? $data['order_smart_filter_id'] : null;
        $this->container['location_smart_filter_id'] = isset($data['location_smart_filter_id']) ? $data['location_smart_filter_id'] : null;
        $this->container['max_orders'] = isset($data['max_orders']) ? $data['max_orders'] : null;
        $this->container['batch_max_size'] = isset($data['batch_max_size']) ? $data['batch_max_size'] : null;
        $this->container['batch_min_size'] = isset($data['batch_min_size']) ? $data['batch_min_size'] : null;
        $this->container['max_cartons'] = isset($data['max_cartons']) ? $data['max_cartons'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['fulfillment_process_group'] = isset($data['fulfillment_process_group']) ? $data['fulfillment_process_group'] : null;
        $this->container['is_mass_distribution'] = isset($data['is_mass_distribution']) ? $data['is_mass_distribution'] : false;
        $this->container['priority_code'] = isset($data['priority_code']) ? $data['priority_code'] : null;
        $this->container['number_of_orders'] = isset($data['number_of_orders']) ? $data['number_of_orders'] : null;
        $this->container['number_of_lines'] = isset($data['number_of_lines']) ? $data['number_of_lines'] : null;
        $this->container['number_of_sk_us'] = isset($data['number_of_sk_us']) ? $data['number_of_sk_us'] : null;
        $this->container['completed_picks'] = isset($data['completed_picks']) ? $data['completed_picks'] : null;
        $this->container['total_picks'] = isset($data['total_picks']) ? $data['total_picks'] : null;
        $this->container['shipped_casebreaks'] = isset($data['shipped_casebreaks']) ? $data['shipped_casebreaks'] : null;
        $this->container['total_casebreaks_to_ship'] = isset($data['total_casebreaks_to_ship']) ? $data['total_casebreaks_to_ship'] : null;
        $this->container['shipped_orders'] = isset($data['shipped_orders']) ? $data['shipped_orders'] : null;
        $this->container['total_orders_to_ship'] = isset($data['total_orders_to_ship']) ? $data['total_orders_to_ship'] : null;
        $this->container['completed_to_do'] = isset($data['completed_to_do']) ? $data['completed_to_do'] : null;
        $this->container['total_to_do'] = isset($data['total_to_do']) ? $data['total_to_do'] : null;
        $this->container['create_pick_work'] = isset($data['create_pick_work']) ? $data['create_pick_work'] : false;
        $this->container['picking_rule'] = isset($data['picking_rule']) ? $data['picking_rule'] : null;
        $this->container['pick_batch_group_id'] = isset($data['pick_batch_group_id']) ? $data['pick_batch_group_id'] : null;
        $this->container['max_sk_us_per_batch'] = isset($data['max_sk_us_per_batch']) ? $data['max_sk_us_per_batch'] : null;
        $this->container['layout_rule'] = isset($data['layout_rule']) ? $data['layout_rule'] : null;
        $this->container['pick_sort_rule'] = isset($data['pick_sort_rule']) ? $data['pick_sort_rule'] : null;
        $this->container['location_sort'] = isset($data['location_sort']) ? $data['location_sort'] : null;
        $this->container['first_pick_position'] = isset($data['first_pick_position']) ? $data['first_pick_position'] : null;
        $this->container['pick_list_format'] = isset($data['pick_list_format']) ? $data['pick_list_format'] : null;
        $this->container['pick_list_layout'] = isset($data['pick_list_layout']) ? $data['pick_list_layout'] : null;
        $this->container['pick_list_group'] = isset($data['pick_list_group']) ? $data['pick_list_group'] : null;
        $this->container['pick_list_sort'] = isset($data['pick_list_sort']) ? $data['pick_list_sort'] : null;
        $this->container['pick_list_location_sort'] = isset($data['pick_list_location_sort']) ? $data['pick_list_location_sort'] : null;
        $this->container['pick_summary_format'] = isset($data['pick_summary_format']) ? $data['pick_summary_format'] : null;
        $this->container['pick_summary_layout'] = isset($data['pick_summary_layout']) ? $data['pick_summary_layout'] : null;
        $this->container['pick_summary_sort'] = isset($data['pick_summary_sort']) ? $data['pick_summary_sort'] : null;
        $this->container['create_pick_summary'] = isset($data['create_pick_summary']) ? $data['create_pick_summary'] : false;
        $this->container['create_pick_list'] = isset($data['create_pick_list']) ? $data['create_pick_list'] : false;
        $this->container['pre_generate_parcel_labels'] = isset($data['pre_generate_parcel_labels']) ? $data['pre_generate_parcel_labels'] : false;
        $this->container['label_sort'] = isset($data['label_sort']) ? $data['label_sort'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['auto_ship_casebreak_cartons'] = isset($data['auto_ship_casebreak_cartons']) ? $data['auto_ship_casebreak_cartons'] : false;
        $this->container['auto_ship_orders'] = isset($data['auto_ship_orders']) ? $data['auto_ship_orders'] : false;
        $this->container['cartonize_orders'] = isset($data['cartonize_orders']) ? $data['cartonize_orders'] : false;
        $this->container['cartonization_script_id'] = isset($data['cartonization_script_id']) ? $data['cartonization_script_id'] : null;
        $this->container['create_packing_slip'] = isset($data['create_packing_slip']) ? $data['create_packing_slip'] : null;
        $this->container['override_packing_slip_template_id'] = isset($data['override_packing_slip_template_id']) ? $data['override_packing_slip_template_id'] : null;
        $this->container['create_order_assembly_guide'] = isset($data['create_order_assembly_guide']) ? $data['create_order_assembly_guide'] : false;
        $this->container['order_assembly_guide_layout'] = isset($data['order_assembly_guide_layout']) ? $data['order_assembly_guide_layout'] : null;
        $this->container['create_order_invoice'] = isset($data['create_order_invoice']) ? $data['create_order_invoice'] : null;
        $this->container['override_order_invoice_template_id'] = isset($data['override_order_invoice_template_id']) ? $data['override_order_invoice_template_id'] : null;
        $this->container['create_carton_gs1128_labels'] = isset($data['create_carton_gs1128_labels']) ? $data['create_carton_gs1128_labels'] : null;
        $this->container['create_line_item_each_gs1128_labels'] = isset($data['create_line_item_each_gs1128_labels']) ? $data['create_line_item_each_gs1128_labels'] : null;
        $this->container['send_to_external_shipping_system'] = isset($data['send_to_external_shipping_system']) ? $data['send_to_external_shipping_system'] : false;
        $this->container['external_shipping_system_id'] = isset($data['external_shipping_system_id']) ? $data['external_shipping_system_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['warehouse_id'] === null) {
            $invalidProperties[] = "'warehouse_id' can't be null";
        }
        if ($this->container['fulfillment_plan_id'] === null) {
            $invalidProperties[] = "'fulfillment_plan_id' can't be null";
        }
        if ($this->container['pick_scan_scheme_id'] === null) {
            $invalidProperties[] = "'pick_scan_scheme_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['create_packing_slip'] === null) {
            $invalidProperties[] = "'create_packing_slip' can't be null";
        }
        if ($this->container['create_order_invoice'] === null) {
            $invalidProperties[] = "'create_order_invoice' can't be null";
        }
        if ($this->container['send_to_external_shipping_system'] === null) {
            $invalidProperties[] = "'send_to_external_shipping_system' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['warehouse_id'] === null) {
            return false;
        }
        if ($this->container['fulfillment_plan_id'] === null) {
            return false;
        }
        if ($this->container['pick_scan_scheme_id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['create_packing_slip'] === null) {
            return false;
        }
        if ($this->container['create_order_invoice'] === null) {
            return false;
        }
        if ($this->container['send_to_external_shipping_system'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime $modify_date modify_date
     *
     * @return $this
     */
    public function setModifyDate($modify_date)
    {
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets process_no
     *
     * @return int
     */
    public function getProcessNo()
    {
        return $this->container['process_no'];
    }

    /**
     * Sets process_no
     *
     * @param int $process_no process_no
     *
     * @return $this
     */
    public function setProcessNo($process_no)
    {
        $this->container['process_no'] = $process_no;

        return $this;
    }

    /**
     * Gets work_batch_id_list
     *
     * @return int[]
     */
    public function getWorkBatchIdList()
    {
        return $this->container['work_batch_id_list'];
    }

    /**
     * Sets work_batch_id_list
     *
     * @param int[] $work_batch_id_list work_batch_id_list
     *
     * @return $this
     */
    public function setWorkBatchIdList($work_batch_id_list)
    {
        $this->container['work_batch_id_list'] = $work_batch_id_list;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets fulfillment_plan_id
     *
     * @return int
     */
    public function getFulfillmentPlanId()
    {
        return $this->container['fulfillment_plan_id'];
    }

    /**
     * Sets fulfillment_plan_id
     *
     * @param int $fulfillment_plan_id fulfillment_plan_id
     *
     * @return $this
     */
    public function setFulfillmentPlanId($fulfillment_plan_id)
    {
        $this->container['fulfillment_plan_id'] = $fulfillment_plan_id;

        return $this;
    }

    /**
     * Gets pick_scan_scheme_id
     *
     * @return int
     */
    public function getPickScanSchemeId()
    {
        return $this->container['pick_scan_scheme_id'];
    }

    /**
     * Sets pick_scan_scheme_id
     *
     * @param int $pick_scan_scheme_id pick_scan_scheme_id
     *
     * @return $this
     */
    public function setPickScanSchemeId($pick_scan_scheme_id)
    {
        $this->container['pick_scan_scheme_id'] = $pick_scan_scheme_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order_smart_filter_id
     *
     * @return int
     */
    public function getOrderSmartFilterId()
    {
        return $this->container['order_smart_filter_id'];
    }

    /**
     * Sets order_smart_filter_id
     *
     * @param int $order_smart_filter_id order_smart_filter_id
     *
     * @return $this
     */
    public function setOrderSmartFilterId($order_smart_filter_id)
    {
        $this->container['order_smart_filter_id'] = $order_smart_filter_id;

        return $this;
    }

    /**
     * Gets location_smart_filter_id
     *
     * @return int
     */
    public function getLocationSmartFilterId()
    {
        return $this->container['location_smart_filter_id'];
    }

    /**
     * Sets location_smart_filter_id
     *
     * @param int $location_smart_filter_id location_smart_filter_id
     *
     * @return $this
     */
    public function setLocationSmartFilterId($location_smart_filter_id)
    {
        $this->container['location_smart_filter_id'] = $location_smart_filter_id;

        return $this;
    }

    /**
     * Gets max_orders
     *
     * @return int
     */
    public function getMaxOrders()
    {
        return $this->container['max_orders'];
    }

    /**
     * Sets max_orders
     *
     * @param int $max_orders max_orders
     *
     * @return $this
     */
    public function setMaxOrders($max_orders)
    {
        $this->container['max_orders'] = $max_orders;

        return $this;
    }

    /**
     * Gets batch_max_size
     *
     * @return int
     */
    public function getBatchMaxSize()
    {
        return $this->container['batch_max_size'];
    }

    /**
     * Sets batch_max_size
     *
     * @param int $batch_max_size batch_max_size
     *
     * @return $this
     */
    public function setBatchMaxSize($batch_max_size)
    {
        $this->container['batch_max_size'] = $batch_max_size;

        return $this;
    }

    /**
     * Gets batch_min_size
     *
     * @return int
     */
    public function getBatchMinSize()
    {
        return $this->container['batch_min_size'];
    }

    /**
     * Sets batch_min_size
     *
     * @param int $batch_min_size batch_min_size
     *
     * @return $this
     */
    public function setBatchMinSize($batch_min_size)
    {
        $this->container['batch_min_size'] = $batch_min_size;

        return $this;
    }

    /**
     * Gets max_cartons
     *
     * @return int
     */
    public function getMaxCartons()
    {
        return $this->container['max_cartons'];
    }

    /**
     * Sets max_cartons
     *
     * @param int $max_cartons max_cartons
     *
     * @return $this
     */
    public function setMaxCartons($max_cartons)
    {
        $this->container['max_cartons'] = $max_cartons;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets fulfillment_process_group
     *
     * @return int
     */
    public function getFulfillmentProcessGroup()
    {
        return $this->container['fulfillment_process_group'];
    }

    /**
     * Sets fulfillment_process_group
     *
     * @param int $fulfillment_process_group fulfillment_process_group
     *
     * @return $this
     */
    public function setFulfillmentProcessGroup($fulfillment_process_group)
    {
        $this->container['fulfillment_process_group'] = $fulfillment_process_group;

        return $this;
    }

    /**
     * Gets is_mass_distribution
     *
     * @return bool
     */
    public function getIsMassDistribution()
    {
        return $this->container['is_mass_distribution'];
    }

    /**
     * Sets is_mass_distribution
     *
     * @param bool $is_mass_distribution is_mass_distribution
     *
     * @return $this
     */
    public function setIsMassDistribution($is_mass_distribution)
    {
        $this->container['is_mass_distribution'] = $is_mass_distribution;

        return $this;
    }

    /**
     * Gets priority_code
     *
     * @return int
     */
    public function getPriorityCode()
    {
        return $this->container['priority_code'];
    }

    /**
     * Sets priority_code
     *
     * @param int $priority_code priority_code
     *
     * @return $this
     */
    public function setPriorityCode($priority_code)
    {
        $this->container['priority_code'] = $priority_code;

        return $this;
    }

    /**
     * Gets number_of_orders
     *
     * @return int
     */
    public function getNumberOfOrders()
    {
        return $this->container['number_of_orders'];
    }

    /**
     * Sets number_of_orders
     *
     * @param int $number_of_orders number_of_orders
     *
     * @return $this
     */
    public function setNumberOfOrders($number_of_orders)
    {
        $this->container['number_of_orders'] = $number_of_orders;

        return $this;
    }

    /**
     * Gets number_of_lines
     *
     * @return int
     */
    public function getNumberOfLines()
    {
        return $this->container['number_of_lines'];
    }

    /**
     * Sets number_of_lines
     *
     * @param int $number_of_lines number_of_lines
     *
     * @return $this
     */
    public function setNumberOfLines($number_of_lines)
    {
        $this->container['number_of_lines'] = $number_of_lines;

        return $this;
    }

    /**
     * Gets number_of_sk_us
     *
     * @return int
     */
    public function getNumberOfSkUs()
    {
        return $this->container['number_of_sk_us'];
    }

    /**
     * Sets number_of_sk_us
     *
     * @param int $number_of_sk_us number_of_sk_us
     *
     * @return $this
     */
    public function setNumberOfSkUs($number_of_sk_us)
    {
        $this->container['number_of_sk_us'] = $number_of_sk_us;

        return $this;
    }

    /**
     * Gets completed_picks
     *
     * @return int
     */
    public function getCompletedPicks()
    {
        return $this->container['completed_picks'];
    }

    /**
     * Sets completed_picks
     *
     * @param int $completed_picks completed_picks
     *
     * @return $this
     */
    public function setCompletedPicks($completed_picks)
    {
        $this->container['completed_picks'] = $completed_picks;

        return $this;
    }

    /**
     * Gets total_picks
     *
     * @return int
     */
    public function getTotalPicks()
    {
        return $this->container['total_picks'];
    }

    /**
     * Sets total_picks
     *
     * @param int $total_picks total_picks
     *
     * @return $this
     */
    public function setTotalPicks($total_picks)
    {
        $this->container['total_picks'] = $total_picks;

        return $this;
    }

    /**
     * Gets shipped_casebreaks
     *
     * @return int
     */
    public function getShippedCasebreaks()
    {
        return $this->container['shipped_casebreaks'];
    }

    /**
     * Sets shipped_casebreaks
     *
     * @param int $shipped_casebreaks shipped_casebreaks
     *
     * @return $this
     */
    public function setShippedCasebreaks($shipped_casebreaks)
    {
        $this->container['shipped_casebreaks'] = $shipped_casebreaks;

        return $this;
    }

    /**
     * Gets total_casebreaks_to_ship
     *
     * @return int
     */
    public function getTotalCasebreaksToShip()
    {
        return $this->container['total_casebreaks_to_ship'];
    }

    /**
     * Sets total_casebreaks_to_ship
     *
     * @param int $total_casebreaks_to_ship total_casebreaks_to_ship
     *
     * @return $this
     */
    public function setTotalCasebreaksToShip($total_casebreaks_to_ship)
    {
        $this->container['total_casebreaks_to_ship'] = $total_casebreaks_to_ship;

        return $this;
    }

    /**
     * Gets shipped_orders
     *
     * @return int
     */
    public function getShippedOrders()
    {
        return $this->container['shipped_orders'];
    }

    /**
     * Sets shipped_orders
     *
     * @param int $shipped_orders shipped_orders
     *
     * @return $this
     */
    public function setShippedOrders($shipped_orders)
    {
        $this->container['shipped_orders'] = $shipped_orders;

        return $this;
    }

    /**
     * Gets total_orders_to_ship
     *
     * @return int
     */
    public function getTotalOrdersToShip()
    {
        return $this->container['total_orders_to_ship'];
    }

    /**
     * Sets total_orders_to_ship
     *
     * @param int $total_orders_to_ship total_orders_to_ship
     *
     * @return $this
     */
    public function setTotalOrdersToShip($total_orders_to_ship)
    {
        $this->container['total_orders_to_ship'] = $total_orders_to_ship;

        return $this;
    }

    /**
     * Gets completed_to_do
     *
     * @return int
     */
    public function getCompletedToDo()
    {
        return $this->container['completed_to_do'];
    }

    /**
     * Sets completed_to_do
     *
     * @param int $completed_to_do completed_to_do
     *
     * @return $this
     */
    public function setCompletedToDo($completed_to_do)
    {
        $this->container['completed_to_do'] = $completed_to_do;

        return $this;
    }

    /**
     * Gets total_to_do
     *
     * @return int
     */
    public function getTotalToDo()
    {
        return $this->container['total_to_do'];
    }

    /**
     * Sets total_to_do
     *
     * @param int $total_to_do total_to_do
     *
     * @return $this
     */
    public function setTotalToDo($total_to_do)
    {
        $this->container['total_to_do'] = $total_to_do;

        return $this;
    }

    /**
     * Gets create_pick_work
     *
     * @return bool
     */
    public function getCreatePickWork()
    {
        return $this->container['create_pick_work'];
    }

    /**
     * Sets create_pick_work
     *
     * @param bool $create_pick_work create_pick_work
     *
     * @return $this
     */
    public function setCreatePickWork($create_pick_work)
    {
        $this->container['create_pick_work'] = $create_pick_work;

        return $this;
    }

    /**
     * Gets picking_rule
     *
     * @return string
     */
    public function getPickingRule()
    {
        return $this->container['picking_rule'];
    }

    /**
     * Sets picking_rule
     *
     * @param string $picking_rule picking_rule
     *
     * @return $this
     */
    public function setPickingRule($picking_rule)
    {
        $this->container['picking_rule'] = $picking_rule;

        return $this;
    }

    /**
     * Gets pick_batch_group_id
     *
     * @return string
     */
    public function getPickBatchGroupId()
    {
        return $this->container['pick_batch_group_id'];
    }

    /**
     * Sets pick_batch_group_id
     *
     * @param string $pick_batch_group_id pick_batch_group_id
     *
     * @return $this
     */
    public function setPickBatchGroupId($pick_batch_group_id)
    {
        $this->container['pick_batch_group_id'] = $pick_batch_group_id;

        return $this;
    }

    /**
     * Gets max_sk_us_per_batch
     *
     * @return int
     */
    public function getMaxSkUsPerBatch()
    {
        return $this->container['max_sk_us_per_batch'];
    }

    /**
     * Sets max_sk_us_per_batch
     *
     * @param int $max_sk_us_per_batch max_sk_us_per_batch
     *
     * @return $this
     */
    public function setMaxSkUsPerBatch($max_sk_us_per_batch)
    {
        $this->container['max_sk_us_per_batch'] = $max_sk_us_per_batch;

        return $this;
    }

    /**
     * Gets layout_rule
     *
     * @return string
     */
    public function getLayoutRule()
    {
        return $this->container['layout_rule'];
    }

    /**
     * Sets layout_rule
     *
     * @param string $layout_rule layout_rule
     *
     * @return $this
     */
    public function setLayoutRule($layout_rule)
    {
        $this->container['layout_rule'] = $layout_rule;

        return $this;
    }

    /**
     * Gets pick_sort_rule
     *
     * @return string
     */
    public function getPickSortRule()
    {
        return $this->container['pick_sort_rule'];
    }

    /**
     * Sets pick_sort_rule
     *
     * @param string $pick_sort_rule pick_sort_rule
     *
     * @return $this
     */
    public function setPickSortRule($pick_sort_rule)
    {
        $this->container['pick_sort_rule'] = $pick_sort_rule;

        return $this;
    }

    /**
     * Gets location_sort
     *
     * @return string
     */
    public function getLocationSort()
    {
        return $this->container['location_sort'];
    }

    /**
     * Sets location_sort
     *
     * @param string $location_sort location_sort
     *
     * @return $this
     */
    public function setLocationSort($location_sort)
    {
        $this->container['location_sort'] = $location_sort;

        return $this;
    }

    /**
     * Gets first_pick_position
     *
     * @return int
     */
    public function getFirstPickPosition()
    {
        return $this->container['first_pick_position'];
    }

    /**
     * Sets first_pick_position
     *
     * @param int $first_pick_position first_pick_position
     *
     * @return $this
     */
    public function setFirstPickPosition($first_pick_position)
    {
        $this->container['first_pick_position'] = $first_pick_position;

        return $this;
    }

    /**
     * Gets pick_list_format
     *
     * @return string
     */
    public function getPickListFormat()
    {
        return $this->container['pick_list_format'];
    }

    /**
     * Sets pick_list_format
     *
     * @param string $pick_list_format pick_list_format
     *
     * @return $this
     */
    public function setPickListFormat($pick_list_format)
    {
        $this->container['pick_list_format'] = $pick_list_format;

        return $this;
    }

    /**
     * Gets pick_list_layout
     *
     * @return string
     */
    public function getPickListLayout()
    {
        return $this->container['pick_list_layout'];
    }

    /**
     * Sets pick_list_layout
     *
     * @param string $pick_list_layout pick_list_layout
     *
     * @return $this
     */
    public function setPickListLayout($pick_list_layout)
    {
        $this->container['pick_list_layout'] = $pick_list_layout;

        return $this;
    }

    /**
     * Gets pick_list_group
     *
     * @return string
     */
    public function getPickListGroup()
    {
        return $this->container['pick_list_group'];
    }

    /**
     * Sets pick_list_group
     *
     * @param string $pick_list_group pick_list_group
     *
     * @return $this
     */
    public function setPickListGroup($pick_list_group)
    {
        $this->container['pick_list_group'] = $pick_list_group;

        return $this;
    }

    /**
     * Gets pick_list_sort
     *
     * @return string
     */
    public function getPickListSort()
    {
        return $this->container['pick_list_sort'];
    }

    /**
     * Sets pick_list_sort
     *
     * @param string $pick_list_sort pick_list_sort
     *
     * @return $this
     */
    public function setPickListSort($pick_list_sort)
    {
        $this->container['pick_list_sort'] = $pick_list_sort;

        return $this;
    }

    /**
     * Gets pick_list_location_sort
     *
     * @return string
     */
    public function getPickListLocationSort()
    {
        return $this->container['pick_list_location_sort'];
    }

    /**
     * Sets pick_list_location_sort
     *
     * @param string $pick_list_location_sort pick_list_location_sort
     *
     * @return $this
     */
    public function setPickListLocationSort($pick_list_location_sort)
    {
        $this->container['pick_list_location_sort'] = $pick_list_location_sort;

        return $this;
    }

    /**
     * Gets pick_summary_format
     *
     * @return string
     */
    public function getPickSummaryFormat()
    {
        return $this->container['pick_summary_format'];
    }

    /**
     * Sets pick_summary_format
     *
     * @param string $pick_summary_format pick_summary_format
     *
     * @return $this
     */
    public function setPickSummaryFormat($pick_summary_format)
    {
        $this->container['pick_summary_format'] = $pick_summary_format;

        return $this;
    }

    /**
     * Gets pick_summary_layout
     *
     * @return string
     */
    public function getPickSummaryLayout()
    {
        return $this->container['pick_summary_layout'];
    }

    /**
     * Sets pick_summary_layout
     *
     * @param string $pick_summary_layout pick_summary_layout
     *
     * @return $this
     */
    public function setPickSummaryLayout($pick_summary_layout)
    {
        $this->container['pick_summary_layout'] = $pick_summary_layout;

        return $this;
    }

    /**
     * Gets pick_summary_sort
     *
     * @return string
     */
    public function getPickSummarySort()
    {
        return $this->container['pick_summary_sort'];
    }

    /**
     * Sets pick_summary_sort
     *
     * @param string $pick_summary_sort pick_summary_sort
     *
     * @return $this
     */
    public function setPickSummarySort($pick_summary_sort)
    {
        $this->container['pick_summary_sort'] = $pick_summary_sort;

        return $this;
    }

    /**
     * Gets create_pick_summary
     *
     * @return bool
     */
    public function getCreatePickSummary()
    {
        return $this->container['create_pick_summary'];
    }

    /**
     * Sets create_pick_summary
     *
     * @param bool $create_pick_summary create_pick_summary
     *
     * @return $this
     */
    public function setCreatePickSummary($create_pick_summary)
    {
        $this->container['create_pick_summary'] = $create_pick_summary;

        return $this;
    }

    /**
     * Gets create_pick_list
     *
     * @return bool
     */
    public function getCreatePickList()
    {
        return $this->container['create_pick_list'];
    }

    /**
     * Sets create_pick_list
     *
     * @param bool $create_pick_list create_pick_list
     *
     * @return $this
     */
    public function setCreatePickList($create_pick_list)
    {
        $this->container['create_pick_list'] = $create_pick_list;

        return $this;
    }

    /**
     * Gets pre_generate_parcel_labels
     *
     * @return bool
     */
    public function getPreGenerateParcelLabels()
    {
        return $this->container['pre_generate_parcel_labels'];
    }

    /**
     * Sets pre_generate_parcel_labels
     *
     * @param bool $pre_generate_parcel_labels pre_generate_parcel_labels
     *
     * @return $this
     */
    public function setPreGenerateParcelLabels($pre_generate_parcel_labels)
    {
        $this->container['pre_generate_parcel_labels'] = $pre_generate_parcel_labels;

        return $this;
    }

    /**
     * Gets label_sort
     *
     * @return string
     */
    public function getLabelSort()
    {
        return $this->container['label_sort'];
    }

    /**
     * Sets label_sort
     *
     * @param string $label_sort label_sort
     *
     * @return $this
     */
    public function setLabelSort($label_sort)
    {
        $this->container['label_sort'] = $label_sort;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime $ship_date ship_date
     *
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets auto_ship_casebreak_cartons
     *
     * @return bool
     */
    public function getAutoShipCasebreakCartons()
    {
        return $this->container['auto_ship_casebreak_cartons'];
    }

    /**
     * Sets auto_ship_casebreak_cartons
     *
     * @param bool $auto_ship_casebreak_cartons auto_ship_casebreak_cartons
     *
     * @return $this
     */
    public function setAutoShipCasebreakCartons($auto_ship_casebreak_cartons)
    {
        $this->container['auto_ship_casebreak_cartons'] = $auto_ship_casebreak_cartons;

        return $this;
    }

    /**
     * Gets auto_ship_orders
     *
     * @return bool
     */
    public function getAutoShipOrders()
    {
        return $this->container['auto_ship_orders'];
    }

    /**
     * Sets auto_ship_orders
     *
     * @param bool $auto_ship_orders auto_ship_orders
     *
     * @return $this
     */
    public function setAutoShipOrders($auto_ship_orders)
    {
        $this->container['auto_ship_orders'] = $auto_ship_orders;

        return $this;
    }

    /**
     * Gets cartonize_orders
     *
     * @return bool
     */
    public function getCartonizeOrders()
    {
        return $this->container['cartonize_orders'];
    }

    /**
     * Sets cartonize_orders
     *
     * @param bool $cartonize_orders cartonize_orders
     *
     * @return $this
     */
    public function setCartonizeOrders($cartonize_orders)
    {
        $this->container['cartonize_orders'] = $cartonize_orders;

        return $this;
    }

    /**
     * Gets cartonization_script_id
     *
     * @return int
     */
    public function getCartonizationScriptId()
    {
        return $this->container['cartonization_script_id'];
    }

    /**
     * Sets cartonization_script_id
     *
     * @param int $cartonization_script_id cartonization_script_id
     *
     * @return $this
     */
    public function setCartonizationScriptId($cartonization_script_id)
    {
        $this->container['cartonization_script_id'] = $cartonization_script_id;

        return $this;
    }

    /**
     * Gets create_packing_slip
     *
     * @return string
     */
    public function getCreatePackingSlip()
    {
        return $this->container['create_packing_slip'];
    }

    /**
     * Sets create_packing_slip
     *
     * @param string $create_packing_slip create_packing_slip
     *
     * @return $this
     */
    public function setCreatePackingSlip($create_packing_slip)
    {
        $this->container['create_packing_slip'] = $create_packing_slip;

        return $this;
    }

    /**
     * Gets override_packing_slip_template_id
     *
     * @return int
     */
    public function getOverridePackingSlipTemplateId()
    {
        return $this->container['override_packing_slip_template_id'];
    }

    /**
     * Sets override_packing_slip_template_id
     *
     * @param int $override_packing_slip_template_id override_packing_slip_template_id
     *
     * @return $this
     */
    public function setOverridePackingSlipTemplateId($override_packing_slip_template_id)
    {
        $this->container['override_packing_slip_template_id'] = $override_packing_slip_template_id;

        return $this;
    }

    /**
     * Gets create_order_assembly_guide
     *
     * @return bool
     */
    public function getCreateOrderAssemblyGuide()
    {
        return $this->container['create_order_assembly_guide'];
    }

    /**
     * Sets create_order_assembly_guide
     *
     * @param bool $create_order_assembly_guide create_order_assembly_guide
     *
     * @return $this
     */
    public function setCreateOrderAssemblyGuide($create_order_assembly_guide)
    {
        $this->container['create_order_assembly_guide'] = $create_order_assembly_guide;

        return $this;
    }

    /**
     * Gets order_assembly_guide_layout
     *
     * @return string
     */
    public function getOrderAssemblyGuideLayout()
    {
        return $this->container['order_assembly_guide_layout'];
    }

    /**
     * Sets order_assembly_guide_layout
     *
     * @param string $order_assembly_guide_layout order_assembly_guide_layout
     *
     * @return $this
     */
    public function setOrderAssemblyGuideLayout($order_assembly_guide_layout)
    {
        $this->container['order_assembly_guide_layout'] = $order_assembly_guide_layout;

        return $this;
    }

    /**
     * Gets create_order_invoice
     *
     * @return string
     */
    public function getCreateOrderInvoice()
    {
        return $this->container['create_order_invoice'];
    }

    /**
     * Sets create_order_invoice
     *
     * @param string $create_order_invoice create_order_invoice
     *
     * @return $this
     */
    public function setCreateOrderInvoice($create_order_invoice)
    {
        $this->container['create_order_invoice'] = $create_order_invoice;

        return $this;
    }

    /**
     * Gets override_order_invoice_template_id
     *
     * @return int
     */
    public function getOverrideOrderInvoiceTemplateId()
    {
        return $this->container['override_order_invoice_template_id'];
    }

    /**
     * Sets override_order_invoice_template_id
     *
     * @param int $override_order_invoice_template_id override_order_invoice_template_id
     *
     * @return $this
     */
    public function setOverrideOrderInvoiceTemplateId($override_order_invoice_template_id)
    {
        $this->container['override_order_invoice_template_id'] = $override_order_invoice_template_id;

        return $this;
    }

    /**
     * Gets create_carton_gs1128_labels
     *
     * @return string
     */
    public function getCreateCartonGs1128Labels()
    {
        return $this->container['create_carton_gs1128_labels'];
    }

    /**
     * Sets create_carton_gs1128_labels
     *
     * @param string $create_carton_gs1128_labels create_carton_gs1128_labels
     *
     * @return $this
     */
    public function setCreateCartonGs1128Labels($create_carton_gs1128_labels)
    {
        $this->container['create_carton_gs1128_labels'] = $create_carton_gs1128_labels;

        return $this;
    }

    /**
     * Gets create_line_item_each_gs1128_labels
     *
     * @return string
     */
    public function getCreateLineItemEachGs1128Labels()
    {
        return $this->container['create_line_item_each_gs1128_labels'];
    }

    /**
     * Sets create_line_item_each_gs1128_labels
     *
     * @param string $create_line_item_each_gs1128_labels create_line_item_each_gs1128_labels
     *
     * @return $this
     */
    public function setCreateLineItemEachGs1128Labels($create_line_item_each_gs1128_labels)
    {
        $this->container['create_line_item_each_gs1128_labels'] = $create_line_item_each_gs1128_labels;

        return $this;
    }

    /**
     * Gets send_to_external_shipping_system
     *
     * @return bool
     */
    public function getSendToExternalShippingSystem()
    {
        return $this->container['send_to_external_shipping_system'];
    }

    /**
     * Sets send_to_external_shipping_system
     *
     * @param bool $send_to_external_shipping_system send_to_external_shipping_system
     *
     * @return $this
     */
    public function setSendToExternalShippingSystem($send_to_external_shipping_system)
    {
        $this->container['send_to_external_shipping_system'] = $send_to_external_shipping_system;

        return $this;
    }

    /**
     * Gets external_shipping_system_id
     *
     * @return int
     */
    public function getExternalShippingSystemId()
    {
        return $this->container['external_shipping_system_id'];
    }

    /**
     * Sets external_shipping_system_id
     *
     * @param int $external_shipping_system_id external_shipping_system_id
     *
     * @return $this
     */
    public function setExternalShippingSystemId($external_shipping_system_id)
    {
        $this->container['external_shipping_system_id'] = $external_shipping_system_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


