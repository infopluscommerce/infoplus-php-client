<?php
/**
 * BillOfLadingOrderInfoLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * BillOfLadingOrderInfoLine Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillOfLadingOrderInfoLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'billOfLadingOrderInfoLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_order_no' => 'string',
        'no_packages' => 'int',
        'weight' => 'int',
        'palletslip' => 'bool',
        'additional_shipper_info' => 'string',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_order_no' => null,
        'no_packages' => 'int32',
        'weight' => 'int32',
        'palletslip' => null,
        'additional_shipper_info' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_order_no' => 'customerOrderNo',
        'no_packages' => 'noPackages',
        'weight' => 'weight',
        'palletslip' => 'palletslip',
        'additional_shipper_info' => 'additionalShipperInfo',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_order_no' => 'setCustomerOrderNo',
        'no_packages' => 'setNoPackages',
        'weight' => 'setWeight',
        'palletslip' => 'setPalletslip',
        'additional_shipper_info' => 'setAdditionalShipperInfo',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_order_no' => 'getCustomerOrderNo',
        'no_packages' => 'getNoPackages',
        'weight' => 'getWeight',
        'palletslip' => 'getPalletslip',
        'additional_shipper_info' => 'getAdditionalShipperInfo',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_order_no'] = isset($data['customer_order_no']) ? $data['customer_order_no'] : null;
        $this->container['no_packages'] = isset($data['no_packages']) ? $data['no_packages'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['palletslip'] = isset($data['palletslip']) ? $data['palletslip'] : false;
        $this->container['additional_shipper_info'] = isset($data['additional_shipper_info']) ? $data['additional_shipper_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['additional_shipper_info'] === null) {
            $invalidProperties[] = "'additional_shipper_info' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['additional_shipper_info'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_order_no
     *
     * @return string
     */
    public function getCustomerOrderNo()
    {
        return $this->container['customer_order_no'];
    }

    /**
     * Sets customer_order_no
     *
     * @param string $customer_order_no customer_order_no
     *
     * @return $this
     */
    public function setCustomerOrderNo($customer_order_no)
    {
        $this->container['customer_order_no'] = $customer_order_no;

        return $this;
    }

    /**
     * Gets no_packages
     *
     * @return int
     */
    public function getNoPackages()
    {
        return $this->container['no_packages'];
    }

    /**
     * Sets no_packages
     *
     * @param int $no_packages no_packages
     *
     * @return $this
     */
    public function setNoPackages($no_packages)
    {
        $this->container['no_packages'] = $no_packages;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets palletslip
     *
     * @return bool
     */
    public function getPalletslip()
    {
        return $this->container['palletslip'];
    }

    /**
     * Sets palletslip
     *
     * @param bool $palletslip palletslip
     *
     * @return $this
     */
    public function setPalletslip($palletslip)
    {
        $this->container['palletslip'] = $palletslip;

        return $this;
    }

    /**
     * Gets additional_shipper_info
     *
     * @return string
     */
    public function getAdditionalShipperInfo()
    {
        return $this->container['additional_shipper_info'];
    }

    /**
     * Sets additional_shipper_info
     *
     * @param string $additional_shipper_info additional_shipper_info
     *
     * @return $this
     */
    public function setAdditionalShipperInfo($additional_shipper_info)
    {
        $this->container['additional_shipper_info'] = $additional_shipper_info;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


