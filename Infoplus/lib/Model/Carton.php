<?php
/**
 * Carton
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Model;

use \ArrayAccess;
use \Infoplus\ObjectSerializer;

/**
 * Carton Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Carton implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'carton';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'order_no' => 'float',
        'carton_no' => 'int',
        'carton_type_id' => 'int',
        'carton_lpn' => 'string',
        'weight_lbs' => 'float',
        'layout_position' => 'string',
        'lob_id' => 'int',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'order_no' => null,
        'carton_no' => 'int32',
        'carton_type_id' => 'int32',
        'carton_lpn' => null,
        'weight_lbs' => null,
        'layout_position' => null,
        'lob_id' => 'int32',
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_no' => 'orderNo',
        'carton_no' => 'cartonNo',
        'carton_type_id' => 'cartonTypeId',
        'carton_lpn' => 'cartonLPN',
        'weight_lbs' => 'weightLbs',
        'layout_position' => 'layoutPosition',
        'lob_id' => 'lobId',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_no' => 'setOrderNo',
        'carton_no' => 'setCartonNo',
        'carton_type_id' => 'setCartonTypeId',
        'carton_lpn' => 'setCartonLpn',
        'weight_lbs' => 'setWeightLbs',
        'layout_position' => 'setLayoutPosition',
        'lob_id' => 'setLobId',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_no' => 'getOrderNo',
        'carton_no' => 'getCartonNo',
        'carton_type_id' => 'getCartonTypeId',
        'carton_lpn' => 'getCartonLpn',
        'weight_lbs' => 'getWeightLbs',
        'layout_position' => 'getLayoutPosition',
        'lob_id' => 'getLobId',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['carton_no'] = isset($data['carton_no']) ? $data['carton_no'] : null;
        $this->container['carton_type_id'] = isset($data['carton_type_id']) ? $data['carton_type_id'] : null;
        $this->container['carton_lpn'] = isset($data['carton_lpn']) ? $data['carton_lpn'] : null;
        $this->container['weight_lbs'] = isset($data['weight_lbs']) ? $data['weight_lbs'] : null;
        $this->container['layout_position'] = isset($data['layout_position']) ? $data['layout_position'] : null;
        $this->container['lob_id'] = isset($data['lob_id']) ? $data['lob_id'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_no'] === null) {
            $invalidProperties[] = "'order_no' can't be null";
        }
        if ($this->container['carton_no'] === null) {
            $invalidProperties[] = "'carton_no' can't be null";
        }
        if ($this->container['carton_type_id'] === null) {
            $invalidProperties[] = "'carton_type_id' can't be null";
        }
        if ($this->container['lob_id'] === null) {
            $invalidProperties[] = "'lob_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_no'] === null) {
            return false;
        }
        if ($this->container['carton_no'] === null) {
            return false;
        }
        if ($this->container['carton_type_id'] === null) {
            return false;
        }
        if ($this->container['lob_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return float
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param float $order_no order_no
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets carton_no
     *
     * @return int
     */
    public function getCartonNo()
    {
        return $this->container['carton_no'];
    }

    /**
     * Sets carton_no
     *
     * @param int $carton_no carton_no
     *
     * @return $this
     */
    public function setCartonNo($carton_no)
    {
        $this->container['carton_no'] = $carton_no;

        return $this;
    }

    /**
     * Gets carton_type_id
     *
     * @return int
     */
    public function getCartonTypeId()
    {
        return $this->container['carton_type_id'];
    }

    /**
     * Sets carton_type_id
     *
     * @param int $carton_type_id carton_type_id
     *
     * @return $this
     */
    public function setCartonTypeId($carton_type_id)
    {
        $this->container['carton_type_id'] = $carton_type_id;

        return $this;
    }

    /**
     * Gets carton_lpn
     *
     * @return string
     */
    public function getCartonLpn()
    {
        return $this->container['carton_lpn'];
    }

    /**
     * Sets carton_lpn
     *
     * @param string $carton_lpn carton_lpn
     *
     * @return $this
     */
    public function setCartonLpn($carton_lpn)
    {
        $this->container['carton_lpn'] = $carton_lpn;

        return $this;
    }

    /**
     * Gets weight_lbs
     *
     * @return float
     */
    public function getWeightLbs()
    {
        return $this->container['weight_lbs'];
    }

    /**
     * Sets weight_lbs
     *
     * @param float $weight_lbs weight_lbs
     *
     * @return $this
     */
    public function setWeightLbs($weight_lbs)
    {
        $this->container['weight_lbs'] = $weight_lbs;

        return $this;
    }

    /**
     * Gets layout_position
     *
     * @return string
     */
    public function getLayoutPosition()
    {
        return $this->container['layout_position'];
    }

    /**
     * Sets layout_position
     *
     * @param string $layout_position layout_position
     *
     * @return $this
     */
    public function setLayoutPosition($layout_position)
    {
        $this->container['layout_position'] = $layout_position;

        return $this;
    }

    /**
     * Gets lob_id
     *
     * @return int
     */
    public function getLobId()
    {
        return $this->container['lob_id'];
    }

    /**
     * Sets lob_id
     *
     * @param int $lob_id lob_id
     *
     * @return $this
     */
    public function setLobId($lob_id)
    {
        $this->container['lob_id'] = $lob_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


