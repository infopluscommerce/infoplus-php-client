<?php
/**
 * Carton
 *
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Model;

use \ArrayAccess;
/**
 * Carton Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Infoplus
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Carton implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'order_no' => 'Number',
        'carton_no' => 'int',
        'carton_type_id' => 'int',
        'carton_lpn' => 'string',
        'weight_lbs' => 'Number',
        'custom_fields' => 'map[string,object]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'order_no' => 'orderNo',
        'carton_no' => 'cartonNo',
        'carton_type_id' => 'cartonTypeId',
        'carton_lpn' => 'cartonLPN',
        'weight_lbs' => 'weightLbs',
        'custom_fields' => 'customFields'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'order_no' => 'setOrderNo',
        'carton_no' => 'setCartonNo',
        'carton_type_id' => 'setCartonTypeId',
        'carton_lpn' => 'setCartonLpn',
        'weight_lbs' => 'setWeightLbs',
        'custom_fields' => 'setCustomFields'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'order_no' => 'getOrderNo',
        'carton_no' => 'getCartonNo',
        'carton_type_id' => 'getCartonTypeId',
        'carton_lpn' => 'getCartonLpn',
        'weight_lbs' => 'getWeightLbs',
        'custom_fields' => 'getCustomFields'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $order_no 
      * @var Number
      */
    protected $order_no;
    
    /**
      * $carton_no 
      * @var int
      */
    protected $carton_no;
    
    /**
      * $carton_type_id 
      * @var int
      */
    protected $carton_type_id;
    
    /**
      * $carton_lpn 
      * @var string
      */
    protected $carton_lpn;
    
    /**
      * $weight_lbs 
      * @var Number
      */
    protected $weight_lbs;
    
    /**
      * $custom_fields 
      * @var map[string,object]
      */
    protected $custom_fields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->order_no = $data["order_no"];
            $this->carton_no = $data["carton_no"];
            $this->carton_type_id = $data["carton_type_id"];
            $this->carton_lpn = $data["carton_lpn"];
            $this->weight_lbs = $data["weight_lbs"];
            $this->custom_fields = $data["custom_fields"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets order_no
     * @return Number
     */
    public function getOrderNo()
    {
        return $this->order_no;
    }
  
    /**
     * Sets order_no
     * @param Number $order_no 
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        
        $this->order_no = $order_no;
        return $this;
    }
    
    /**
     * Gets carton_no
     * @return int
     */
    public function getCartonNo()
    {
        return $this->carton_no;
    }
  
    /**
     * Sets carton_no
     * @param int $carton_no 
     * @return $this
     */
    public function setCartonNo($carton_no)
    {
        
        $this->carton_no = $carton_no;
        return $this;
    }
    
    /**
     * Gets carton_type_id
     * @return int
     */
    public function getCartonTypeId()
    {
        return $this->carton_type_id;
    }
  
    /**
     * Sets carton_type_id
     * @param int $carton_type_id 
     * @return $this
     */
    public function setCartonTypeId($carton_type_id)
    {
        
        $this->carton_type_id = $carton_type_id;
        return $this;
    }
    
    /**
     * Gets carton_lpn
     * @return string
     */
    public function getCartonLpn()
    {
        return $this->carton_lpn;
    }
  
    /**
     * Sets carton_lpn
     * @param string $carton_lpn 
     * @return $this
     */
    public function setCartonLpn($carton_lpn)
    {
        
        $this->carton_lpn = $carton_lpn;
        return $this;
    }
    
    /**
     * Gets weight_lbs
     * @return Number
     */
    public function getWeightLbs()
    {
        return $this->weight_lbs;
    }
  
    /**
     * Sets weight_lbs
     * @param Number $weight_lbs 
     * @return $this
     */
    public function setWeightLbs($weight_lbs)
    {
        
        $this->weight_lbs = $weight_lbs;
        return $this;
    }
    
    /**
     * Gets custom_fields
     * @return map[string,object]
     */
    public function getCustomFields()
    {
        return $this->custom_fields;
    }
  
    /**
     * Sets custom_fields
     * @param map[string,object] $custom_fields 
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        
        $this->custom_fields = $custom_fields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Infoplus\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
