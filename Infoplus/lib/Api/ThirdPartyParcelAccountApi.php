<?php
/**
 * ThirdPartyParcelAccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * ThirdPartyParcelAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThirdPartyParcelAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addThirdPartyParcelAccount
     *
     * Create a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ThirdPartyParcelAccount
     */
    public function addThirdPartyParcelAccount($body)
    {
        list($response) = $this->addThirdPartyParcelAccountWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addThirdPartyParcelAccountWithHttpInfo
     *
     * Create a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ThirdPartyParcelAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function addThirdPartyParcelAccountWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->addThirdPartyParcelAccountRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addThirdPartyParcelAccountAsync
     *
     * Create a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountAsync($body)
    {
        return $this->addThirdPartyParcelAccountAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addThirdPartyParcelAccountAsyncWithHttpInfo
     *
     * Create a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->addThirdPartyParcelAccountRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addThirdPartyParcelAccount'
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addThirdPartyParcelAccountRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addThirdPartyParcelAccount'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addThirdPartyParcelAccountAudit
     *
     * Add new audit for a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param  string $third_party_parcel_account_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addThirdPartyParcelAccountAudit($third_party_parcel_account_id, $third_party_parcel_account_audit)
    {
        $this->addThirdPartyParcelAccountAuditWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_audit);
    }

    /**
     * Operation addThirdPartyParcelAccountAuditWithHttpInfo
     *
     * Add new audit for a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param  string $third_party_parcel_account_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addThirdPartyParcelAccountAuditWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_audit)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountAuditRequest($third_party_parcel_account_id, $third_party_parcel_account_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addThirdPartyParcelAccountAuditAsync
     *
     * Add new audit for a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param  string $third_party_parcel_account_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountAuditAsync($third_party_parcel_account_id, $third_party_parcel_account_audit)
    {
        return $this->addThirdPartyParcelAccountAuditAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addThirdPartyParcelAccountAuditAsyncWithHttpInfo
     *
     * Add new audit for a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param  string $third_party_parcel_account_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountAuditAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_audit)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountAuditRequest($third_party_parcel_account_id, $third_party_parcel_account_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addThirdPartyParcelAccountAudit'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an audit to (required)
     * @param  string $third_party_parcel_account_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addThirdPartyParcelAccountAuditRequest($third_party_parcel_account_id, $third_party_parcel_account_audit)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling addThirdPartyParcelAccountAudit'
            );
        }
        // verify the required parameter 'third_party_parcel_account_audit' is set
        if ($third_party_parcel_account_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_audit when calling addThirdPartyParcelAccountAudit'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/audit/{thirdPartyParcelAccountAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }
        // path params
        if ($third_party_parcel_account_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountAudit' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addThirdPartyParcelAccountFile
     *
     * Attach a file to a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addThirdPartyParcelAccountFile($third_party_parcel_account_id, $file_name)
    {
        $this->addThirdPartyParcelAccountFileWithHttpInfo($third_party_parcel_account_id, $file_name);
    }

    /**
     * Operation addThirdPartyParcelAccountFileWithHttpInfo
     *
     * Attach a file to a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addThirdPartyParcelAccountFileWithHttpInfo($third_party_parcel_account_id, $file_name)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addThirdPartyParcelAccountFileAsync
     *
     * Attach a file to a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountFileAsync($third_party_parcel_account_id, $file_name)
    {
        return $this->addThirdPartyParcelAccountFileAsyncWithHttpInfo($third_party_parcel_account_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addThirdPartyParcelAccountFileAsyncWithHttpInfo
     *
     * Attach a file to a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountFileAsyncWithHttpInfo($third_party_parcel_account_id, $file_name)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addThirdPartyParcelAccountFile'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_name)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling addThirdPartyParcelAccountFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addThirdPartyParcelAccountFile'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addThirdPartyParcelAccountFileByURL
     *
     * Attach a file to a thirdPartyParcelAccount by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addThirdPartyParcelAccountFileByURL($body, $third_party_parcel_account_id)
    {
        $this->addThirdPartyParcelAccountFileByURLWithHttpInfo($body, $third_party_parcel_account_id);
    }

    /**
     * Operation addThirdPartyParcelAccountFileByURLWithHttpInfo
     *
     * Attach a file to a thirdPartyParcelAccount by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addThirdPartyParcelAccountFileByURLWithHttpInfo($body, $third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountFileByURLRequest($body, $third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addThirdPartyParcelAccountFileByURLAsync
     *
     * Attach a file to a thirdPartyParcelAccount by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountFileByURLAsync($body, $third_party_parcel_account_id)
    {
        return $this->addThirdPartyParcelAccountFileByURLAsyncWithHttpInfo($body, $third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addThirdPartyParcelAccountFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a thirdPartyParcelAccount by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountFileByURLAsyncWithHttpInfo($body, $third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountFileByURLRequest($body, $third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addThirdPartyParcelAccountFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addThirdPartyParcelAccountFileByURLRequest($body, $third_party_parcel_account_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addThirdPartyParcelAccountFileByURL'
            );
        }
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling addThirdPartyParcelAccountFileByURL'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addThirdPartyParcelAccountTag
     *
     * Add new tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param  string $third_party_parcel_account_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addThirdPartyParcelAccountTag($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $this->addThirdPartyParcelAccountTagWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag);
    }

    /**
     * Operation addThirdPartyParcelAccountTagWithHttpInfo
     *
     * Add new tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param  string $third_party_parcel_account_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addThirdPartyParcelAccountTagWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addThirdPartyParcelAccountTagAsync
     *
     * Add new tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param  string $third_party_parcel_account_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountTagAsync($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        return $this->addThirdPartyParcelAccountTagAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addThirdPartyParcelAccountTagAsyncWithHttpInfo
     *
     * Add new tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param  string $third_party_parcel_account_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addThirdPartyParcelAccountTagAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $returnType = '';
        $request = $this->addThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addThirdPartyParcelAccountTag'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to add a tag to (required)
     * @param  string $third_party_parcel_account_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling addThirdPartyParcelAccountTag'
            );
        }
        // verify the required parameter 'third_party_parcel_account_tag' is set
        if ($third_party_parcel_account_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_tag when calling addThirdPartyParcelAccountTag'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }
        // path params
        if ($third_party_parcel_account_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountTag' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteThirdPartyParcelAccount
     *
     * Delete a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteThirdPartyParcelAccount($third_party_parcel_account_id)
    {
        $this->deleteThirdPartyParcelAccountWithHttpInfo($third_party_parcel_account_id);
    }

    /**
     * Operation deleteThirdPartyParcelAccountWithHttpInfo
     *
     * Delete a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteThirdPartyParcelAccountWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountRequest($third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteThirdPartyParcelAccountAsync
     *
     * Delete a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountAsync($third_party_parcel_account_id)
    {
        return $this->deleteThirdPartyParcelAccountAsyncWithHttpInfo($third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteThirdPartyParcelAccountAsyncWithHttpInfo
     *
     * Delete a thirdPartyParcelAccount
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountAsyncWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountRequest($third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteThirdPartyParcelAccount'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteThirdPartyParcelAccountRequest($third_party_parcel_account_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling deleteThirdPartyParcelAccount'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteThirdPartyParcelAccountFile
     *
     * Delete a file for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteThirdPartyParcelAccountFile($third_party_parcel_account_id, $file_id)
    {
        $this->deleteThirdPartyParcelAccountFileWithHttpInfo($third_party_parcel_account_id, $file_id);
    }

    /**
     * Operation deleteThirdPartyParcelAccountFileWithHttpInfo
     *
     * Delete a file for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteThirdPartyParcelAccountFileWithHttpInfo($third_party_parcel_account_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteThirdPartyParcelAccountFileAsync
     *
     * Delete a file for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountFileAsync($third_party_parcel_account_id, $file_id)
    {
        return $this->deleteThirdPartyParcelAccountFileAsyncWithHttpInfo($third_party_parcel_account_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteThirdPartyParcelAccountFileAsyncWithHttpInfo
     *
     * Delete a file for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountFileAsyncWithHttpInfo($third_party_parcel_account_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteThirdPartyParcelAccountFile'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteThirdPartyParcelAccountFileRequest($third_party_parcel_account_id, $file_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling deleteThirdPartyParcelAccountFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteThirdPartyParcelAccountFile'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteThirdPartyParcelAccountTag
     *
     * Delete a tag for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param  string $third_party_parcel_account_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteThirdPartyParcelAccountTag($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $this->deleteThirdPartyParcelAccountTagWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag);
    }

    /**
     * Operation deleteThirdPartyParcelAccountTagWithHttpInfo
     *
     * Delete a tag for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param  string $third_party_parcel_account_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteThirdPartyParcelAccountTagWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteThirdPartyParcelAccountTagAsync
     *
     * Delete a tag for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param  string $third_party_parcel_account_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountTagAsync($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        return $this->deleteThirdPartyParcelAccountTagAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteThirdPartyParcelAccountTagAsyncWithHttpInfo
     *
     * Delete a tag for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param  string $third_party_parcel_account_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteThirdPartyParcelAccountTagAsyncWithHttpInfo($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        $returnType = '';
        $request = $this->deleteThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteThirdPartyParcelAccountTag'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to remove tag from (required)
     * @param  string $third_party_parcel_account_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteThirdPartyParcelAccountTagRequest($third_party_parcel_account_id, $third_party_parcel_account_tag)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling deleteThirdPartyParcelAccountTag'
            );
        }
        // verify the required parameter 'third_party_parcel_account_tag' is set
        if ($third_party_parcel_account_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_tag when calling deleteThirdPartyParcelAccountTag'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag/{thirdPartyParcelAccountTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }
        // path params
        if ($third_party_parcel_account_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountTag' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateThirdPartyParcelAccountById
     *
     * Get a duplicated a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ThirdPartyParcelAccount
     */
    public function getDuplicateThirdPartyParcelAccountById($third_party_parcel_account_id)
    {
        list($response) = $this->getDuplicateThirdPartyParcelAccountByIdWithHttpInfo($third_party_parcel_account_id);
        return $response;
    }

    /**
     * Operation getDuplicateThirdPartyParcelAccountByIdWithHttpInfo
     *
     * Get a duplicated a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ThirdPartyParcelAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateThirdPartyParcelAccountByIdWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->getDuplicateThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateThirdPartyParcelAccountByIdAsync
     *
     * Get a duplicated a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateThirdPartyParcelAccountByIdAsync($third_party_parcel_account_id)
    {
        return $this->getDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo($third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo
     *
     * Get a duplicated a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateThirdPartyParcelAccountByIdAsyncWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->getDuplicateThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateThirdPartyParcelAccountById'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling getDuplicateThirdPartyParcelAccountById'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/duplicate/{thirdPartyParcelAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getThirdPartyParcelAccountByFilter
     *
     * Search thirdPartyParcelAccounts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ThirdPartyParcelAccount[]
     */
    public function getThirdPartyParcelAccountByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getThirdPartyParcelAccountByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getThirdPartyParcelAccountByFilterWithHttpInfo
     *
     * Search thirdPartyParcelAccounts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ThirdPartyParcelAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getThirdPartyParcelAccountByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount[]';
        $request = $this->getThirdPartyParcelAccountByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getThirdPartyParcelAccountByFilterAsync
     *
     * Search thirdPartyParcelAccounts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getThirdPartyParcelAccountByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThirdPartyParcelAccountByFilterAsyncWithHttpInfo
     *
     * Search thirdPartyParcelAccounts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount[]';
        $request = $this->getThirdPartyParcelAccountByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThirdPartyParcelAccountByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThirdPartyParcelAccountByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/thirdPartyParcelAccount/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getThirdPartyParcelAccountById
     *
     * Get a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ThirdPartyParcelAccount
     */
    public function getThirdPartyParcelAccountById($third_party_parcel_account_id)
    {
        list($response) = $this->getThirdPartyParcelAccountByIdWithHttpInfo($third_party_parcel_account_id);
        return $response;
    }

    /**
     * Operation getThirdPartyParcelAccountByIdWithHttpInfo
     *
     * Get a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ThirdPartyParcelAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThirdPartyParcelAccountByIdWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->getThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getThirdPartyParcelAccountByIdAsync
     *
     * Get a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountByIdAsync($third_party_parcel_account_id)
    {
        return $this->getThirdPartyParcelAccountByIdAsyncWithHttpInfo($third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThirdPartyParcelAccountByIdAsyncWithHttpInfo
     *
     * Get a thirdPartyParcelAccount by id
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountByIdAsyncWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ThirdPartyParcelAccount';
        $request = $this->getThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThirdPartyParcelAccountById'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThirdPartyParcelAccountByIdRequest($third_party_parcel_account_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling getThirdPartyParcelAccountById'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getThirdPartyParcelAccountFiles
     *
     * Get the files for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getThirdPartyParcelAccountFiles($third_party_parcel_account_id)
    {
        $this->getThirdPartyParcelAccountFilesWithHttpInfo($third_party_parcel_account_id);
    }

    /**
     * Operation getThirdPartyParcelAccountFilesWithHttpInfo
     *
     * Get the files for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThirdPartyParcelAccountFilesWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->getThirdPartyParcelAccountFilesRequest($third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getThirdPartyParcelAccountFilesAsync
     *
     * Get the files for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountFilesAsync($third_party_parcel_account_id)
    {
        return $this->getThirdPartyParcelAccountFilesAsyncWithHttpInfo($third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThirdPartyParcelAccountFilesAsyncWithHttpInfo
     *
     * Get the files for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountFilesAsyncWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->getThirdPartyParcelAccountFilesRequest($third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThirdPartyParcelAccountFiles'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThirdPartyParcelAccountFilesRequest($third_party_parcel_account_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling getThirdPartyParcelAccountFiles'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getThirdPartyParcelAccountTags
     *
     * Get the tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getThirdPartyParcelAccountTags($third_party_parcel_account_id)
    {
        $this->getThirdPartyParcelAccountTagsWithHttpInfo($third_party_parcel_account_id);
    }

    /**
     * Operation getThirdPartyParcelAccountTagsWithHttpInfo
     *
     * Get the tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getThirdPartyParcelAccountTagsWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->getThirdPartyParcelAccountTagsRequest($third_party_parcel_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getThirdPartyParcelAccountTagsAsync
     *
     * Get the tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountTagsAsync($third_party_parcel_account_id)
    {
        return $this->getThirdPartyParcelAccountTagsAsyncWithHttpInfo($third_party_parcel_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getThirdPartyParcelAccountTagsAsyncWithHttpInfo
     *
     * Get the tags for a thirdPartyParcelAccount.
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getThirdPartyParcelAccountTagsAsyncWithHttpInfo($third_party_parcel_account_id)
    {
        $returnType = '';
        $request = $this->getThirdPartyParcelAccountTagsRequest($third_party_parcel_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getThirdPartyParcelAccountTags'
     *
     * @param  int $third_party_parcel_account_id Id of the thirdPartyParcelAccount to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThirdPartyParcelAccountTagsRequest($third_party_parcel_account_id)
    {
        // verify the required parameter 'third_party_parcel_account_id' is set
        if ($third_party_parcel_account_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $third_party_parcel_account_id when calling getThirdPartyParcelAccountTags'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/{thirdPartyParcelAccountId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($third_party_parcel_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'thirdPartyParcelAccountId' . '}',
                ObjectSerializer::toPathValue($third_party_parcel_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateThirdPartyParcelAccount
     *
     * Update a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateThirdPartyParcelAccount($body)
    {
        $this->updateThirdPartyParcelAccountWithHttpInfo($body);
    }

    /**
     * Operation updateThirdPartyParcelAccountWithHttpInfo
     *
     * Update a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThirdPartyParcelAccountWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateThirdPartyParcelAccountRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateThirdPartyParcelAccountAsync
     *
     * Update a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThirdPartyParcelAccountAsync($body)
    {
        return $this->updateThirdPartyParcelAccountAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateThirdPartyParcelAccountAsyncWithHttpInfo
     *
     * Update a thirdPartyParcelAccount
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThirdPartyParcelAccountAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateThirdPartyParcelAccountRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateThirdPartyParcelAccount'
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateThirdPartyParcelAccountRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateThirdPartyParcelAccount'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateThirdPartyParcelAccountCustomFields
     *
     * Update a thirdPartyParcelAccount custom fields
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateThirdPartyParcelAccountCustomFields($body)
    {
        $this->updateThirdPartyParcelAccountCustomFieldsWithHttpInfo($body);
    }

    /**
     * Operation updateThirdPartyParcelAccountCustomFieldsWithHttpInfo
     *
     * Update a thirdPartyParcelAccount custom fields
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThirdPartyParcelAccountCustomFieldsWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateThirdPartyParcelAccountCustomFieldsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateThirdPartyParcelAccountCustomFieldsAsync
     *
     * Update a thirdPartyParcelAccount custom fields
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThirdPartyParcelAccountCustomFieldsAsync($body)
    {
        return $this->updateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo
     *
     * Update a thirdPartyParcelAccount custom fields
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThirdPartyParcelAccountCustomFieldsAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateThirdPartyParcelAccountCustomFieldsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateThirdPartyParcelAccountCustomFields'
     *
     * @param  \Infoplus\Infoplus\Model\ThirdPartyParcelAccount $body ThirdPartyParcelAccount to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateThirdPartyParcelAccountCustomFieldsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateThirdPartyParcelAccountCustomFields'
            );
        }

        $resourcePath = '/beta/thirdPartyParcelAccount/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
