<?php
/**
 * ManageScheduledPlansApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * ManageScheduledPlansApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManageScheduledPlansApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addManageScheduledPlans
     *
     * Create a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ManageScheduledPlans
     */
    public function addManageScheduledPlans($body)
    {
        list($response) = $this->addManageScheduledPlansWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addManageScheduledPlansWithHttpInfo
     *
     * Create a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ManageScheduledPlans, HTTP status code, HTTP response headers (array of strings)
     */
    public function addManageScheduledPlansWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->addManageScheduledPlansRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ManageScheduledPlans',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addManageScheduledPlansAsync
     *
     * Create a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansAsync($body)
    {
        return $this->addManageScheduledPlansAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addManageScheduledPlansAsyncWithHttpInfo
     *
     * Create a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->addManageScheduledPlansRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addManageScheduledPlans'
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addManageScheduledPlansRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addManageScheduledPlans'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addManageScheduledPlansAudit
     *
     * Add new audit for a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an audit to (required)
     * @param  string $manage_scheduled_plans_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addManageScheduledPlansAudit($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
    {
        $this->addManageScheduledPlansAuditWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_audit);
    }

    /**
     * Operation addManageScheduledPlansAuditWithHttpInfo
     *
     * Add new audit for a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an audit to (required)
     * @param  string $manage_scheduled_plans_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addManageScheduledPlansAuditWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansAuditRequest($manage_scheduled_plans_id, $manage_scheduled_plans_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addManageScheduledPlansAuditAsync
     *
     * Add new audit for a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an audit to (required)
     * @param  string $manage_scheduled_plans_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansAuditAsync($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
    {
        return $this->addManageScheduledPlansAuditAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addManageScheduledPlansAuditAsyncWithHttpInfo
     *
     * Add new audit for a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an audit to (required)
     * @param  string $manage_scheduled_plans_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansAuditAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansAuditRequest($manage_scheduled_plans_id, $manage_scheduled_plans_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addManageScheduledPlansAudit'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an audit to (required)
     * @param  string $manage_scheduled_plans_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addManageScheduledPlansAuditRequest($manage_scheduled_plans_id, $manage_scheduled_plans_audit)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling addManageScheduledPlansAudit'
            );
        }
        // verify the required parameter 'manage_scheduled_plans_audit' is set
        if ($manage_scheduled_plans_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_audit when calling addManageScheduledPlansAudit'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/audit/{manageScheduledPlansAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }
        // path params
        if ($manage_scheduled_plans_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansAudit' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addManageScheduledPlansFile
     *
     * Attach a file to a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addManageScheduledPlansFile($manage_scheduled_plans_id, $file_name)
    {
        $this->addManageScheduledPlansFileWithHttpInfo($manage_scheduled_plans_id, $file_name);
    }

    /**
     * Operation addManageScheduledPlansFileWithHttpInfo
     *
     * Attach a file to a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addManageScheduledPlansFileWithHttpInfo($manage_scheduled_plans_id, $file_name)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addManageScheduledPlansFileAsync
     *
     * Attach a file to a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansFileAsync($manage_scheduled_plans_id, $file_name)
    {
        return $this->addManageScheduledPlansFileAsyncWithHttpInfo($manage_scheduled_plans_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addManageScheduledPlansFileAsyncWithHttpInfo
     *
     * Attach a file to a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansFileAsyncWithHttpInfo($manage_scheduled_plans_id, $file_name)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addManageScheduledPlansFile'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_name)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling addManageScheduledPlansFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addManageScheduledPlansFile'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addManageScheduledPlansFileByURL
     *
     * Attach a file to a manageScheduledPlans by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addManageScheduledPlansFileByURL($body, $manage_scheduled_plans_id)
    {
        $this->addManageScheduledPlansFileByURLWithHttpInfo($body, $manage_scheduled_plans_id);
    }

    /**
     * Operation addManageScheduledPlansFileByURLWithHttpInfo
     *
     * Attach a file to a manageScheduledPlans by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addManageScheduledPlansFileByURLWithHttpInfo($body, $manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansFileByURLRequest($body, $manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addManageScheduledPlansFileByURLAsync
     *
     * Attach a file to a manageScheduledPlans by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansFileByURLAsync($body, $manage_scheduled_plans_id)
    {
        return $this->addManageScheduledPlansFileByURLAsyncWithHttpInfo($body, $manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addManageScheduledPlansFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a manageScheduledPlans by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansFileByURLAsyncWithHttpInfo($body, $manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansFileByURLRequest($body, $manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addManageScheduledPlansFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addManageScheduledPlansFileByURLRequest($body, $manage_scheduled_plans_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addManageScheduledPlansFileByURL'
            );
        }
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling addManageScheduledPlansFileByURL'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addManageScheduledPlansTag
     *
     * Add new tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a tag to (required)
     * @param  string $manage_scheduled_plans_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addManageScheduledPlansTag($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $this->addManageScheduledPlansTagWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag);
    }

    /**
     * Operation addManageScheduledPlansTagWithHttpInfo
     *
     * Add new tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a tag to (required)
     * @param  string $manage_scheduled_plans_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addManageScheduledPlansTagWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addManageScheduledPlansTagAsync
     *
     * Add new tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a tag to (required)
     * @param  string $manage_scheduled_plans_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansTagAsync($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        return $this->addManageScheduledPlansTagAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addManageScheduledPlansTagAsyncWithHttpInfo
     *
     * Add new tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a tag to (required)
     * @param  string $manage_scheduled_plans_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addManageScheduledPlansTagAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $returnType = '';
        $request = $this->addManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addManageScheduledPlansTag'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to add a tag to (required)
     * @param  string $manage_scheduled_plans_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling addManageScheduledPlansTag'
            );
        }
        // verify the required parameter 'manage_scheduled_plans_tag' is set
        if ($manage_scheduled_plans_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_tag when calling addManageScheduledPlansTag'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }
        // path params
        if ($manage_scheduled_plans_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansTag' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteManageScheduledPlans
     *
     * Delete a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteManageScheduledPlans($manage_scheduled_plans_id)
    {
        $this->deleteManageScheduledPlansWithHttpInfo($manage_scheduled_plans_id);
    }

    /**
     * Operation deleteManageScheduledPlansWithHttpInfo
     *
     * Delete a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteManageScheduledPlansWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansRequest($manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteManageScheduledPlansAsync
     *
     * Delete a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansAsync($manage_scheduled_plans_id)
    {
        return $this->deleteManageScheduledPlansAsyncWithHttpInfo($manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteManageScheduledPlansAsyncWithHttpInfo
     *
     * Delete a manageScheduledPlans
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansAsyncWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansRequest($manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteManageScheduledPlans'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteManageScheduledPlansRequest($manage_scheduled_plans_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling deleteManageScheduledPlans'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteManageScheduledPlansFile
     *
     * Delete a file for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteManageScheduledPlansFile($manage_scheduled_plans_id, $file_id)
    {
        $this->deleteManageScheduledPlansFileWithHttpInfo($manage_scheduled_plans_id, $file_id);
    }

    /**
     * Operation deleteManageScheduledPlansFileWithHttpInfo
     *
     * Delete a file for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteManageScheduledPlansFileWithHttpInfo($manage_scheduled_plans_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteManageScheduledPlansFileAsync
     *
     * Delete a file for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansFileAsync($manage_scheduled_plans_id, $file_id)
    {
        return $this->deleteManageScheduledPlansFileAsyncWithHttpInfo($manage_scheduled_plans_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteManageScheduledPlansFileAsyncWithHttpInfo
     *
     * Delete a file for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansFileAsyncWithHttpInfo($manage_scheduled_plans_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteManageScheduledPlansFile'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteManageScheduledPlansFileRequest($manage_scheduled_plans_id, $file_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling deleteManageScheduledPlansFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteManageScheduledPlansFile'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteManageScheduledPlansTag
     *
     * Delete a tag for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove tag from (required)
     * @param  string $manage_scheduled_plans_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteManageScheduledPlansTag($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $this->deleteManageScheduledPlansTagWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag);
    }

    /**
     * Operation deleteManageScheduledPlansTagWithHttpInfo
     *
     * Delete a tag for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove tag from (required)
     * @param  string $manage_scheduled_plans_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteManageScheduledPlansTagWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteManageScheduledPlansTagAsync
     *
     * Delete a tag for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove tag from (required)
     * @param  string $manage_scheduled_plans_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansTagAsync($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        return $this->deleteManageScheduledPlansTagAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteManageScheduledPlansTagAsyncWithHttpInfo
     *
     * Delete a tag for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove tag from (required)
     * @param  string $manage_scheduled_plans_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageScheduledPlansTagAsyncWithHttpInfo($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        $returnType = '';
        $request = $this->deleteManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteManageScheduledPlansTag'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to remove tag from (required)
     * @param  string $manage_scheduled_plans_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteManageScheduledPlansTagRequest($manage_scheduled_plans_id, $manage_scheduled_plans_tag)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling deleteManageScheduledPlansTag'
            );
        }
        // verify the required parameter 'manage_scheduled_plans_tag' is set
        if ($manage_scheduled_plans_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_tag when calling deleteManageScheduledPlansTag'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag/{manageScheduledPlansTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }
        // path params
        if ($manage_scheduled_plans_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansTag' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateManageScheduledPlansById
     *
     * Get a duplicated a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ManageScheduledPlans
     */
    public function getDuplicateManageScheduledPlansById($manage_scheduled_plans_id)
    {
        list($response) = $this->getDuplicateManageScheduledPlansByIdWithHttpInfo($manage_scheduled_plans_id);
        return $response;
    }

    /**
     * Operation getDuplicateManageScheduledPlansByIdWithHttpInfo
     *
     * Get a duplicated a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ManageScheduledPlans, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateManageScheduledPlansByIdWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->getDuplicateManageScheduledPlansByIdRequest($manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ManageScheduledPlans',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateManageScheduledPlansByIdAsync
     *
     * Get a duplicated a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateManageScheduledPlansByIdAsync($manage_scheduled_plans_id)
    {
        return $this->getDuplicateManageScheduledPlansByIdAsyncWithHttpInfo($manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateManageScheduledPlansByIdAsyncWithHttpInfo
     *
     * Get a duplicated a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateManageScheduledPlansByIdAsyncWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->getDuplicateManageScheduledPlansByIdRequest($manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateManageScheduledPlansById'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateManageScheduledPlansByIdRequest($manage_scheduled_plans_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling getDuplicateManageScheduledPlansById'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/duplicate/{manageScheduledPlansId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageScheduledPlansByFilter
     *
     * Search manageScheduledPlanses by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ManageScheduledPlans[]
     */
    public function getManageScheduledPlansByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getManageScheduledPlansByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getManageScheduledPlansByFilterWithHttpInfo
     *
     * Search manageScheduledPlanses by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ManageScheduledPlans[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageScheduledPlansByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans[]';
        $request = $this->getManageScheduledPlansByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ManageScheduledPlans[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManageScheduledPlansByFilterAsync
     *
     * Search manageScheduledPlanses by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getManageScheduledPlansByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManageScheduledPlansByFilterAsyncWithHttpInfo
     *
     * Search manageScheduledPlanses by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans[]';
        $request = $this->getManageScheduledPlansByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageScheduledPlansByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getManageScheduledPlansByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/manageScheduledPlans/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageScheduledPlansById
     *
     * Get a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ManageScheduledPlans
     */
    public function getManageScheduledPlansById($manage_scheduled_plans_id)
    {
        list($response) = $this->getManageScheduledPlansByIdWithHttpInfo($manage_scheduled_plans_id);
        return $response;
    }

    /**
     * Operation getManageScheduledPlansByIdWithHttpInfo
     *
     * Get a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ManageScheduledPlans, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageScheduledPlansByIdWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->getManageScheduledPlansByIdRequest($manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ManageScheduledPlans',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManageScheduledPlansByIdAsync
     *
     * Get a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansByIdAsync($manage_scheduled_plans_id)
    {
        return $this->getManageScheduledPlansByIdAsyncWithHttpInfo($manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManageScheduledPlansByIdAsyncWithHttpInfo
     *
     * Get a manageScheduledPlans by id
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansByIdAsyncWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ManageScheduledPlans';
        $request = $this->getManageScheduledPlansByIdRequest($manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageScheduledPlansById'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getManageScheduledPlansByIdRequest($manage_scheduled_plans_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling getManageScheduledPlansById'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageScheduledPlansFiles
     *
     * Get the files for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getManageScheduledPlansFiles($manage_scheduled_plans_id)
    {
        $this->getManageScheduledPlansFilesWithHttpInfo($manage_scheduled_plans_id);
    }

    /**
     * Operation getManageScheduledPlansFilesWithHttpInfo
     *
     * Get the files for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageScheduledPlansFilesWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->getManageScheduledPlansFilesRequest($manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getManageScheduledPlansFilesAsync
     *
     * Get the files for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansFilesAsync($manage_scheduled_plans_id)
    {
        return $this->getManageScheduledPlansFilesAsyncWithHttpInfo($manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManageScheduledPlansFilesAsyncWithHttpInfo
     *
     * Get the files for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansFilesAsyncWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->getManageScheduledPlansFilesRequest($manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageScheduledPlansFiles'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getManageScheduledPlansFilesRequest($manage_scheduled_plans_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling getManageScheduledPlansFiles'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageScheduledPlansTags
     *
     * Get the tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getManageScheduledPlansTags($manage_scheduled_plans_id)
    {
        $this->getManageScheduledPlansTagsWithHttpInfo($manage_scheduled_plans_id);
    }

    /**
     * Operation getManageScheduledPlansTagsWithHttpInfo
     *
     * Get the tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageScheduledPlansTagsWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->getManageScheduledPlansTagsRequest($manage_scheduled_plans_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getManageScheduledPlansTagsAsync
     *
     * Get the tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansTagsAsync($manage_scheduled_plans_id)
    {
        return $this->getManageScheduledPlansTagsAsyncWithHttpInfo($manage_scheduled_plans_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManageScheduledPlansTagsAsyncWithHttpInfo
     *
     * Get the tags for a manageScheduledPlans.
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageScheduledPlansTagsAsyncWithHttpInfo($manage_scheduled_plans_id)
    {
        $returnType = '';
        $request = $this->getManageScheduledPlansTagsRequest($manage_scheduled_plans_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageScheduledPlansTags'
     *
     * @param  int $manage_scheduled_plans_id Id of the manageScheduledPlans to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getManageScheduledPlansTagsRequest($manage_scheduled_plans_id)
    {
        // verify the required parameter 'manage_scheduled_plans_id' is set
        if ($manage_scheduled_plans_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manage_scheduled_plans_id when calling getManageScheduledPlansTags'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans/{manageScheduledPlansId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manage_scheduled_plans_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manageScheduledPlansId' . '}',
                ObjectSerializer::toPathValue($manage_scheduled_plans_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateManageScheduledPlans
     *
     * Update a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateManageScheduledPlans($body)
    {
        $this->updateManageScheduledPlansWithHttpInfo($body);
    }

    /**
     * Operation updateManageScheduledPlansWithHttpInfo
     *
     * Update a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateManageScheduledPlansWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateManageScheduledPlansRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateManageScheduledPlansAsync
     *
     * Update a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateManageScheduledPlansAsync($body)
    {
        return $this->updateManageScheduledPlansAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateManageScheduledPlansAsyncWithHttpInfo
     *
     * Update a manageScheduledPlans
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateManageScheduledPlansAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateManageScheduledPlansRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateManageScheduledPlans'
     *
     * @param  \Infoplus\Infoplus\Model\ManageScheduledPlans $body ManageScheduledPlans to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateManageScheduledPlansRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateManageScheduledPlans'
            );
        }

        $resourcePath = '/beta/manageScheduledPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
