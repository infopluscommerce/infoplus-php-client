<?php
/**
 * LegacyLowstockContactApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * LegacyLowstockContactApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyLowstockContactApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addLegacyLowstockContact
     *
     * Create a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LegacyLowstockContact
     */
    public function addLegacyLowstockContact($body)
    {
        list($response) = $this->addLegacyLowstockContactWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addLegacyLowstockContactWithHttpInfo
     *
     * Create a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LegacyLowstockContact, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLegacyLowstockContactWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->addLegacyLowstockContactRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LegacyLowstockContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLegacyLowstockContactAsync
     *
     * Create a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactAsync($body)
    {
        return $this->addLegacyLowstockContactAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLegacyLowstockContactAsyncWithHttpInfo
     *
     * Create a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->addLegacyLowstockContactRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLegacyLowstockContact'
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLegacyLowstockContactRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addLegacyLowstockContact'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLegacyLowstockContactAudit
     *
     * Add new audit for a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an audit to (required)
     * @param  string $legacy_lowstock_contact_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLegacyLowstockContactAudit($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
    {
        $this->addLegacyLowstockContactAuditWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit);
    }

    /**
     * Operation addLegacyLowstockContactAuditWithHttpInfo
     *
     * Add new audit for a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an audit to (required)
     * @param  string $legacy_lowstock_contact_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLegacyLowstockContactAuditWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactAuditRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLegacyLowstockContactAuditAsync
     *
     * Add new audit for a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an audit to (required)
     * @param  string $legacy_lowstock_contact_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactAuditAsync($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
    {
        return $this->addLegacyLowstockContactAuditAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLegacyLowstockContactAuditAsyncWithHttpInfo
     *
     * Add new audit for a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an audit to (required)
     * @param  string $legacy_lowstock_contact_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactAuditAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactAuditRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLegacyLowstockContactAudit'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an audit to (required)
     * @param  string $legacy_lowstock_contact_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLegacyLowstockContactAuditRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_audit)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling addLegacyLowstockContactAudit'
            );
        }
        // verify the required parameter 'legacy_lowstock_contact_audit' is set
        if ($legacy_lowstock_contact_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_audit when calling addLegacyLowstockContactAudit'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/audit/{legacyLowstockContactAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }
        // path params
        if ($legacy_lowstock_contact_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactAudit' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLegacyLowstockContactFile
     *
     * Attach a file to a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLegacyLowstockContactFile($legacy_lowstock_contact_id, $file_name)
    {
        $this->addLegacyLowstockContactFileWithHttpInfo($legacy_lowstock_contact_id, $file_name);
    }

    /**
     * Operation addLegacyLowstockContactFileWithHttpInfo
     *
     * Attach a file to a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLegacyLowstockContactFileWithHttpInfo($legacy_lowstock_contact_id, $file_name)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLegacyLowstockContactFileAsync
     *
     * Attach a file to a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactFileAsync($legacy_lowstock_contact_id, $file_name)
    {
        return $this->addLegacyLowstockContactFileAsyncWithHttpInfo($legacy_lowstock_contact_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLegacyLowstockContactFileAsyncWithHttpInfo
     *
     * Attach a file to a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactFileAsyncWithHttpInfo($legacy_lowstock_contact_id, $file_name)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLegacyLowstockContactFile'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_name)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling addLegacyLowstockContactFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addLegacyLowstockContactFile'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLegacyLowstockContactFileByURL
     *
     * Attach a file to a legacyLowstockContact by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLegacyLowstockContactFileByURL($body, $legacy_lowstock_contact_id)
    {
        $this->addLegacyLowstockContactFileByURLWithHttpInfo($body, $legacy_lowstock_contact_id);
    }

    /**
     * Operation addLegacyLowstockContactFileByURLWithHttpInfo
     *
     * Attach a file to a legacyLowstockContact by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLegacyLowstockContactFileByURLWithHttpInfo($body, $legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactFileByURLRequest($body, $legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLegacyLowstockContactFileByURLAsync
     *
     * Attach a file to a legacyLowstockContact by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactFileByURLAsync($body, $legacy_lowstock_contact_id)
    {
        return $this->addLegacyLowstockContactFileByURLAsyncWithHttpInfo($body, $legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLegacyLowstockContactFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a legacyLowstockContact by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactFileByURLAsyncWithHttpInfo($body, $legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactFileByURLRequest($body, $legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLegacyLowstockContactFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLegacyLowstockContactFileByURLRequest($body, $legacy_lowstock_contact_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addLegacyLowstockContactFileByURL'
            );
        }
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling addLegacyLowstockContactFileByURL'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLegacyLowstockContactTag
     *
     * Add new tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a tag to (required)
     * @param  string $legacy_lowstock_contact_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLegacyLowstockContactTag($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $this->addLegacyLowstockContactTagWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);
    }

    /**
     * Operation addLegacyLowstockContactTagWithHttpInfo
     *
     * Add new tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a tag to (required)
     * @param  string $legacy_lowstock_contact_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLegacyLowstockContactTagWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLegacyLowstockContactTagAsync
     *
     * Add new tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a tag to (required)
     * @param  string $legacy_lowstock_contact_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactTagAsync($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        return $this->addLegacyLowstockContactTagAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLegacyLowstockContactTagAsyncWithHttpInfo
     *
     * Add new tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a tag to (required)
     * @param  string $legacy_lowstock_contact_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLegacyLowstockContactTagAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $returnType = '';
        $request = $this->addLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLegacyLowstockContactTag'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to add a tag to (required)
     * @param  string $legacy_lowstock_contact_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling addLegacyLowstockContactTag'
            );
        }
        // verify the required parameter 'legacy_lowstock_contact_tag' is set
        if ($legacy_lowstock_contact_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_tag when calling addLegacyLowstockContactTag'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }
        // path params
        if ($legacy_lowstock_contact_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactTag' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLegacyLowstockContact
     *
     * Delete a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLegacyLowstockContact($legacy_lowstock_contact_id)
    {
        $this->deleteLegacyLowstockContactWithHttpInfo($legacy_lowstock_contact_id);
    }

    /**
     * Operation deleteLegacyLowstockContactWithHttpInfo
     *
     * Delete a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLegacyLowstockContactWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactRequest($legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLegacyLowstockContactAsync
     *
     * Delete a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactAsync($legacy_lowstock_contact_id)
    {
        return $this->deleteLegacyLowstockContactAsyncWithHttpInfo($legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLegacyLowstockContactAsyncWithHttpInfo
     *
     * Delete a legacyLowstockContact
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactAsyncWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactRequest($legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLegacyLowstockContact'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLegacyLowstockContactRequest($legacy_lowstock_contact_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling deleteLegacyLowstockContact'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLegacyLowstockContactFile
     *
     * Delete a file for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLegacyLowstockContactFile($legacy_lowstock_contact_id, $file_id)
    {
        $this->deleteLegacyLowstockContactFileWithHttpInfo($legacy_lowstock_contact_id, $file_id);
    }

    /**
     * Operation deleteLegacyLowstockContactFileWithHttpInfo
     *
     * Delete a file for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLegacyLowstockContactFileWithHttpInfo($legacy_lowstock_contact_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLegacyLowstockContactFileAsync
     *
     * Delete a file for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactFileAsync($legacy_lowstock_contact_id, $file_id)
    {
        return $this->deleteLegacyLowstockContactFileAsyncWithHttpInfo($legacy_lowstock_contact_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLegacyLowstockContactFileAsyncWithHttpInfo
     *
     * Delete a file for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactFileAsyncWithHttpInfo($legacy_lowstock_contact_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLegacyLowstockContactFile'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLegacyLowstockContactFileRequest($legacy_lowstock_contact_id, $file_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling deleteLegacyLowstockContactFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteLegacyLowstockContactFile'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLegacyLowstockContactTag
     *
     * Delete a tag for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove tag from (required)
     * @param  string $legacy_lowstock_contact_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLegacyLowstockContactTag($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $this->deleteLegacyLowstockContactTagWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);
    }

    /**
     * Operation deleteLegacyLowstockContactTagWithHttpInfo
     *
     * Delete a tag for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove tag from (required)
     * @param  string $legacy_lowstock_contact_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLegacyLowstockContactTagWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLegacyLowstockContactTagAsync
     *
     * Delete a tag for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove tag from (required)
     * @param  string $legacy_lowstock_contact_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactTagAsync($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        return $this->deleteLegacyLowstockContactTagAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLegacyLowstockContactTagAsyncWithHttpInfo
     *
     * Delete a tag for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove tag from (required)
     * @param  string $legacy_lowstock_contact_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLegacyLowstockContactTagAsyncWithHttpInfo($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        $returnType = '';
        $request = $this->deleteLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLegacyLowstockContactTag'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to remove tag from (required)
     * @param  string $legacy_lowstock_contact_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLegacyLowstockContactTagRequest($legacy_lowstock_contact_id, $legacy_lowstock_contact_tag)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling deleteLegacyLowstockContactTag'
            );
        }
        // verify the required parameter 'legacy_lowstock_contact_tag' is set
        if ($legacy_lowstock_contact_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_tag when calling deleteLegacyLowstockContactTag'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag/{legacyLowstockContactTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }
        // path params
        if ($legacy_lowstock_contact_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactTag' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateLegacyLowstockContactById
     *
     * Get a duplicated a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LegacyLowstockContact
     */
    public function getDuplicateLegacyLowstockContactById($legacy_lowstock_contact_id)
    {
        list($response) = $this->getDuplicateLegacyLowstockContactByIdWithHttpInfo($legacy_lowstock_contact_id);
        return $response;
    }

    /**
     * Operation getDuplicateLegacyLowstockContactByIdWithHttpInfo
     *
     * Get a duplicated a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LegacyLowstockContact, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateLegacyLowstockContactByIdWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->getDuplicateLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LegacyLowstockContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateLegacyLowstockContactByIdAsync
     *
     * Get a duplicated a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateLegacyLowstockContactByIdAsync($legacy_lowstock_contact_id)
    {
        return $this->getDuplicateLegacyLowstockContactByIdAsyncWithHttpInfo($legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateLegacyLowstockContactByIdAsyncWithHttpInfo
     *
     * Get a duplicated a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateLegacyLowstockContactByIdAsyncWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->getDuplicateLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateLegacyLowstockContactById'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling getDuplicateLegacyLowstockContactById'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/duplicate/{legacyLowstockContactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLegacyLowstockContactByFilter
     *
     * Search legacyLowstockContacts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LegacyLowstockContact[]
     */
    public function getLegacyLowstockContactByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getLegacyLowstockContactByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getLegacyLowstockContactByFilterWithHttpInfo
     *
     * Search legacyLowstockContacts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LegacyLowstockContact[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLegacyLowstockContactByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact[]';
        $request = $this->getLegacyLowstockContactByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LegacyLowstockContact[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLegacyLowstockContactByFilterAsync
     *
     * Search legacyLowstockContacts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getLegacyLowstockContactByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLegacyLowstockContactByFilterAsyncWithHttpInfo
     *
     * Search legacyLowstockContacts by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact[]';
        $request = $this->getLegacyLowstockContactByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLegacyLowstockContactByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLegacyLowstockContactByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/legacyLowstockContact/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLegacyLowstockContactById
     *
     * Get a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LegacyLowstockContact
     */
    public function getLegacyLowstockContactById($legacy_lowstock_contact_id)
    {
        list($response) = $this->getLegacyLowstockContactByIdWithHttpInfo($legacy_lowstock_contact_id);
        return $response;
    }

    /**
     * Operation getLegacyLowstockContactByIdWithHttpInfo
     *
     * Get a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LegacyLowstockContact, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLegacyLowstockContactByIdWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->getLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LegacyLowstockContact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLegacyLowstockContactByIdAsync
     *
     * Get a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactByIdAsync($legacy_lowstock_contact_id)
    {
        return $this->getLegacyLowstockContactByIdAsyncWithHttpInfo($legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLegacyLowstockContactByIdAsyncWithHttpInfo
     *
     * Get a legacyLowstockContact by id
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactByIdAsyncWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LegacyLowstockContact';
        $request = $this->getLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLegacyLowstockContactById'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLegacyLowstockContactByIdRequest($legacy_lowstock_contact_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling getLegacyLowstockContactById'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLegacyLowstockContactFiles
     *
     * Get the files for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLegacyLowstockContactFiles($legacy_lowstock_contact_id)
    {
        $this->getLegacyLowstockContactFilesWithHttpInfo($legacy_lowstock_contact_id);
    }

    /**
     * Operation getLegacyLowstockContactFilesWithHttpInfo
     *
     * Get the files for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLegacyLowstockContactFilesWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->getLegacyLowstockContactFilesRequest($legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLegacyLowstockContactFilesAsync
     *
     * Get the files for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactFilesAsync($legacy_lowstock_contact_id)
    {
        return $this->getLegacyLowstockContactFilesAsyncWithHttpInfo($legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLegacyLowstockContactFilesAsyncWithHttpInfo
     *
     * Get the files for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactFilesAsyncWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->getLegacyLowstockContactFilesRequest($legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLegacyLowstockContactFiles'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLegacyLowstockContactFilesRequest($legacy_lowstock_contact_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling getLegacyLowstockContactFiles'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLegacyLowstockContactTags
     *
     * Get the tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLegacyLowstockContactTags($legacy_lowstock_contact_id)
    {
        $this->getLegacyLowstockContactTagsWithHttpInfo($legacy_lowstock_contact_id);
    }

    /**
     * Operation getLegacyLowstockContactTagsWithHttpInfo
     *
     * Get the tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLegacyLowstockContactTagsWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->getLegacyLowstockContactTagsRequest($legacy_lowstock_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLegacyLowstockContactTagsAsync
     *
     * Get the tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactTagsAsync($legacy_lowstock_contact_id)
    {
        return $this->getLegacyLowstockContactTagsAsyncWithHttpInfo($legacy_lowstock_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLegacyLowstockContactTagsAsyncWithHttpInfo
     *
     * Get the tags for a legacyLowstockContact.
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLegacyLowstockContactTagsAsyncWithHttpInfo($legacy_lowstock_contact_id)
    {
        $returnType = '';
        $request = $this->getLegacyLowstockContactTagsRequest($legacy_lowstock_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLegacyLowstockContactTags'
     *
     * @param  int $legacy_lowstock_contact_id Id of the legacyLowstockContact to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLegacyLowstockContactTagsRequest($legacy_lowstock_contact_id)
    {
        // verify the required parameter 'legacy_lowstock_contact_id' is set
        if ($legacy_lowstock_contact_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $legacy_lowstock_contact_id when calling getLegacyLowstockContactTags'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact/{legacyLowstockContactId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($legacy_lowstock_contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'legacyLowstockContactId' . '}',
                ObjectSerializer::toPathValue($legacy_lowstock_contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLegacyLowstockContact
     *
     * Update a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateLegacyLowstockContact($body)
    {
        $this->updateLegacyLowstockContactWithHttpInfo($body);
    }

    /**
     * Operation updateLegacyLowstockContactWithHttpInfo
     *
     * Update a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLegacyLowstockContactWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLegacyLowstockContactRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateLegacyLowstockContactAsync
     *
     * Update a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLegacyLowstockContactAsync($body)
    {
        return $this->updateLegacyLowstockContactAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLegacyLowstockContactAsyncWithHttpInfo
     *
     * Update a legacyLowstockContact
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLegacyLowstockContactAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLegacyLowstockContactRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLegacyLowstockContact'
     *
     * @param  \Infoplus\Infoplus\Model\LegacyLowstockContact $body LegacyLowstockContact to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLegacyLowstockContactRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateLegacyLowstockContact'
            );
        }

        $resourcePath = '/beta/legacyLowstockContact';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
