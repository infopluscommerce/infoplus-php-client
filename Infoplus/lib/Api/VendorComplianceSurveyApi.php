<?php
/**
 * VendorComplianceSurveyApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * VendorComplianceSurveyApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VendorComplianceSurveyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addVendorComplianceSurvey
     *
     * Create a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\VendorComplianceSurvey
     */
    public function addVendorComplianceSurvey($body)
    {
        list($response) = $this->addVendorComplianceSurveyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addVendorComplianceSurveyWithHttpInfo
     *
     * Create a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\VendorComplianceSurvey, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVendorComplianceSurveyWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->addVendorComplianceSurveyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\VendorComplianceSurvey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addVendorComplianceSurveyAsync
     *
     * Create a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyAsync($body)
    {
        return $this->addVendorComplianceSurveyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVendorComplianceSurveyAsyncWithHttpInfo
     *
     * Create a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->addVendorComplianceSurveyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVendorComplianceSurvey'
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addVendorComplianceSurveyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addVendorComplianceSurvey'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addVendorComplianceSurveyAudit
     *
     * Add new audit for a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an audit to (required)
     * @param  string $vendor_compliance_survey_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addVendorComplianceSurveyAudit($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
    {
        $this->addVendorComplianceSurveyAuditWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_audit);
    }

    /**
     * Operation addVendorComplianceSurveyAuditWithHttpInfo
     *
     * Add new audit for a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an audit to (required)
     * @param  string $vendor_compliance_survey_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVendorComplianceSurveyAuditWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyAuditRequest($vendor_compliance_survey_id, $vendor_compliance_survey_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addVendorComplianceSurveyAuditAsync
     *
     * Add new audit for a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an audit to (required)
     * @param  string $vendor_compliance_survey_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyAuditAsync($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
    {
        return $this->addVendorComplianceSurveyAuditAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVendorComplianceSurveyAuditAsyncWithHttpInfo
     *
     * Add new audit for a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an audit to (required)
     * @param  string $vendor_compliance_survey_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyAuditAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyAuditRequest($vendor_compliance_survey_id, $vendor_compliance_survey_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVendorComplianceSurveyAudit'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an audit to (required)
     * @param  string $vendor_compliance_survey_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addVendorComplianceSurveyAuditRequest($vendor_compliance_survey_id, $vendor_compliance_survey_audit)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling addVendorComplianceSurveyAudit'
            );
        }
        // verify the required parameter 'vendor_compliance_survey_audit' is set
        if ($vendor_compliance_survey_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_audit when calling addVendorComplianceSurveyAudit'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/audit/{vendorComplianceSurveyAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_compliance_survey_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyAudit' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addVendorComplianceSurveyFile
     *
     * Attach a file to a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addVendorComplianceSurveyFile($vendor_compliance_survey_id, $file_name)
    {
        $this->addVendorComplianceSurveyFileWithHttpInfo($vendor_compliance_survey_id, $file_name);
    }

    /**
     * Operation addVendorComplianceSurveyFileWithHttpInfo
     *
     * Attach a file to a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVendorComplianceSurveyFileWithHttpInfo($vendor_compliance_survey_id, $file_name)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addVendorComplianceSurveyFileAsync
     *
     * Attach a file to a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyFileAsync($vendor_compliance_survey_id, $file_name)
    {
        return $this->addVendorComplianceSurveyFileAsyncWithHttpInfo($vendor_compliance_survey_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVendorComplianceSurveyFileAsyncWithHttpInfo
     *
     * Attach a file to a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyFileAsyncWithHttpInfo($vendor_compliance_survey_id, $file_name)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVendorComplianceSurveyFile'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_name)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling addVendorComplianceSurveyFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addVendorComplianceSurveyFile'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addVendorComplianceSurveyFileByURL
     *
     * Attach a file to a vendorComplianceSurvey by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addVendorComplianceSurveyFileByURL($body, $vendor_compliance_survey_id)
    {
        $this->addVendorComplianceSurveyFileByURLWithHttpInfo($body, $vendor_compliance_survey_id);
    }

    /**
     * Operation addVendorComplianceSurveyFileByURLWithHttpInfo
     *
     * Attach a file to a vendorComplianceSurvey by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVendorComplianceSurveyFileByURLWithHttpInfo($body, $vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyFileByURLRequest($body, $vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addVendorComplianceSurveyFileByURLAsync
     *
     * Attach a file to a vendorComplianceSurvey by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyFileByURLAsync($body, $vendor_compliance_survey_id)
    {
        return $this->addVendorComplianceSurveyFileByURLAsyncWithHttpInfo($body, $vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVendorComplianceSurveyFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a vendorComplianceSurvey by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyFileByURLAsyncWithHttpInfo($body, $vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyFileByURLRequest($body, $vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVendorComplianceSurveyFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addVendorComplianceSurveyFileByURLRequest($body, $vendor_compliance_survey_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addVendorComplianceSurveyFileByURL'
            );
        }
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling addVendorComplianceSurveyFileByURL'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addVendorComplianceSurveyTag
     *
     * Add new tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a tag to (required)
     * @param  string $vendor_compliance_survey_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addVendorComplianceSurveyTag($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $this->addVendorComplianceSurveyTagWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag);
    }

    /**
     * Operation addVendorComplianceSurveyTagWithHttpInfo
     *
     * Add new tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a tag to (required)
     * @param  string $vendor_compliance_survey_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVendorComplianceSurveyTagWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addVendorComplianceSurveyTagAsync
     *
     * Add new tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a tag to (required)
     * @param  string $vendor_compliance_survey_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyTagAsync($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        return $this->addVendorComplianceSurveyTagAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVendorComplianceSurveyTagAsyncWithHttpInfo
     *
     * Add new tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a tag to (required)
     * @param  string $vendor_compliance_survey_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVendorComplianceSurveyTagAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $returnType = '';
        $request = $this->addVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addVendorComplianceSurveyTag'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to add a tag to (required)
     * @param  string $vendor_compliance_survey_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling addVendorComplianceSurveyTag'
            );
        }
        // verify the required parameter 'vendor_compliance_survey_tag' is set
        if ($vendor_compliance_survey_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_tag when calling addVendorComplianceSurveyTag'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag/{vendorComplianceSurveyTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_compliance_survey_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyTag' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVendorComplianceSurvey
     *
     * Delete a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVendorComplianceSurvey($vendor_compliance_survey_id)
    {
        $this->deleteVendorComplianceSurveyWithHttpInfo($vendor_compliance_survey_id);
    }

    /**
     * Operation deleteVendorComplianceSurveyWithHttpInfo
     *
     * Delete a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVendorComplianceSurveyWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyRequest($vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVendorComplianceSurveyAsync
     *
     * Delete a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyAsync($vendor_compliance_survey_id)
    {
        return $this->deleteVendorComplianceSurveyAsyncWithHttpInfo($vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVendorComplianceSurveyAsyncWithHttpInfo
     *
     * Delete a vendorComplianceSurvey
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyAsyncWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyRequest($vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVendorComplianceSurvey'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVendorComplianceSurveyRequest($vendor_compliance_survey_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling deleteVendorComplianceSurvey'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVendorComplianceSurveyFile
     *
     * Delete a file for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVendorComplianceSurveyFile($vendor_compliance_survey_id, $file_id)
    {
        $this->deleteVendorComplianceSurveyFileWithHttpInfo($vendor_compliance_survey_id, $file_id);
    }

    /**
     * Operation deleteVendorComplianceSurveyFileWithHttpInfo
     *
     * Delete a file for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVendorComplianceSurveyFileWithHttpInfo($vendor_compliance_survey_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVendorComplianceSurveyFileAsync
     *
     * Delete a file for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyFileAsync($vendor_compliance_survey_id, $file_id)
    {
        return $this->deleteVendorComplianceSurveyFileAsyncWithHttpInfo($vendor_compliance_survey_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVendorComplianceSurveyFileAsyncWithHttpInfo
     *
     * Delete a file for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyFileAsyncWithHttpInfo($vendor_compliance_survey_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVendorComplianceSurveyFile'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVendorComplianceSurveyFileRequest($vendor_compliance_survey_id, $file_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling deleteVendorComplianceSurveyFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteVendorComplianceSurveyFile'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVendorComplianceSurveyTag
     *
     * Delete a tag for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove tag from (required)
     * @param  string $vendor_compliance_survey_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVendorComplianceSurveyTag($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $this->deleteVendorComplianceSurveyTagWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag);
    }

    /**
     * Operation deleteVendorComplianceSurveyTagWithHttpInfo
     *
     * Delete a tag for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove tag from (required)
     * @param  string $vendor_compliance_survey_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVendorComplianceSurveyTagWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVendorComplianceSurveyTagAsync
     *
     * Delete a tag for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove tag from (required)
     * @param  string $vendor_compliance_survey_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyTagAsync($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        return $this->deleteVendorComplianceSurveyTagAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVendorComplianceSurveyTagAsyncWithHttpInfo
     *
     * Delete a tag for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove tag from (required)
     * @param  string $vendor_compliance_survey_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVendorComplianceSurveyTagAsyncWithHttpInfo($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        $returnType = '';
        $request = $this->deleteVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVendorComplianceSurveyTag'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to remove tag from (required)
     * @param  string $vendor_compliance_survey_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVendorComplianceSurveyTagRequest($vendor_compliance_survey_id, $vendor_compliance_survey_tag)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling deleteVendorComplianceSurveyTag'
            );
        }
        // verify the required parameter 'vendor_compliance_survey_tag' is set
        if ($vendor_compliance_survey_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_tag when calling deleteVendorComplianceSurveyTag'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag/{vendorComplianceSurveyTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }
        // path params
        if ($vendor_compliance_survey_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyTag' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateVendorComplianceSurveyById
     *
     * Get a duplicated a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\VendorComplianceSurvey
     */
    public function getDuplicateVendorComplianceSurveyById($vendor_compliance_survey_id)
    {
        list($response) = $this->getDuplicateVendorComplianceSurveyByIdWithHttpInfo($vendor_compliance_survey_id);
        return $response;
    }

    /**
     * Operation getDuplicateVendorComplianceSurveyByIdWithHttpInfo
     *
     * Get a duplicated a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\VendorComplianceSurvey, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateVendorComplianceSurveyByIdWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->getDuplicateVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\VendorComplianceSurvey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateVendorComplianceSurveyByIdAsync
     *
     * Get a duplicated a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateVendorComplianceSurveyByIdAsync($vendor_compliance_survey_id)
    {
        return $this->getDuplicateVendorComplianceSurveyByIdAsyncWithHttpInfo($vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateVendorComplianceSurveyByIdAsyncWithHttpInfo
     *
     * Get a duplicated a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateVendorComplianceSurveyByIdAsyncWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->getDuplicateVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateVendorComplianceSurveyById'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling getDuplicateVendorComplianceSurveyById'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/duplicate/{vendorComplianceSurveyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVendorComplianceSurveyByFilter
     *
     * Search vendorComplianceSurveys by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\VendorComplianceSurvey[]
     */
    public function getVendorComplianceSurveyByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getVendorComplianceSurveyByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getVendorComplianceSurveyByFilterWithHttpInfo
     *
     * Search vendorComplianceSurveys by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\VendorComplianceSurvey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVendorComplianceSurveyByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey[]';
        $request = $this->getVendorComplianceSurveyByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\VendorComplianceSurvey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVendorComplianceSurveyByFilterAsync
     *
     * Search vendorComplianceSurveys by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getVendorComplianceSurveyByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVendorComplianceSurveyByFilterAsyncWithHttpInfo
     *
     * Search vendorComplianceSurveys by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey[]';
        $request = $this->getVendorComplianceSurveyByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVendorComplianceSurveyByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVendorComplianceSurveyByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/vendorComplianceSurvey/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVendorComplianceSurveyById
     *
     * Get a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\VendorComplianceSurvey
     */
    public function getVendorComplianceSurveyById($vendor_compliance_survey_id)
    {
        list($response) = $this->getVendorComplianceSurveyByIdWithHttpInfo($vendor_compliance_survey_id);
        return $response;
    }

    /**
     * Operation getVendorComplianceSurveyByIdWithHttpInfo
     *
     * Get a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\VendorComplianceSurvey, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVendorComplianceSurveyByIdWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->getVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\VendorComplianceSurvey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVendorComplianceSurveyByIdAsync
     *
     * Get a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyByIdAsync($vendor_compliance_survey_id)
    {
        return $this->getVendorComplianceSurveyByIdAsyncWithHttpInfo($vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVendorComplianceSurveyByIdAsyncWithHttpInfo
     *
     * Get a vendorComplianceSurvey by id
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyByIdAsyncWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\VendorComplianceSurvey';
        $request = $this->getVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVendorComplianceSurveyById'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVendorComplianceSurveyByIdRequest($vendor_compliance_survey_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling getVendorComplianceSurveyById'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVendorComplianceSurveyFiles
     *
     * Get the files for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getVendorComplianceSurveyFiles($vendor_compliance_survey_id)
    {
        $this->getVendorComplianceSurveyFilesWithHttpInfo($vendor_compliance_survey_id);
    }

    /**
     * Operation getVendorComplianceSurveyFilesWithHttpInfo
     *
     * Get the files for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVendorComplianceSurveyFilesWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->getVendorComplianceSurveyFilesRequest($vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getVendorComplianceSurveyFilesAsync
     *
     * Get the files for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyFilesAsync($vendor_compliance_survey_id)
    {
        return $this->getVendorComplianceSurveyFilesAsyncWithHttpInfo($vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVendorComplianceSurveyFilesAsyncWithHttpInfo
     *
     * Get the files for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyFilesAsyncWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->getVendorComplianceSurveyFilesRequest($vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVendorComplianceSurveyFiles'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVendorComplianceSurveyFilesRequest($vendor_compliance_survey_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling getVendorComplianceSurveyFiles'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVendorComplianceSurveyTags
     *
     * Get the tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getVendorComplianceSurveyTags($vendor_compliance_survey_id)
    {
        $this->getVendorComplianceSurveyTagsWithHttpInfo($vendor_compliance_survey_id);
    }

    /**
     * Operation getVendorComplianceSurveyTagsWithHttpInfo
     *
     * Get the tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVendorComplianceSurveyTagsWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->getVendorComplianceSurveyTagsRequest($vendor_compliance_survey_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getVendorComplianceSurveyTagsAsync
     *
     * Get the tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyTagsAsync($vendor_compliance_survey_id)
    {
        return $this->getVendorComplianceSurveyTagsAsyncWithHttpInfo($vendor_compliance_survey_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVendorComplianceSurveyTagsAsyncWithHttpInfo
     *
     * Get the tags for a vendorComplianceSurvey.
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVendorComplianceSurveyTagsAsyncWithHttpInfo($vendor_compliance_survey_id)
    {
        $returnType = '';
        $request = $this->getVendorComplianceSurveyTagsRequest($vendor_compliance_survey_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVendorComplianceSurveyTags'
     *
     * @param  int $vendor_compliance_survey_id Id of the vendorComplianceSurvey to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVendorComplianceSurveyTagsRequest($vendor_compliance_survey_id)
    {
        // verify the required parameter 'vendor_compliance_survey_id' is set
        if ($vendor_compliance_survey_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor_compliance_survey_id when calling getVendorComplianceSurveyTags'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/{vendorComplianceSurveyId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vendor_compliance_survey_id !== null) {
            $resourcePath = str_replace(
                '{' . 'vendorComplianceSurveyId' . '}',
                ObjectSerializer::toPathValue($vendor_compliance_survey_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVendorComplianceSurvey
     *
     * Update a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateVendorComplianceSurvey($body)
    {
        $this->updateVendorComplianceSurveyWithHttpInfo($body);
    }

    /**
     * Operation updateVendorComplianceSurveyWithHttpInfo
     *
     * Update a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVendorComplianceSurveyWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateVendorComplianceSurveyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateVendorComplianceSurveyAsync
     *
     * Update a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVendorComplianceSurveyAsync($body)
    {
        return $this->updateVendorComplianceSurveyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVendorComplianceSurveyAsyncWithHttpInfo
     *
     * Update a vendorComplianceSurvey
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVendorComplianceSurveyAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateVendorComplianceSurveyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVendorComplianceSurvey'
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateVendorComplianceSurveyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateVendorComplianceSurvey'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVendorComplianceSurveyCustomFields
     *
     * Update a vendorComplianceSurvey custom fields
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateVendorComplianceSurveyCustomFields($body)
    {
        $this->updateVendorComplianceSurveyCustomFieldsWithHttpInfo($body);
    }

    /**
     * Operation updateVendorComplianceSurveyCustomFieldsWithHttpInfo
     *
     * Update a vendorComplianceSurvey custom fields
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVendorComplianceSurveyCustomFieldsWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateVendorComplianceSurveyCustomFieldsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateVendorComplianceSurveyCustomFieldsAsync
     *
     * Update a vendorComplianceSurvey custom fields
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVendorComplianceSurveyCustomFieldsAsync($body)
    {
        return $this->updateVendorComplianceSurveyCustomFieldsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVendorComplianceSurveyCustomFieldsAsyncWithHttpInfo
     *
     * Update a vendorComplianceSurvey custom fields
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVendorComplianceSurveyCustomFieldsAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateVendorComplianceSurveyCustomFieldsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVendorComplianceSurveyCustomFields'
     *
     * @param  \Infoplus\Infoplus\Model\VendorComplianceSurvey $body VendorComplianceSurvey to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateVendorComplianceSurveyCustomFieldsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateVendorComplianceSurveyCustomFields'
            );
        }

        $resourcePath = '/beta/vendorComplianceSurvey/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
