<?php
/**
 * LocationAddressSchemeApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * LocationAddressSchemeApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationAddressSchemeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addLocationAddressScheme
     *
     * Create a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LocationAddressScheme
     */
    public function addLocationAddressScheme($body)
    {
        list($response) = $this->addLocationAddressSchemeWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addLocationAddressSchemeWithHttpInfo
     *
     * Create a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LocationAddressScheme, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLocationAddressSchemeWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->addLocationAddressSchemeRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LocationAddressScheme',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLocationAddressSchemeAsync
     *
     * Create a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeAsync($body)
    {
        return $this->addLocationAddressSchemeAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLocationAddressSchemeAsyncWithHttpInfo
     *
     * Create a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->addLocationAddressSchemeRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLocationAddressScheme'
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLocationAddressSchemeRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addLocationAddressScheme'
            );
        }

        $resourcePath = '/beta/locationAddressScheme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLocationAddressSchemeAudit
     *
     * Add new audit for a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an audit to (required)
     * @param  string $location_address_scheme_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLocationAddressSchemeAudit($location_address_scheme_id, $location_address_scheme_audit)
    {
        $this->addLocationAddressSchemeAuditWithHttpInfo($location_address_scheme_id, $location_address_scheme_audit);
    }

    /**
     * Operation addLocationAddressSchemeAuditWithHttpInfo
     *
     * Add new audit for a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an audit to (required)
     * @param  string $location_address_scheme_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLocationAddressSchemeAuditWithHttpInfo($location_address_scheme_id, $location_address_scheme_audit)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeAuditRequest($location_address_scheme_id, $location_address_scheme_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLocationAddressSchemeAuditAsync
     *
     * Add new audit for a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an audit to (required)
     * @param  string $location_address_scheme_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeAuditAsync($location_address_scheme_id, $location_address_scheme_audit)
    {
        return $this->addLocationAddressSchemeAuditAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLocationAddressSchemeAuditAsyncWithHttpInfo
     *
     * Add new audit for a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an audit to (required)
     * @param  string $location_address_scheme_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeAuditAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_audit)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeAuditRequest($location_address_scheme_id, $location_address_scheme_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLocationAddressSchemeAudit'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an audit to (required)
     * @param  string $location_address_scheme_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLocationAddressSchemeAuditRequest($location_address_scheme_id, $location_address_scheme_audit)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling addLocationAddressSchemeAudit'
            );
        }
        // verify the required parameter 'location_address_scheme_audit' is set
        if ($location_address_scheme_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_audit when calling addLocationAddressSchemeAudit'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/audit/{locationAddressSchemeAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }
        // path params
        if ($location_address_scheme_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeAudit' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLocationAddressSchemeFile
     *
     * Attach a file to a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLocationAddressSchemeFile($location_address_scheme_id, $file_name)
    {
        $this->addLocationAddressSchemeFileWithHttpInfo($location_address_scheme_id, $file_name);
    }

    /**
     * Operation addLocationAddressSchemeFileWithHttpInfo
     *
     * Attach a file to a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLocationAddressSchemeFileWithHttpInfo($location_address_scheme_id, $file_name)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeFileRequest($location_address_scheme_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLocationAddressSchemeFileAsync
     *
     * Attach a file to a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeFileAsync($location_address_scheme_id, $file_name)
    {
        return $this->addLocationAddressSchemeFileAsyncWithHttpInfo($location_address_scheme_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLocationAddressSchemeFileAsyncWithHttpInfo
     *
     * Attach a file to a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeFileAsyncWithHttpInfo($location_address_scheme_id, $file_name)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeFileRequest($location_address_scheme_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLocationAddressSchemeFile'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLocationAddressSchemeFileRequest($location_address_scheme_id, $file_name)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling addLocationAddressSchemeFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addLocationAddressSchemeFile'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLocationAddressSchemeFileByURL
     *
     * Attach a file to a locationAddressScheme by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLocationAddressSchemeFileByURL($body, $location_address_scheme_id)
    {
        $this->addLocationAddressSchemeFileByURLWithHttpInfo($body, $location_address_scheme_id);
    }

    /**
     * Operation addLocationAddressSchemeFileByURLWithHttpInfo
     *
     * Attach a file to a locationAddressScheme by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLocationAddressSchemeFileByURLWithHttpInfo($body, $location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeFileByURLRequest($body, $location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLocationAddressSchemeFileByURLAsync
     *
     * Attach a file to a locationAddressScheme by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeFileByURLAsync($body, $location_address_scheme_id)
    {
        return $this->addLocationAddressSchemeFileByURLAsyncWithHttpInfo($body, $location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLocationAddressSchemeFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a locationAddressScheme by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeFileByURLAsyncWithHttpInfo($body, $location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeFileByURLRequest($body, $location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLocationAddressSchemeFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLocationAddressSchemeFileByURLRequest($body, $location_address_scheme_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addLocationAddressSchemeFileByURL'
            );
        }
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling addLocationAddressSchemeFileByURL'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addLocationAddressSchemeTag
     *
     * Add new tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a tag to (required)
     * @param  string $location_address_scheme_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addLocationAddressSchemeTag($location_address_scheme_id, $location_address_scheme_tag)
    {
        $this->addLocationAddressSchemeTagWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag);
    }

    /**
     * Operation addLocationAddressSchemeTagWithHttpInfo
     *
     * Add new tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a tag to (required)
     * @param  string $location_address_scheme_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLocationAddressSchemeTagWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addLocationAddressSchemeTagAsync
     *
     * Add new tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a tag to (required)
     * @param  string $location_address_scheme_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeTagAsync($location_address_scheme_id, $location_address_scheme_tag)
    {
        return $this->addLocationAddressSchemeTagAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLocationAddressSchemeTagAsyncWithHttpInfo
     *
     * Add new tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a tag to (required)
     * @param  string $location_address_scheme_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLocationAddressSchemeTagAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
    {
        $returnType = '';
        $request = $this->addLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLocationAddressSchemeTag'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to add a tag to (required)
     * @param  string $location_address_scheme_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling addLocationAddressSchemeTag'
            );
        }
        // verify the required parameter 'location_address_scheme_tag' is set
        if ($location_address_scheme_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_tag when calling addLocationAddressSchemeTag'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/tag/{locationAddressSchemeTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }
        // path params
        if ($location_address_scheme_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeTag' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocationAddressScheme
     *
     * Delete a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocationAddressScheme($location_address_scheme_id)
    {
        $this->deleteLocationAddressSchemeWithHttpInfo($location_address_scheme_id);
    }

    /**
     * Operation deleteLocationAddressSchemeWithHttpInfo
     *
     * Delete a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocationAddressSchemeWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeRequest($location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocationAddressSchemeAsync
     *
     * Delete a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeAsync($location_address_scheme_id)
    {
        return $this->deleteLocationAddressSchemeAsyncWithHttpInfo($location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocationAddressSchemeAsyncWithHttpInfo
     *
     * Delete a locationAddressScheme
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeAsyncWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeRequest($location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocationAddressScheme'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocationAddressSchemeRequest($location_address_scheme_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling deleteLocationAddressScheme'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocationAddressSchemeFile
     *
     * Delete a file for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocationAddressSchemeFile($location_address_scheme_id, $file_id)
    {
        $this->deleteLocationAddressSchemeFileWithHttpInfo($location_address_scheme_id, $file_id);
    }

    /**
     * Operation deleteLocationAddressSchemeFileWithHttpInfo
     *
     * Delete a file for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocationAddressSchemeFileWithHttpInfo($location_address_scheme_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeFileRequest($location_address_scheme_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocationAddressSchemeFileAsync
     *
     * Delete a file for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeFileAsync($location_address_scheme_id, $file_id)
    {
        return $this->deleteLocationAddressSchemeFileAsyncWithHttpInfo($location_address_scheme_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocationAddressSchemeFileAsyncWithHttpInfo
     *
     * Delete a file for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeFileAsyncWithHttpInfo($location_address_scheme_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeFileRequest($location_address_scheme_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocationAddressSchemeFile'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocationAddressSchemeFileRequest($location_address_scheme_id, $file_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling deleteLocationAddressSchemeFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteLocationAddressSchemeFile'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocationAddressSchemeTag
     *
     * Delete a tag for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove tag from (required)
     * @param  string $location_address_scheme_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocationAddressSchemeTag($location_address_scheme_id, $location_address_scheme_tag)
    {
        $this->deleteLocationAddressSchemeTagWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag);
    }

    /**
     * Operation deleteLocationAddressSchemeTagWithHttpInfo
     *
     * Delete a tag for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove tag from (required)
     * @param  string $location_address_scheme_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocationAddressSchemeTagWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocationAddressSchemeTagAsync
     *
     * Delete a tag for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove tag from (required)
     * @param  string $location_address_scheme_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeTagAsync($location_address_scheme_id, $location_address_scheme_tag)
    {
        return $this->deleteLocationAddressSchemeTagAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocationAddressSchemeTagAsyncWithHttpInfo
     *
     * Delete a tag for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove tag from (required)
     * @param  string $location_address_scheme_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocationAddressSchemeTagAsyncWithHttpInfo($location_address_scheme_id, $location_address_scheme_tag)
    {
        $returnType = '';
        $request = $this->deleteLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocationAddressSchemeTag'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to remove tag from (required)
     * @param  string $location_address_scheme_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocationAddressSchemeTagRequest($location_address_scheme_id, $location_address_scheme_tag)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling deleteLocationAddressSchemeTag'
            );
        }
        // verify the required parameter 'location_address_scheme_tag' is set
        if ($location_address_scheme_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_tag when calling deleteLocationAddressSchemeTag'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/tag/{locationAddressSchemeTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }
        // path params
        if ($location_address_scheme_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeTag' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateLocationAddressSchemeById
     *
     * Get a duplicated a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LocationAddressScheme
     */
    public function getDuplicateLocationAddressSchemeById($location_address_scheme_id)
    {
        list($response) = $this->getDuplicateLocationAddressSchemeByIdWithHttpInfo($location_address_scheme_id);
        return $response;
    }

    /**
     * Operation getDuplicateLocationAddressSchemeByIdWithHttpInfo
     *
     * Get a duplicated a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LocationAddressScheme, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateLocationAddressSchemeByIdWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->getDuplicateLocationAddressSchemeByIdRequest($location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LocationAddressScheme',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateLocationAddressSchemeByIdAsync
     *
     * Get a duplicated a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateLocationAddressSchemeByIdAsync($location_address_scheme_id)
    {
        return $this->getDuplicateLocationAddressSchemeByIdAsyncWithHttpInfo($location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateLocationAddressSchemeByIdAsyncWithHttpInfo
     *
     * Get a duplicated a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateLocationAddressSchemeByIdAsyncWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->getDuplicateLocationAddressSchemeByIdRequest($location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateLocationAddressSchemeById'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateLocationAddressSchemeByIdRequest($location_address_scheme_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling getDuplicateLocationAddressSchemeById'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/duplicate/{locationAddressSchemeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationAddressSchemeByFilter
     *
     * Search locationAddressSchemes by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LocationAddressScheme[]
     */
    public function getLocationAddressSchemeByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getLocationAddressSchemeByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getLocationAddressSchemeByFilterWithHttpInfo
     *
     * Search locationAddressSchemes by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LocationAddressScheme[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationAddressSchemeByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme[]';
        $request = $this->getLocationAddressSchemeByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LocationAddressScheme[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationAddressSchemeByFilterAsync
     *
     * Search locationAddressSchemes by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getLocationAddressSchemeByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationAddressSchemeByFilterAsyncWithHttpInfo
     *
     * Search locationAddressSchemes by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme[]';
        $request = $this->getLocationAddressSchemeByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationAddressSchemeByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationAddressSchemeByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/locationAddressScheme/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationAddressSchemeById
     *
     * Get a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\LocationAddressScheme
     */
    public function getLocationAddressSchemeById($location_address_scheme_id)
    {
        list($response) = $this->getLocationAddressSchemeByIdWithHttpInfo($location_address_scheme_id);
        return $response;
    }

    /**
     * Operation getLocationAddressSchemeByIdWithHttpInfo
     *
     * Get a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\LocationAddressScheme, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationAddressSchemeByIdWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->getLocationAddressSchemeByIdRequest($location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\LocationAddressScheme',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationAddressSchemeByIdAsync
     *
     * Get a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeByIdAsync($location_address_scheme_id)
    {
        return $this->getLocationAddressSchemeByIdAsyncWithHttpInfo($location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationAddressSchemeByIdAsyncWithHttpInfo
     *
     * Get a locationAddressScheme by id
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeByIdAsyncWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\LocationAddressScheme';
        $request = $this->getLocationAddressSchemeByIdRequest($location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationAddressSchemeById'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationAddressSchemeByIdRequest($location_address_scheme_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling getLocationAddressSchemeById'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationAddressSchemeFiles
     *
     * Get the files for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLocationAddressSchemeFiles($location_address_scheme_id)
    {
        $this->getLocationAddressSchemeFilesWithHttpInfo($location_address_scheme_id);
    }

    /**
     * Operation getLocationAddressSchemeFilesWithHttpInfo
     *
     * Get the files for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationAddressSchemeFilesWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->getLocationAddressSchemeFilesRequest($location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationAddressSchemeFilesAsync
     *
     * Get the files for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeFilesAsync($location_address_scheme_id)
    {
        return $this->getLocationAddressSchemeFilesAsyncWithHttpInfo($location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationAddressSchemeFilesAsyncWithHttpInfo
     *
     * Get the files for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeFilesAsyncWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->getLocationAddressSchemeFilesRequest($location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationAddressSchemeFiles'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationAddressSchemeFilesRequest($location_address_scheme_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling getLocationAddressSchemeFiles'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLocationAddressSchemeTags
     *
     * Get the tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getLocationAddressSchemeTags($location_address_scheme_id)
    {
        $this->getLocationAddressSchemeTagsWithHttpInfo($location_address_scheme_id);
    }

    /**
     * Operation getLocationAddressSchemeTagsWithHttpInfo
     *
     * Get the tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLocationAddressSchemeTagsWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->getLocationAddressSchemeTagsRequest($location_address_scheme_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getLocationAddressSchemeTagsAsync
     *
     * Get the tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeTagsAsync($location_address_scheme_id)
    {
        return $this->getLocationAddressSchemeTagsAsyncWithHttpInfo($location_address_scheme_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLocationAddressSchemeTagsAsyncWithHttpInfo
     *
     * Get the tags for a locationAddressScheme.
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLocationAddressSchemeTagsAsyncWithHttpInfo($location_address_scheme_id)
    {
        $returnType = '';
        $request = $this->getLocationAddressSchemeTagsRequest($location_address_scheme_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLocationAddressSchemeTags'
     *
     * @param  int $location_address_scheme_id Id of the locationAddressScheme to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLocationAddressSchemeTagsRequest($location_address_scheme_id)
    {
        // verify the required parameter 'location_address_scheme_id' is set
        if ($location_address_scheme_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location_address_scheme_id when calling getLocationAddressSchemeTags'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/{locationAddressSchemeId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($location_address_scheme_id !== null) {
            $resourcePath = str_replace(
                '{' . 'locationAddressSchemeId' . '}',
                ObjectSerializer::toPathValue($location_address_scheme_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLocationAddressScheme
     *
     * Update a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateLocationAddressScheme($body)
    {
        $this->updateLocationAddressSchemeWithHttpInfo($body);
    }

    /**
     * Operation updateLocationAddressSchemeWithHttpInfo
     *
     * Update a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLocationAddressSchemeWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLocationAddressSchemeRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateLocationAddressSchemeAsync
     *
     * Update a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLocationAddressSchemeAsync($body)
    {
        return $this->updateLocationAddressSchemeAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLocationAddressSchemeAsyncWithHttpInfo
     *
     * Update a locationAddressScheme
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLocationAddressSchemeAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLocationAddressSchemeRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLocationAddressScheme'
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLocationAddressSchemeRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateLocationAddressScheme'
            );
        }

        $resourcePath = '/beta/locationAddressScheme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLocationAddressSchemeCustomFields
     *
     * Update a locationAddressScheme custom fields
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateLocationAddressSchemeCustomFields($body)
    {
        $this->updateLocationAddressSchemeCustomFieldsWithHttpInfo($body);
    }

    /**
     * Operation updateLocationAddressSchemeCustomFieldsWithHttpInfo
     *
     * Update a locationAddressScheme custom fields
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLocationAddressSchemeCustomFieldsWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLocationAddressSchemeCustomFieldsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateLocationAddressSchemeCustomFieldsAsync
     *
     * Update a locationAddressScheme custom fields
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLocationAddressSchemeCustomFieldsAsync($body)
    {
        return $this->updateLocationAddressSchemeCustomFieldsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLocationAddressSchemeCustomFieldsAsyncWithHttpInfo
     *
     * Update a locationAddressScheme custom fields
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLocationAddressSchemeCustomFieldsAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateLocationAddressSchemeCustomFieldsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLocationAddressSchemeCustomFields'
     *
     * @param  \Infoplus\Infoplus\Model\LocationAddressScheme $body LocationAddressScheme to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLocationAddressSchemeCustomFieldsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateLocationAddressSchemeCustomFields'
            );
        }

        $resourcePath = '/beta/locationAddressScheme/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
