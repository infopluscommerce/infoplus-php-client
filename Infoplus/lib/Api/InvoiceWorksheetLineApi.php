<?php
/**
 * InvoiceWorksheetLineApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Infoplus\Api;

use \Infoplus\Configuration;
use \Infoplus\ApiClient;
use \Infoplus\ApiException;
use \Infoplus\ObjectSerializer;

/**
 * InvoiceWorksheetLineApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceWorksheetLineApi
{

    /**
     * API Client
     * @var \Infoplus\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Infoplus\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://kingsrook.localhost-testsubdomain1.infopluswms.com:8443/infoplus-wms/api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Infoplus\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Infoplus\ApiClient $apiClient set the API client
     * @return InvoiceWorksheetLineApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addInvoiceWorksheetLine
     *
     * Create an invoiceWorksheetLine
     *
     * @param \Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     * @return \Infoplus\Model\InvoiceWorksheetLine
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLine($body)
    {
        list($response, $statusCode, $httpHeader) = $this->addInvoiceWorksheetLineWithHttpInfo ($body);
        return $response; 
    }


    /**
     * addInvoiceWorksheetLineWithHttpInfo
     *
     * Create an invoiceWorksheetLine
     *
     * @param \Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     * @return Array of \Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLineWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addInvoiceWorksheetLine');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\InvoiceWorksheetLine'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\InvoiceWorksheetLine', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\InvoiceWorksheetLine', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 405:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\ApiResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addInvoiceWorksheetLineAudit
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param string $invoice_worksheet_line_audit The audit to add (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLineAudit($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        list($response, $statusCode, $httpHeader) = $this->addInvoiceWorksheetLineAuditWithHttpInfo ($invoice_worksheet_line_id, $invoice_worksheet_line_audit);
        return $response; 
    }


    /**
     * addInvoiceWorksheetLineAuditWithHttpInfo
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param string $invoice_worksheet_line_audit The audit to add (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLineAuditWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineAudit');
        }
        // verify the required parameter 'invoice_worksheet_line_audit' is set
        if ($invoice_worksheet_line_audit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_audit when calling addInvoiceWorksheetLineAudit');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/audit/{invoiceWorksheetLineAudit}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }// path params
        
        if ($invoice_worksheet_line_audit !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineAudit" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_audit),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * addInvoiceWorksheetLineTag
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param string $invoice_worksheet_line_tag The tag to add (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLineTag($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        list($response, $statusCode, $httpHeader) = $this->addInvoiceWorksheetLineTagWithHttpInfo ($invoice_worksheet_line_id, $invoice_worksheet_line_tag);
        return $response; 
    }


    /**
     * addInvoiceWorksheetLineTagWithHttpInfo
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param string $invoice_worksheet_line_tag The tag to add (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineTag');
        }
        // verify the required parameter 'invoice_worksheet_line_tag' is set
        if ($invoice_worksheet_line_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_tag when calling addInvoiceWorksheetLineTag');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }// path params
        
        if ($invoice_worksheet_line_tag !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineTag" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_tag),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteInvoiceWorksheetLine
     *
     * Delete an invoiceWorksheetLine
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deleteInvoiceWorksheetLine($invoice_worksheet_line_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteInvoiceWorksheetLineWithHttpInfo ($invoice_worksheet_line_id);
        return $response; 
    }


    /**
     * deleteInvoiceWorksheetLineWithHttpInfo
     *
     * Delete an invoiceWorksheetLine
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deleteInvoiceWorksheetLineWithHttpInfo($invoice_worksheet_line_id)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling deleteInvoiceWorksheetLine');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteInvoiceWorksheetLineTag
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param string $invoice_worksheet_line_tag The tag to delete (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deleteInvoiceWorksheetLineTag($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteInvoiceWorksheetLineTagWithHttpInfo ($invoice_worksheet_line_id, $invoice_worksheet_line_tag);
        return $response; 
    }


    /**
     * deleteInvoiceWorksheetLineTagWithHttpInfo
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param string $invoice_worksheet_line_tag The tag to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deleteInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling deleteInvoiceWorksheetLineTag');
        }
        // verify the required parameter 'invoice_worksheet_line_tag' is set
        if ($invoice_worksheet_line_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_tag when calling deleteInvoiceWorksheetLineTag');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }// path params
        
        if ($invoice_worksheet_line_tag !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineTag" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_tag),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getDuplicateInvoiceWorksheetLineById
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     * @return \Infoplus\Model\InvoiceWorksheetLine
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getDuplicateInvoiceWorksheetLineById($invoice_worksheet_line_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getDuplicateInvoiceWorksheetLineByIdWithHttpInfo ($invoice_worksheet_line_id);
        return $response; 
    }


    /**
     * getDuplicateInvoiceWorksheetLineByIdWithHttpInfo
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     * @return Array of \Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getDuplicateInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling getDuplicateInvoiceWorksheetLineById');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/duplicate/{invoiceWorksheetLineId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\InvoiceWorksheetLine'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\InvoiceWorksheetLine', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\InvoiceWorksheetLine', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getInvoiceWorksheetLineByFilter
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param string $filter Query string, used to filter results. (optional)
     * @param int $page Result page number.  Defaults to 1. (optional)
     * @param int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param string $sort Sort results by specified field. (optional)
     * @return \Infoplus\Model\InvoiceWorksheetLine[]
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getInvoiceWorksheetLineByFilterWithHttpInfo ($filter, $page, $limit, $sort);
        return $response; 
    }


    /**
     * getInvoiceWorksheetLineByFilterWithHttpInfo
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param string $filter Query string, used to filter results. (optional)
     * @param int $page Result page number.  Defaults to 1. (optional)
     * @param int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param string $sort Sort results by specified field. (optional)
     * @return Array of \Infoplus\Model\InvoiceWorksheetLine[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\InvoiceWorksheetLine[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\InvoiceWorksheetLine[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\InvoiceWorksheetLine[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getInvoiceWorksheetLineById
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     * @return \Infoplus\Model\InvoiceWorksheetLine
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineById($invoice_worksheet_line_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getInvoiceWorksheetLineByIdWithHttpInfo ($invoice_worksheet_line_id);
        return $response; 
    }


    /**
     * getInvoiceWorksheetLineByIdWithHttpInfo
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     * @return Array of \Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling getInvoiceWorksheetLineById');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\InvoiceWorksheetLine'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\InvoiceWorksheetLine', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\InvoiceWorksheetLine', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getInvoiceWorksheetLineTags
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineTags($invoice_worksheet_line_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getInvoiceWorksheetLineTagsWithHttpInfo ($invoice_worksheet_line_id);
        return $response; 
    }


    /**
     * getInvoiceWorksheetLineTagsWithHttpInfo
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getInvoiceWorksheetLineTagsWithHttpInfo($invoice_worksheet_line_id)
    {
        
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_worksheet_line_id when calling getInvoiceWorksheetLineTags');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                "{" . "invoiceWorksheetLineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * updateInvoiceWorksheetLine
     *
     * Update an invoiceWorksheetLine
     *
     * @param \Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updateInvoiceWorksheetLine($body)
    {
        list($response, $statusCode, $httpHeader) = $this->updateInvoiceWorksheetLineWithHttpInfo ($body);
        return $response; 
    }


    /**
     * updateInvoiceWorksheetLineWithHttpInfo
     *
     * Update an invoiceWorksheetLine
     *
     * @param \Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updateInvoiceWorksheetLineWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateInvoiceWorksheetLine');
        }
  
        // parse inputs
        $resourcePath = "/beta/invoiceWorksheetLine";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
}
