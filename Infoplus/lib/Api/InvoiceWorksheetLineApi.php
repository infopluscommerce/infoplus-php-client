<?php
/**
 * InvoiceWorksheetLineApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * InvoiceWorksheetLineApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceWorksheetLineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addInvoiceWorksheetLine
     *
     * Create an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\InvoiceWorksheetLine
     */
    public function addInvoiceWorksheetLine($body)
    {
        list($response) = $this->addInvoiceWorksheetLineWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addInvoiceWorksheetLineWithHttpInfo
     *
     * Create an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWorksheetLineWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->addInvoiceWorksheetLineRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\InvoiceWorksheetLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceWorksheetLineAsync
     *
     * Create an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineAsync($body)
    {
        return $this->addInvoiceWorksheetLineAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceWorksheetLineAsyncWithHttpInfo
     *
     * Create an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineAsyncWithHttpInfo($body)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->addInvoiceWorksheetLineRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoiceWorksheetLine'
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be inserted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoiceWorksheetLineRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addInvoiceWorksheetLine'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addInvoiceWorksheetLineAudit
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param  string $invoice_worksheet_line_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addInvoiceWorksheetLineAudit($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        $this->addInvoiceWorksheetLineAuditWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_audit);
    }

    /**
     * Operation addInvoiceWorksheetLineAuditWithHttpInfo
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param  string $invoice_worksheet_line_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWorksheetLineAuditWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineAuditRequest($invoice_worksheet_line_id, $invoice_worksheet_line_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceWorksheetLineAuditAsync
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param  string $invoice_worksheet_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineAuditAsync($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        return $this->addInvoiceWorksheetLineAuditAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceWorksheetLineAuditAsyncWithHttpInfo
     *
     * Add new audit for an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param  string $invoice_worksheet_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineAuditAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineAuditRequest($invoice_worksheet_line_id, $invoice_worksheet_line_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoiceWorksheetLineAudit'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an audit to (required)
     * @param  string $invoice_worksheet_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoiceWorksheetLineAuditRequest($invoice_worksheet_line_id, $invoice_worksheet_line_audit)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineAudit'
            );
        }
        // verify the required parameter 'invoice_worksheet_line_audit' is set
        if ($invoice_worksheet_line_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_audit when calling addInvoiceWorksheetLineAudit'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/audit/{invoiceWorksheetLineAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_worksheet_line_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineAudit' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addInvoiceWorksheetLineFile
     *
     * Attach a file to an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addInvoiceWorksheetLineFile($invoice_worksheet_line_id, $file_name)
    {
        $this->addInvoiceWorksheetLineFileWithHttpInfo($invoice_worksheet_line_id, $file_name);
    }

    /**
     * Operation addInvoiceWorksheetLineFileWithHttpInfo
     *
     * Attach a file to an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWorksheetLineFileWithHttpInfo($invoice_worksheet_line_id, $file_name)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceWorksheetLineFileAsync
     *
     * Attach a file to an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineFileAsync($invoice_worksheet_line_id, $file_name)
    {
        return $this->addInvoiceWorksheetLineFileAsyncWithHttpInfo($invoice_worksheet_line_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceWorksheetLineFileAsyncWithHttpInfo
     *
     * Attach a file to an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineFileAsyncWithHttpInfo($invoice_worksheet_line_id, $file_name)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoiceWorksheetLineFile'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_name)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addInvoiceWorksheetLineFile'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addInvoiceWorksheetLineFileByURL
     *
     * Attach a file to an invoiceWorksheetLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addInvoiceWorksheetLineFileByURL($body, $invoice_worksheet_line_id)
    {
        $this->addInvoiceWorksheetLineFileByURLWithHttpInfo($body, $invoice_worksheet_line_id);
    }

    /**
     * Operation addInvoiceWorksheetLineFileByURLWithHttpInfo
     *
     * Attach a file to an invoiceWorksheetLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWorksheetLineFileByURLWithHttpInfo($body, $invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineFileByURLRequest($body, $invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceWorksheetLineFileByURLAsync
     *
     * Attach a file to an invoiceWorksheetLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineFileByURLAsync($body, $invoice_worksheet_line_id)
    {
        return $this->addInvoiceWorksheetLineFileByURLAsyncWithHttpInfo($body, $invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceWorksheetLineFileByURLAsyncWithHttpInfo
     *
     * Attach a file to an invoiceWorksheetLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineFileByURLAsyncWithHttpInfo($body, $invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineFileByURLRequest($body, $invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoiceWorksheetLineFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoiceWorksheetLineFileByURLRequest($body, $invoice_worksheet_line_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addInvoiceWorksheetLineFileByURL'
            );
        }
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineFileByURL'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addInvoiceWorksheetLineTag
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param  string $invoice_worksheet_line_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addInvoiceWorksheetLineTag($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $this->addInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag);
    }

    /**
     * Operation addInvoiceWorksheetLineTagWithHttpInfo
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param  string $invoice_worksheet_line_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceWorksheetLineTagAsync
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param  string $invoice_worksheet_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineTagAsync($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        return $this->addInvoiceWorksheetLineTagAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceWorksheetLineTagAsyncWithHttpInfo
     *
     * Add new tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param  string $invoice_worksheet_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceWorksheetLineTagAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $returnType = '';
        $request = $this->addInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoiceWorksheetLineTag'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to add a tag to (required)
     * @param  string $invoice_worksheet_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling addInvoiceWorksheetLineTag'
            );
        }
        // verify the required parameter 'invoice_worksheet_line_tag' is set
        if ($invoice_worksheet_line_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_tag when calling addInvoiceWorksheetLineTag'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_worksheet_line_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineTag' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInvoiceWorksheetLine
     *
     * Delete an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInvoiceWorksheetLine($invoice_worksheet_line_id)
    {
        $this->deleteInvoiceWorksheetLineWithHttpInfo($invoice_worksheet_line_id);
    }

    /**
     * Operation deleteInvoiceWorksheetLineWithHttpInfo
     *
     * Delete an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvoiceWorksheetLineWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineRequest($invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInvoiceWorksheetLineAsync
     *
     * Delete an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineAsync($invoice_worksheet_line_id)
    {
        return $this->deleteInvoiceWorksheetLineAsyncWithHttpInfo($invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInvoiceWorksheetLineAsyncWithHttpInfo
     *
     * Delete an invoiceWorksheetLine
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineAsyncWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineRequest($invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInvoiceWorksheetLine'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInvoiceWorksheetLineRequest($invoice_worksheet_line_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling deleteInvoiceWorksheetLine'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInvoiceWorksheetLineFile
     *
     * Delete a file for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInvoiceWorksheetLineFile($invoice_worksheet_line_id, $file_id)
    {
        $this->deleteInvoiceWorksheetLineFileWithHttpInfo($invoice_worksheet_line_id, $file_id);
    }

    /**
     * Operation deleteInvoiceWorksheetLineFileWithHttpInfo
     *
     * Delete a file for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvoiceWorksheetLineFileWithHttpInfo($invoice_worksheet_line_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInvoiceWorksheetLineFileAsync
     *
     * Delete a file for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineFileAsync($invoice_worksheet_line_id, $file_id)
    {
        return $this->deleteInvoiceWorksheetLineFileAsyncWithHttpInfo($invoice_worksheet_line_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInvoiceWorksheetLineFileAsyncWithHttpInfo
     *
     * Delete a file for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineFileAsyncWithHttpInfo($invoice_worksheet_line_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInvoiceWorksheetLineFile'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInvoiceWorksheetLineFileRequest($invoice_worksheet_line_id, $file_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling deleteInvoiceWorksheetLineFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteInvoiceWorksheetLineFile'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInvoiceWorksheetLineTag
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param  string $invoice_worksheet_line_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInvoiceWorksheetLineTag($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $this->deleteInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag);
    }

    /**
     * Operation deleteInvoiceWorksheetLineTagWithHttpInfo
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param  string $invoice_worksheet_line_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvoiceWorksheetLineTagWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInvoiceWorksheetLineTagAsync
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param  string $invoice_worksheet_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineTagAsync($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        return $this->deleteInvoiceWorksheetLineTagAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInvoiceWorksheetLineTagAsyncWithHttpInfo
     *
     * Delete a tag for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param  string $invoice_worksheet_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInvoiceWorksheetLineTagAsyncWithHttpInfo($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        $returnType = '';
        $request = $this->deleteInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInvoiceWorksheetLineTag'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to remove tag from (required)
     * @param  string $invoice_worksheet_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInvoiceWorksheetLineTagRequest($invoice_worksheet_line_id, $invoice_worksheet_line_tag)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling deleteInvoiceWorksheetLineTag'
            );
        }
        // verify the required parameter 'invoice_worksheet_line_tag' is set
        if ($invoice_worksheet_line_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_tag when calling deleteInvoiceWorksheetLineTag'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag/{invoiceWorksheetLineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_worksheet_line_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineTag' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateInvoiceWorksheetLineById
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\InvoiceWorksheetLine
     */
    public function getDuplicateInvoiceWorksheetLineById($invoice_worksheet_line_id)
    {
        list($response) = $this->getDuplicateInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id);
        return $response;
    }

    /**
     * Operation getDuplicateInvoiceWorksheetLineByIdWithHttpInfo
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->getDuplicateInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\InvoiceWorksheetLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateInvoiceWorksheetLineByIdAsync
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateInvoiceWorksheetLineByIdAsync($invoice_worksheet_line_id)
    {
        return $this->getDuplicateInvoiceWorksheetLineByIdAsyncWithHttpInfo($invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateInvoiceWorksheetLineByIdAsyncWithHttpInfo
     *
     * Get a duplicated an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateInvoiceWorksheetLineByIdAsyncWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->getDuplicateInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateInvoiceWorksheetLineById'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling getDuplicateInvoiceWorksheetLineById'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/duplicate/{invoiceWorksheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceWorksheetLineByFilter
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\InvoiceWorksheetLine[]
     */
    public function getInvoiceWorksheetLineByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getInvoiceWorksheetLineByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getInvoiceWorksheetLineByFilterWithHttpInfo
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\InvoiceWorksheetLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWorksheetLineByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine[]';
        $request = $this->getInvoiceWorksheetLineByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\InvoiceWorksheetLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceWorksheetLineByFilterAsync
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getInvoiceWorksheetLineByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceWorksheetLineByFilterAsyncWithHttpInfo
     *
     * Search invoiceWorksheetLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine[]';
        $request = $this->getInvoiceWorksheetLineByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceWorksheetLineByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceWorksheetLineByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/invoiceWorksheetLine/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceWorksheetLineById
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\InvoiceWorksheetLine
     */
    public function getInvoiceWorksheetLineById($invoice_worksheet_line_id)
    {
        list($response) = $this->getInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id);
        return $response;
    }

    /**
     * Operation getInvoiceWorksheetLineByIdWithHttpInfo
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\InvoiceWorksheetLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWorksheetLineByIdWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->getInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\InvoiceWorksheetLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceWorksheetLineByIdAsync
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineByIdAsync($invoice_worksheet_line_id)
    {
        return $this->getInvoiceWorksheetLineByIdAsyncWithHttpInfo($invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceWorksheetLineByIdAsyncWithHttpInfo
     *
     * Get an invoiceWorksheetLine by id
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineByIdAsyncWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\InvoiceWorksheetLine';
        $request = $this->getInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceWorksheetLineById'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceWorksheetLineByIdRequest($invoice_worksheet_line_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling getInvoiceWorksheetLineById'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceWorksheetLineFiles
     *
     * Get the files for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getInvoiceWorksheetLineFiles($invoice_worksheet_line_id)
    {
        $this->getInvoiceWorksheetLineFilesWithHttpInfo($invoice_worksheet_line_id);
    }

    /**
     * Operation getInvoiceWorksheetLineFilesWithHttpInfo
     *
     * Get the files for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWorksheetLineFilesWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->getInvoiceWorksheetLineFilesRequest($invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceWorksheetLineFilesAsync
     *
     * Get the files for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineFilesAsync($invoice_worksheet_line_id)
    {
        return $this->getInvoiceWorksheetLineFilesAsyncWithHttpInfo($invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceWorksheetLineFilesAsyncWithHttpInfo
     *
     * Get the files for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineFilesAsyncWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->getInvoiceWorksheetLineFilesRequest($invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceWorksheetLineFiles'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceWorksheetLineFilesRequest($invoice_worksheet_line_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling getInvoiceWorksheetLineFiles'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceWorksheetLineTags
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getInvoiceWorksheetLineTags($invoice_worksheet_line_id)
    {
        $this->getInvoiceWorksheetLineTagsWithHttpInfo($invoice_worksheet_line_id);
    }

    /**
     * Operation getInvoiceWorksheetLineTagsWithHttpInfo
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWorksheetLineTagsWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->getInvoiceWorksheetLineTagsRequest($invoice_worksheet_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceWorksheetLineTagsAsync
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineTagsAsync($invoice_worksheet_line_id)
    {
        return $this->getInvoiceWorksheetLineTagsAsyncWithHttpInfo($invoice_worksheet_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceWorksheetLineTagsAsyncWithHttpInfo
     *
     * Get the tags for an invoiceWorksheetLine.
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceWorksheetLineTagsAsyncWithHttpInfo($invoice_worksheet_line_id)
    {
        $returnType = '';
        $request = $this->getInvoiceWorksheetLineTagsRequest($invoice_worksheet_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceWorksheetLineTags'
     *
     * @param  int $invoice_worksheet_line_id Id of the invoiceWorksheetLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceWorksheetLineTagsRequest($invoice_worksheet_line_id)
    {
        // verify the required parameter 'invoice_worksheet_line_id' is set
        if ($invoice_worksheet_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_worksheet_line_id when calling getInvoiceWorksheetLineTags'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine/{invoiceWorksheetLineId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_worksheet_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceWorksheetLineId' . '}',
                ObjectSerializer::toPathValue($invoice_worksheet_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInvoiceWorksheetLine
     *
     * Update an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateInvoiceWorksheetLine($body)
    {
        $this->updateInvoiceWorksheetLineWithHttpInfo($body);
    }

    /**
     * Operation updateInvoiceWorksheetLineWithHttpInfo
     *
     * Update an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInvoiceWorksheetLineWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateInvoiceWorksheetLineRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateInvoiceWorksheetLineAsync
     *
     * Update an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceWorksheetLineAsync($body)
    {
        return $this->updateInvoiceWorksheetLineAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInvoiceWorksheetLineAsyncWithHttpInfo
     *
     * Update an invoiceWorksheetLine
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceWorksheetLineAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateInvoiceWorksheetLineRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInvoiceWorksheetLine'
     *
     * @param  \Infoplus\Infoplus\Model\InvoiceWorksheetLine $body InvoiceWorksheetLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInvoiceWorksheetLineRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInvoiceWorksheetLine'
            );
        }

        $resourcePath = '/beta/invoiceWorksheetLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
