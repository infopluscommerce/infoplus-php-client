<?php
/**
 * PickFaceAssignmentApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Infoplus\Api;

use \Infoplus\Configuration;
use \Infoplus\ApiClient;
use \Infoplus\ApiException;
use \Infoplus\ObjectSerializer;

/**
 * PickFaceAssignmentApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PickFaceAssignmentApi
{

    /**
     * API Client
     * @var \Infoplus\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Infoplus\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://kingsrook.localhost-testsubdomain1.infopluswms.com:8443/infoplus-wms/api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Infoplus\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Infoplus\ApiClient $apiClient set the API client
     * @return PickFaceAssignmentApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * addPickFaceAssignment
     *
     * Create a pickFaceAssignment
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be inserted. (required)
     * @return \Infoplus\Model\PickFaceAssignment
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignment($body)
    {
        list($response, $statusCode, $httpHeader) = $this->addPickFaceAssignmentWithHttpInfo ($body);
        return $response; 
    }


    /**
     * addPickFaceAssignmentWithHttpInfo
     *
     * Create a pickFaceAssignment
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be inserted. (required)
     * @return Array of \Infoplus\Model\PickFaceAssignment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignmentWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addPickFaceAssignment');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\PickFaceAssignment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\PickFaceAssignment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\PickFaceAssignment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 405:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\ApiResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * addPickFaceAssignmentAudit
     *
     * Add new audit for a pickFaceAssignment
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to add an audit to (required)
     * @param string $pick_face_assignment_audit The audit to add (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignmentAudit($pick_face_assignment_id, $pick_face_assignment_audit)
    {
        list($response, $statusCode, $httpHeader) = $this->addPickFaceAssignmentAuditWithHttpInfo ($pick_face_assignment_id, $pick_face_assignment_audit);
        return $response; 
    }


    /**
     * addPickFaceAssignmentAuditWithHttpInfo
     *
     * Add new audit for a pickFaceAssignment
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to add an audit to (required)
     * @param string $pick_face_assignment_audit The audit to add (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignmentAuditWithHttpInfo($pick_face_assignment_id, $pick_face_assignment_audit)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling addPickFaceAssignmentAudit');
        }
        // verify the required parameter 'pick_face_assignment_audit' is set
        if ($pick_face_assignment_audit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_audit when calling addPickFaceAssignmentAudit');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/audit/{pickFaceAssignmentAudit}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }// path params
        
        if ($pick_face_assignment_audit !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentAudit" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_audit),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * addPickFaceAssignmentTag
     *
     * Add new tags for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to add a tag to (required)
     * @param string $pick_face_assignment_tag The tag to add (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignmentTag($pick_face_assignment_id, $pick_face_assignment_tag)
    {
        list($response, $statusCode, $httpHeader) = $this->addPickFaceAssignmentTagWithHttpInfo ($pick_face_assignment_id, $pick_face_assignment_tag);
        return $response; 
    }


    /**
     * addPickFaceAssignmentTagWithHttpInfo
     *
     * Add new tags for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to add a tag to (required)
     * @param string $pick_face_assignment_tag The tag to add (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function addPickFaceAssignmentTagWithHttpInfo($pick_face_assignment_id, $pick_face_assignment_tag)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling addPickFaceAssignmentTag');
        }
        // verify the required parameter 'pick_face_assignment_tag' is set
        if ($pick_face_assignment_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_tag when calling addPickFaceAssignmentTag');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }// path params
        
        if ($pick_face_assignment_tag !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentTag" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_tag),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deletePickFaceAssignment
     *
     * Delete a pickFaceAssignment
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be deleted. (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deletePickFaceAssignment($pick_face_assignment_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deletePickFaceAssignmentWithHttpInfo ($pick_face_assignment_id);
        return $response; 
    }


    /**
     * deletePickFaceAssignmentWithHttpInfo
     *
     * Delete a pickFaceAssignment
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be deleted. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deletePickFaceAssignmentWithHttpInfo($pick_face_assignment_id)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling deletePickFaceAssignment');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deletePickFaceAssignmentTag
     *
     * Delete a tag for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to remove tag from (required)
     * @param string $pick_face_assignment_tag The tag to delete (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deletePickFaceAssignmentTag($pick_face_assignment_id, $pick_face_assignment_tag)
    {
        list($response, $statusCode, $httpHeader) = $this->deletePickFaceAssignmentTagWithHttpInfo ($pick_face_assignment_id, $pick_face_assignment_tag);
        return $response; 
    }


    /**
     * deletePickFaceAssignmentTagWithHttpInfo
     *
     * Delete a tag for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to remove tag from (required)
     * @param string $pick_face_assignment_tag The tag to delete (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function deletePickFaceAssignmentTagWithHttpInfo($pick_face_assignment_id, $pick_face_assignment_tag)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling deletePickFaceAssignmentTag');
        }
        // verify the required parameter 'pick_face_assignment_tag' is set
        if ($pick_face_assignment_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_tag when calling deletePickFaceAssignmentTag');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag/{pickFaceAssignmentTag}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }// path params
        
        if ($pick_face_assignment_tag !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentTag" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_tag),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getDuplicatePickFaceAssignmentById
     *
     * Get a duplicated a pickFaceAssignment by id
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be duplicated. (required)
     * @return \Infoplus\Model\PickFaceAssignment
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getDuplicatePickFaceAssignmentById($pick_face_assignment_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getDuplicatePickFaceAssignmentByIdWithHttpInfo ($pick_face_assignment_id);
        return $response; 
    }


    /**
     * getDuplicatePickFaceAssignmentByIdWithHttpInfo
     *
     * Get a duplicated a pickFaceAssignment by id
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be duplicated. (required)
     * @return Array of \Infoplus\Model\PickFaceAssignment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getDuplicatePickFaceAssignmentByIdWithHttpInfo($pick_face_assignment_id)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling getDuplicatePickFaceAssignmentById');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/duplicate/{pickFaceAssignmentId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\PickFaceAssignment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\PickFaceAssignment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\PickFaceAssignment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getPickFaceAssignmentByFilter
     *
     * Search pickFaceAssignments by filter
     *
     * @param string $filter Query string, used to filter results. (optional)
     * @param int $page Result page number.  Defaults to 1. (optional)
     * @param int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param string $sort Sort results by specified field. (optional)
     * @return \Infoplus\Model\PickFaceAssignment[]
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getPickFaceAssignmentByFilterWithHttpInfo ($filter, $page, $limit, $sort);
        return $response; 
    }


    /**
     * getPickFaceAssignmentByFilterWithHttpInfo
     *
     * Search pickFaceAssignments by filter
     *
     * @param string $filter Query string, used to filter results. (optional)
     * @param int $page Result page number.  Defaults to 1. (optional)
     * @param int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param string $sort Sort results by specified field. (optional)
     * @return Array of \Infoplus\Model\PickFaceAssignment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }// query params
        
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\PickFaceAssignment[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\PickFaceAssignment[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\PickFaceAssignment[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getPickFaceAssignmentById
     *
     * Get a pickFaceAssignment by id
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be returned. (required)
     * @return \Infoplus\Model\PickFaceAssignment
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentById($pick_face_assignment_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getPickFaceAssignmentByIdWithHttpInfo ($pick_face_assignment_id);
        return $response; 
    }


    /**
     * getPickFaceAssignmentByIdWithHttpInfo
     *
     * Get a pickFaceAssignment by id
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to be returned. (required)
     * @return Array of \Infoplus\Model\PickFaceAssignment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentByIdWithHttpInfo($pick_face_assignment_id)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling getPickFaceAssignmentById');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Infoplus\Model\PickFaceAssignment'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Infoplus\ObjectSerializer::deserialize($response, '\Infoplus\Model\PickFaceAssignment', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Infoplus\ObjectSerializer::deserialize($e->getResponseBody(), '\Infoplus\Model\PickFaceAssignment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getPickFaceAssignmentTags
     *
     * Get the tags for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to get tags for (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentTags($pick_face_assignment_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getPickFaceAssignmentTagsWithHttpInfo ($pick_face_assignment_id);
        return $response; 
    }


    /**
     * getPickFaceAssignmentTagsWithHttpInfo
     *
     * Get the tags for a pickFaceAssignment.
     *
     * @param int $pick_face_assignment_id Id of the pickFaceAssignment to get tags for (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function getPickFaceAssignmentTagsWithHttpInfo($pick_face_assignment_id)
    {
        
        // verify the required parameter 'pick_face_assignment_id' is set
        if ($pick_face_assignment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pick_face_assignment_id when calling getPickFaceAssignmentTags');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/{pickFaceAssignmentId}/tag";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($pick_face_assignment_id !== null) {
            $resourcePath = str_replace(
                "{" . "pickFaceAssignmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pick_face_assignment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * updatePickFaceAssignment
     *
     * Update a pickFaceAssignment
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be updated. (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updatePickFaceAssignment($body)
    {
        list($response, $statusCode, $httpHeader) = $this->updatePickFaceAssignmentWithHttpInfo ($body);
        return $response; 
    }


    /**
     * updatePickFaceAssignmentWithHttpInfo
     *
     * Update a pickFaceAssignment
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be updated. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updatePickFaceAssignmentWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePickFaceAssignment');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * updatePickFaceAssignmentCustomFields
     *
     * Update a pickFaceAssignment custom fields
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be updated. (required)
     * @return void
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updatePickFaceAssignmentCustomFields($body)
    {
        list($response, $statusCode, $httpHeader) = $this->updatePickFaceAssignmentCustomFieldsWithHttpInfo ($body);
        return $response; 
    }


    /**
     * updatePickFaceAssignmentCustomFieldsWithHttpInfo
     *
     * Update a pickFaceAssignment custom fields
     *
     * @param \Infoplus\Model\PickFaceAssignment $body PickFaceAssignment to be updated. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Infoplus\ApiException on non-2xx response
     */
    public function updatePickFaceAssignmentCustomFieldsWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePickFaceAssignmentCustomFields');
        }
  
        // parse inputs
        $resourcePath = "/beta/pickFaceAssignment/customFields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['API-Key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
}
