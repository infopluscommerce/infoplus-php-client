<?php
/**
 * ParcelInvoiceLineApi
 * PHP version 5
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Infoplus API
 *
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Infoplus\Infoplus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Infoplus\ApiException;
use Infoplus\Configuration;
use Infoplus\HeaderSelector;
use Infoplus\ObjectSerializer;

/**
 * ParcelInvoiceLineApi Class Doc Comment
 *
 * @category Class
 * @package  Infoplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParcelInvoiceLineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addParcelInvoiceLineAudit
     *
     * Add new audit for a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an audit to (required)
     * @param  string $parcel_invoice_line_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addParcelInvoiceLineAudit($parcel_invoice_line_id, $parcel_invoice_line_audit)
    {
        $this->addParcelInvoiceLineAuditWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_audit);
    }

    /**
     * Operation addParcelInvoiceLineAuditWithHttpInfo
     *
     * Add new audit for a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an audit to (required)
     * @param  string $parcel_invoice_line_audit The audit to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addParcelInvoiceLineAuditWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_audit)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineAuditRequest($parcel_invoice_line_id, $parcel_invoice_line_audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addParcelInvoiceLineAuditAsync
     *
     * Add new audit for a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an audit to (required)
     * @param  string $parcel_invoice_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineAuditAsync($parcel_invoice_line_id, $parcel_invoice_line_audit)
    {
        return $this->addParcelInvoiceLineAuditAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addParcelInvoiceLineAuditAsyncWithHttpInfo
     *
     * Add new audit for a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an audit to (required)
     * @param  string $parcel_invoice_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineAuditAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_audit)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineAuditRequest($parcel_invoice_line_id, $parcel_invoice_line_audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addParcelInvoiceLineAudit'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an audit to (required)
     * @param  string $parcel_invoice_line_audit The audit to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addParcelInvoiceLineAuditRequest($parcel_invoice_line_id, $parcel_invoice_line_audit)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling addParcelInvoiceLineAudit'
            );
        }
        // verify the required parameter 'parcel_invoice_line_audit' is set
        if ($parcel_invoice_line_audit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_audit when calling addParcelInvoiceLineAudit'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/audit/{parcelInvoiceLineAudit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_invoice_line_audit !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineAudit' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_audit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addParcelInvoiceLineFile
     *
     * Attach a file to a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addParcelInvoiceLineFile($parcel_invoice_line_id, $file_name)
    {
        $this->addParcelInvoiceLineFileWithHttpInfo($parcel_invoice_line_id, $file_name);
    }

    /**
     * Operation addParcelInvoiceLineFileWithHttpInfo
     *
     * Attach a file to a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addParcelInvoiceLineFileWithHttpInfo($parcel_invoice_line_id, $file_name)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addParcelInvoiceLineFileAsync
     *
     * Attach a file to a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineFileAsync($parcel_invoice_line_id, $file_name)
    {
        return $this->addParcelInvoiceLineFileAsyncWithHttpInfo($parcel_invoice_line_id, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addParcelInvoiceLineFileAsyncWithHttpInfo
     *
     * Attach a file to a parcelInvoiceLine
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineFileAsyncWithHttpInfo($parcel_invoice_line_id, $file_name)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addParcelInvoiceLineFile'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a file to (required)
     * @param  string $file_name Name of file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_name)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling addParcelInvoiceLineFile'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling addParcelInvoiceLineFile'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                '{' . 'fileName' . '}',
                ObjectSerializer::toPathValue($file_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addParcelInvoiceLineFileByURL
     *
     * Attach a file to a parcelInvoiceLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addParcelInvoiceLineFileByURL($body, $parcel_invoice_line_id)
    {
        $this->addParcelInvoiceLineFileByURLWithHttpInfo($body, $parcel_invoice_line_id);
    }

    /**
     * Operation addParcelInvoiceLineFileByURLWithHttpInfo
     *
     * Attach a file to a parcelInvoiceLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an file to (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addParcelInvoiceLineFileByURLWithHttpInfo($body, $parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineFileByURLRequest($body, $parcel_invoice_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addParcelInvoiceLineFileByURLAsync
     *
     * Attach a file to a parcelInvoiceLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineFileByURLAsync($body, $parcel_invoice_line_id)
    {
        return $this->addParcelInvoiceLineFileByURLAsyncWithHttpInfo($body, $parcel_invoice_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addParcelInvoiceLineFileByURLAsyncWithHttpInfo
     *
     * Attach a file to a parcelInvoiceLine by URL.
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineFileByURLAsyncWithHttpInfo($body, $parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineFileByURLRequest($body, $parcel_invoice_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addParcelInvoiceLineFileByURL'
     *
     * @param  \Infoplus\Infoplus\Model\RecordFile $body The url and optionly fileName to be used. (required)
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add an file to (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addParcelInvoiceLineFileByURLRequest($body, $parcel_invoice_line_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addParcelInvoiceLineFileByURL'
            );
        }
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling addParcelInvoiceLineFileByURL'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addParcelInvoiceLineTag
     *
     * Add new tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a tag to (required)
     * @param  string $parcel_invoice_line_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addParcelInvoiceLineTag($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $this->addParcelInvoiceLineTagWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag);
    }

    /**
     * Operation addParcelInvoiceLineTagWithHttpInfo
     *
     * Add new tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a tag to (required)
     * @param  string $parcel_invoice_line_tag The tag to add (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addParcelInvoiceLineTagWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addParcelInvoiceLineTagAsync
     *
     * Add new tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a tag to (required)
     * @param  string $parcel_invoice_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineTagAsync($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        return $this->addParcelInvoiceLineTagAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addParcelInvoiceLineTagAsyncWithHttpInfo
     *
     * Add new tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a tag to (required)
     * @param  string $parcel_invoice_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcelInvoiceLineTagAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $returnType = '';
        $request = $this->addParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addParcelInvoiceLineTag'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to add a tag to (required)
     * @param  string $parcel_invoice_line_tag The tag to add (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling addParcelInvoiceLineTag'
            );
        }
        // verify the required parameter 'parcel_invoice_line_tag' is set
        if ($parcel_invoice_line_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_tag when calling addParcelInvoiceLineTag'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_invoice_line_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineTag' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParcelInvoiceLineFile
     *
     * Delete a file for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParcelInvoiceLineFile($parcel_invoice_line_id, $file_id)
    {
        $this->deleteParcelInvoiceLineFileWithHttpInfo($parcel_invoice_line_id, $file_id);
    }

    /**
     * Operation deleteParcelInvoiceLineFileWithHttpInfo
     *
     * Delete a file for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParcelInvoiceLineFileWithHttpInfo($parcel_invoice_line_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParcelInvoiceLineFileAsync
     *
     * Delete a file for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelInvoiceLineFileAsync($parcel_invoice_line_id, $file_id)
    {
        return $this->deleteParcelInvoiceLineFileAsyncWithHttpInfo($parcel_invoice_line_id, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParcelInvoiceLineFileAsyncWithHttpInfo
     *
     * Delete a file for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelInvoiceLineFileAsyncWithHttpInfo($parcel_invoice_line_id, $file_id)
    {
        $returnType = '';
        $request = $this->deleteParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParcelInvoiceLineFile'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove file from (required)
     * @param  int $file_id Id of the file to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParcelInvoiceLineFileRequest($parcel_invoice_line_id, $file_id)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling deleteParcelInvoiceLineFile'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteParcelInvoiceLineFile'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParcelInvoiceLineTag
     *
     * Delete a tag for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove tag from (required)
     * @param  string $parcel_invoice_line_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParcelInvoiceLineTag($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $this->deleteParcelInvoiceLineTagWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag);
    }

    /**
     * Operation deleteParcelInvoiceLineTagWithHttpInfo
     *
     * Delete a tag for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove tag from (required)
     * @param  string $parcel_invoice_line_tag The tag to delete (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParcelInvoiceLineTagWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $returnType = '';
        $request = $this->deleteParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParcelInvoiceLineTagAsync
     *
     * Delete a tag for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove tag from (required)
     * @param  string $parcel_invoice_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelInvoiceLineTagAsync($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        return $this->deleteParcelInvoiceLineTagAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParcelInvoiceLineTagAsyncWithHttpInfo
     *
     * Delete a tag for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove tag from (required)
     * @param  string $parcel_invoice_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcelInvoiceLineTagAsyncWithHttpInfo($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        $returnType = '';
        $request = $this->deleteParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParcelInvoiceLineTag'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to remove tag from (required)
     * @param  string $parcel_invoice_line_tag The tag to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParcelInvoiceLineTagRequest($parcel_invoice_line_id, $parcel_invoice_line_tag)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling deleteParcelInvoiceLineTag'
            );
        }
        // verify the required parameter 'parcel_invoice_line_tag' is set
        if ($parcel_invoice_line_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_tag when calling deleteParcelInvoiceLineTag'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag/{parcelInvoiceLineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($parcel_invoice_line_tag !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineTag' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_tag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDuplicateParcelInvoiceLineById
     *
     * Get a duplicated a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ParcelInvoiceLine
     */
    public function getDuplicateParcelInvoiceLineById($parcel_invoice_line_id)
    {
        list($response) = $this->getDuplicateParcelInvoiceLineByIdWithHttpInfo($parcel_invoice_line_id);
        return $response;
    }

    /**
     * Operation getDuplicateParcelInvoiceLineByIdWithHttpInfo
     *
     * Get a duplicated a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be duplicated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ParcelInvoiceLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDuplicateParcelInvoiceLineByIdWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine';
        $request = $this->getDuplicateParcelInvoiceLineByIdRequest($parcel_invoice_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ParcelInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDuplicateParcelInvoiceLineByIdAsync
     *
     * Get a duplicated a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateParcelInvoiceLineByIdAsync($parcel_invoice_line_id)
    {
        return $this->getDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo($parcel_invoice_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo
     *
     * Get a duplicated a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDuplicateParcelInvoiceLineByIdAsyncWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine';
        $request = $this->getDuplicateParcelInvoiceLineByIdRequest($parcel_invoice_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDuplicateParcelInvoiceLineById'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be duplicated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDuplicateParcelInvoiceLineByIdRequest($parcel_invoice_line_id)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling getDuplicateParcelInvoiceLineById'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/duplicate/{parcelInvoiceLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelInvoiceLineByFilter
     *
     * Search parcelInvoiceLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ParcelInvoiceLine[]
     */
    public function getParcelInvoiceLineByFilter($filter = null, $page = null, $limit = null, $sort = null)
    {
        list($response) = $this->getParcelInvoiceLineByFilterWithHttpInfo($filter, $page, $limit, $sort);
        return $response;
    }

    /**
     * Operation getParcelInvoiceLineByFilterWithHttpInfo
     *
     * Search parcelInvoiceLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ParcelInvoiceLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelInvoiceLineByFilterWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine[]';
        $request = $this->getParcelInvoiceLineByFilterRequest($filter, $page, $limit, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ParcelInvoiceLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelInvoiceLineByFilterAsync
     *
     * Search parcelInvoiceLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineByFilterAsync($filter = null, $page = null, $limit = null, $sort = null)
    {
        return $this->getParcelInvoiceLineByFilterAsyncWithHttpInfo($filter, $page, $limit, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelInvoiceLineByFilterAsyncWithHttpInfo
     *
     * Search parcelInvoiceLines by filter
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineByFilterAsyncWithHttpInfo($filter = null, $page = null, $limit = null, $sort = null)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine[]';
        $request = $this->getParcelInvoiceLineByFilterRequest($filter, $page, $limit, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelInvoiceLineByFilter'
     *
     * @param  string $filter Query string, used to filter results. (optional)
     * @param  int $page Result page number.  Defaults to 1. (optional)
     * @param  int $limit Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     * @param  string $sort Sort results by specified field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelInvoiceLineByFilterRequest($filter = null, $page = null, $limit = null, $sort = null)
    {

        $resourcePath = '/beta/parcelInvoiceLine/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelInvoiceLineById
     *
     * Get a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Infoplus\Infoplus\Model\ParcelInvoiceLine
     */
    public function getParcelInvoiceLineById($parcel_invoice_line_id)
    {
        list($response) = $this->getParcelInvoiceLineByIdWithHttpInfo($parcel_invoice_line_id);
        return $response;
    }

    /**
     * Operation getParcelInvoiceLineByIdWithHttpInfo
     *
     * Get a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be returned. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Infoplus\Infoplus\Model\ParcelInvoiceLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelInvoiceLineByIdWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine';
        $request = $this->getParcelInvoiceLineByIdRequest($parcel_invoice_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Infoplus\Infoplus\Model\ParcelInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelInvoiceLineByIdAsync
     *
     * Get a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineByIdAsync($parcel_invoice_line_id)
    {
        return $this->getParcelInvoiceLineByIdAsyncWithHttpInfo($parcel_invoice_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelInvoiceLineByIdAsyncWithHttpInfo
     *
     * Get a parcelInvoiceLine by id
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineByIdAsyncWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '\Infoplus\Infoplus\Model\ParcelInvoiceLine';
        $request = $this->getParcelInvoiceLineByIdRequest($parcel_invoice_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelInvoiceLineById'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to be returned. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelInvoiceLineByIdRequest($parcel_invoice_line_id)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling getParcelInvoiceLineById'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelInvoiceLineFiles
     *
     * Get the files for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getParcelInvoiceLineFiles($parcel_invoice_line_id)
    {
        $this->getParcelInvoiceLineFilesWithHttpInfo($parcel_invoice_line_id);
    }

    /**
     * Operation getParcelInvoiceLineFilesWithHttpInfo
     *
     * Get the files for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get files for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelInvoiceLineFilesWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->getParcelInvoiceLineFilesRequest($parcel_invoice_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelInvoiceLineFilesAsync
     *
     * Get the files for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineFilesAsync($parcel_invoice_line_id)
    {
        return $this->getParcelInvoiceLineFilesAsyncWithHttpInfo($parcel_invoice_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelInvoiceLineFilesAsyncWithHttpInfo
     *
     * Get the files for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineFilesAsyncWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->getParcelInvoiceLineFilesRequest($parcel_invoice_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelInvoiceLineFiles'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get files for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelInvoiceLineFilesRequest($parcel_invoice_line_id)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling getParcelInvoiceLineFiles'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelInvoiceLineTags
     *
     * Get the tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getParcelInvoiceLineTags($parcel_invoice_line_id)
    {
        $this->getParcelInvoiceLineTagsWithHttpInfo($parcel_invoice_line_id);
    }

    /**
     * Operation getParcelInvoiceLineTagsWithHttpInfo
     *
     * Get the tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get tags for (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelInvoiceLineTagsWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->getParcelInvoiceLineTagsRequest($parcel_invoice_line_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelInvoiceLineTagsAsync
     *
     * Get the tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineTagsAsync($parcel_invoice_line_id)
    {
        return $this->getParcelInvoiceLineTagsAsyncWithHttpInfo($parcel_invoice_line_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelInvoiceLineTagsAsyncWithHttpInfo
     *
     * Get the tags for a parcelInvoiceLine.
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelInvoiceLineTagsAsyncWithHttpInfo($parcel_invoice_line_id)
    {
        $returnType = '';
        $request = $this->getParcelInvoiceLineTagsRequest($parcel_invoice_line_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelInvoiceLineTags'
     *
     * @param  int $parcel_invoice_line_id Id of the parcelInvoiceLine to get tags for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelInvoiceLineTagsRequest($parcel_invoice_line_id)
    {
        // verify the required parameter 'parcel_invoice_line_id' is set
        if ($parcel_invoice_line_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_invoice_line_id when calling getParcelInvoiceLineTags'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine/{parcelInvoiceLineId}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parcel_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelInvoiceLineId' . '}',
                ObjectSerializer::toPathValue($parcel_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateParcelInvoiceLine
     *
     * Update a parcelInvoiceLine
     *
     * @param  \Infoplus\Infoplus\Model\ParcelInvoiceLine $body ParcelInvoiceLine to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateParcelInvoiceLine($body)
    {
        $this->updateParcelInvoiceLineWithHttpInfo($body);
    }

    /**
     * Operation updateParcelInvoiceLineWithHttpInfo
     *
     * Update a parcelInvoiceLine
     *
     * @param  \Infoplus\Infoplus\Model\ParcelInvoiceLine $body ParcelInvoiceLine to be updated. (required)
     *
     * @throws \Infoplus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateParcelInvoiceLineWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateParcelInvoiceLineRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateParcelInvoiceLineAsync
     *
     * Update a parcelInvoiceLine
     *
     * @param  \Infoplus\Infoplus\Model\ParcelInvoiceLine $body ParcelInvoiceLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelInvoiceLineAsync($body)
    {
        return $this->updateParcelInvoiceLineAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateParcelInvoiceLineAsyncWithHttpInfo
     *
     * Update a parcelInvoiceLine
     *
     * @param  \Infoplus\Infoplus\Model\ParcelInvoiceLine $body ParcelInvoiceLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcelInvoiceLineAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->updateParcelInvoiceLineRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateParcelInvoiceLine'
     *
     * @param  \Infoplus\Infoplus\Model\ParcelInvoiceLine $body ParcelInvoiceLine to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateParcelInvoiceLineRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateParcelInvoiceLine'
            );
        }

        $resourcePath = '/beta/parcelInvoiceLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
